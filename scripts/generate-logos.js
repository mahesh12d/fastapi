import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const LOGOS_DIR = path.join(__dirname, '..', 'attached_assets', 'logos');
const OUTPUT_FILE = path.join(__dirname, '..', 'client', 'src', 'data', 'companyLogos.ts');

const COMPANY_COLORS = {
  microsoft: {
    primaryColor: '#00BCF2',
    secondaryColor: '#0078D4',
  },
  google: {
    primaryColor: '#4285F4',
    secondaryColor: '#DB4437',
  },
  apple: {
    primaryColor: '#000000',
    secondaryColor: '#A8A8A8',
  },
  amazon: {
    primaryColor: '#FF9900',
    secondaryColor: '#232F3E',
  },
  meta: {
    primaryColor: '#1877F2',
    secondaryColor: '#42B883',
  },
  netflix: {
    primaryColor: '#E50914',
    secondaryColor: '#221F1F',
  },
  stripe: {
    primaryColor: '#635BFF',
    secondaryColor: '#0A2540',
  },
  airbnb: {
    primaryColor: '#FF5A5F',
    secondaryColor: '#FF385C',
  },
  tesla: {
    primaryColor: '#CC0000',
    secondaryColor: '#000000',
  },
  uber: {
    primaryColor: '#000000',
    secondaryColor: '#1FBAD6',
  },
  shopify: {
    primaryColor: '#7AB55C',
    secondaryColor: '#95BF47',
  },
  discord: {
    primaryColor: '#5865F2',
    secondaryColor: '#7289DA',
  },
  slack: {
    primaryColor: '#4A154B',
    secondaryColor: '#36C5F0',
  },
  snapchat: {
    primaryColor: '#FFFC00',
    secondaryColor: '#000000',
  },
  mcdonald: {
    primaryColor: '#FFC72C',
    secondaryColor: '#DA291C',
  },
};

function normalizeCompanyName(filename) {
  return filename
    .replace(/\.svg$/i, '')
    .replace(/[,_.\-\s]/g, '')
    .toLowerCase();
}

function toValidVarName(filename) {
  return filename
    .replace(/\.svg$/i, '')
    .replace(/[^a-zA-Z0-9]/g, '')
    .toLowerCase();
}

function generateLogosFile() {
  if (!fs.existsSync(LOGOS_DIR)) {
    console.error(`Error: Logos directory not found at ${LOGOS_DIR}`);
    process.exit(1);
  }

  const logoFiles = fs.readdirSync(LOGOS_DIR).filter(file => file.endsWith('.svg'));

  if (logoFiles.length === 0) {
    console.warn('Warning: No SVG files found in logos directory');
    return;
  }

  const imports = [];
  const registry = [];

  logoFiles.forEach(file => {
    const normalizedName = normalizeCompanyName(file);
    const validVarName = toValidVarName(file);
    const varName = `${validVarName}Logo`;
    
    imports.push(`import ${varName} from '@assets/logos/${file}';`);
    registry.push(`  ${normalizedName}: ${varName},`);
  });

  const colorsJson = JSON.stringify(COMPANY_COLORS, null, 2)
    .replace(/"([^"]+)":/g, '$1:');

  const output = `/**
 * AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
 * Generated by scripts/generate-logos.js
 * Run 'npm run generate:logos' to regenerate
 */

${imports.join('\n')}

export interface CompanyInfo {
  id: string;
  name: string;
  displayName: string;
  logoPath: string;
  primaryColor: string;
  secondaryColor?: string;
}

// Auto-generated logo registry
const LOGO_REGISTRY: Record<string, string> = {
${registry.join('\n')}
};

// Default color configurations for known companies
const COMPANY_COLORS: Record<string, Pick<CompanyInfo, 'primaryColor' | 'secondaryColor'>> = ${colorsJson};

/**
 * Normalizes company name to match expected filename format
 */
function normalizeCompanyName(name: string): string {
  return name
    .replace(/[,_-]/g, '')
    .replace(/\\s+/g, '')
    .toLowerCase();
}

/**
 * Retrieves company logo information by name
 */
export function getCompanyLogo(companyName: string): CompanyInfo | null {
  const normalized = normalizeCompanyName(companyName);
  const logoPath = LOGO_REGISTRY[normalized];
  
  if (!logoPath) {
    return null;
  }

  const colors = COMPANY_COLORS[normalized] || {
    primaryColor: '#000000',
    secondaryColor: '#666666',
  };

  return {
    id: normalized,
    name: normalized,
    displayName: companyName,
    logoPath,
    ...colors,
  };
}

/**
 * Returns all available company logos
 */
export function getAllCompanyLogos(): CompanyInfo[] {
  return Object.keys(LOGO_REGISTRY).map(key => ({
    id: key,
    name: key,
    displayName: key.charAt(0).toUpperCase() + key.slice(1),
    logoPath: LOGO_REGISTRY[key],
    ...(COMPANY_COLORS[key] || {
      primaryColor: '#000000',
      secondaryColor: '#666666',
    }),
  }));
}

export { LOGO_REGISTRY, COMPANY_COLORS };
`;

  fs.writeFileSync(OUTPUT_FILE, output, 'utf-8');
  console.log(`âœ… Successfully generated ${OUTPUT_FILE}`);
  console.log(`ðŸ“Š Processed ${logoFiles.length} logo files`);
}

generateLogosFile();
