#!/usr/bin/env node
/**
 * Auto-generates companyLogos.ts based on SVG files in attached_assets/logos/
 * Run this script before building or in CI/CD pipeline
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const LOGOS_DIR = path.join(__dirname, '..', 'attached_assets', 'logos');
const OUTPUT_FILE = path.join(__dirname, '..', 'client', 'src', 'data', 'companyLogos.ts');

// Default colors for companies
const COMPANY_COLORS = {
  microsoft: { primaryColor: '#00BCF2', secondaryColor: '#0078D4' },
  google: { primaryColor: '#4285F4', secondaryColor: '#DB4437' },
  apple: { primaryColor: '#000000', secondaryColor: '#A8A8A8' },
  amazon: { primaryColor: '#FF9900', secondaryColor: '#232F3E' },
  meta: { primaryColor: '#1877F2', secondaryColor: '#42B883' },
  netflix: { primaryColor: '#E50914', secondaryColor: '#221F1F' },
  stripe: { primaryColor: '#635BFF', secondaryColor: '#0A2540' },
  airbnb: { primaryColor: '#FF5A5F', secondaryColor: '#FF385C' },
  tesla: { primaryColor: '#CC0000', secondaryColor: '#000000' },
  uber: { primaryColor: '#000000', secondaryColor: '#1FBAD6' },
  shopify: { primaryColor: '#7AB55C', secondaryColor: '#95BF47' },
  discord: { primaryColor: '#5865F2', secondaryColor: '#7289DA' },
  slack: { primaryColor: '#4A154B', secondaryColor: '#36C5F0' },
};

function normalizeCompanyName(filename) {
  return path.basename(filename, '.svg').toLowerCase().replace(/[^a-z0-9]/g, '');
}

function generateCompanyLogos() {
  console.log('🚀 Generating company logos...');
  
  if (!fs.existsSync(LOGOS_DIR)) {
    console.error(`❌ Logos directory not found: ${LOGOS_DIR}`);
    process.exit(1);
  }

  // Get all SVG files
  const svgFiles = fs.readdirSync(LOGOS_DIR)
    .filter(file => file.endsWith('.svg'))
    .sort();

  if (svgFiles.length === 0) {
    console.warn('⚠️ No SVG files found in logos directory');
    return;
  }

  console.log(`📁 Found ${svgFiles.length} logo files:`, svgFiles.map(f => f.replace('.svg', '')).join(', '));

  // Generate imports
  const imports = svgFiles.map(file => {
    const normalizedName = normalizeCompanyName(file);
    const varName = `${normalizedName}Logo`;
    return `import ${varName} from '@assets/logos/${file}';`;
  }).join('\n');

  // Generate registry
  const registryEntries = svgFiles.map(file => {
    const normalizedName = normalizeCompanyName(file);
    const varName = `${normalizedName}Logo`;
    return `  ${normalizedName}: ${varName},`;
  }).join('\n');

  // Generate colors object
  const colorsEntries = Object.entries(COMPANY_COLORS)
    .map(([company, colors]) => 
      `  ${company}: {\n    primaryColor: '${colors.primaryColor}',\n    secondaryColor: '${colors.secondaryColor}',\n  },`
    ).join('\n');

  const fileContent = `/**
 * AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
 * Generated by scripts/generate-logos.js
 * Run 'npm run generate:logos' to regenerate
 */

${imports}

export interface CompanyInfo {
  id: string;
  name: string;
  displayName: string;
  logoPath: string;
  primaryColor: string;
  secondaryColor?: string;
}

// Auto-generated logo registry
const LOGO_REGISTRY: Record<string, string> = {
${registryEntries}
};

// Default color configurations for known companies
const COMPANY_COLORS: Record<string, Pick<CompanyInfo, 'primaryColor' | 'secondaryColor'>> = {
${colorsEntries}
};

/**
 * Normalizes company name to match expected filename format
 */
function normalizeCompanyName(companyName: string): string {
  return companyName.toLowerCase()
    .trim()
    .replace(/\\s+/g, '')
    .replace(/[^a-z0-9]/g, '');
}

/**
 * Gets company info by name using auto-generated logo registry
 */
export function getCompanyInfo(companyName: string): CompanyInfo | null {
  if (!companyName) return null;
  
  const normalizedName = normalizeCompanyName(companyName);
  const logoPath = LOGO_REGISTRY[normalizedName];
  
  // If no logo found, return null
  if (!logoPath) return null;
  
  // Get colors from config or use defaults
  const colors = COMPANY_COLORS[normalizedName] || {
    primaryColor: '#6366F1', // Default indigo
    secondaryColor: '#4F46E5',
  };
  
  // Create display name (capitalize first letter of each word)
  const displayName = companyName
    .toLowerCase()
    .split(/\\s+/)
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
  
  return {
    id: normalizedName,
    name: displayName,
    displayName: displayName,
    logoPath: logoPath,
    primaryColor: colors.primaryColor,
    secondaryColor: colors.secondaryColor,
  };
}

/**
 * Gets company info by ID
 */
export function getCompanyById(id: string): CompanyInfo | null {
  return getCompanyInfo(id);
}

/**
 * Generates a company ID from a company name
 */
export function generateCompanyId(companyName: string): string {
  return normalizeCompanyName(companyName);
}

/**
 * Gets all available companies (those in the logo registry)
 */
export function getAllCompanies(): CompanyInfo[] {
  const companies: CompanyInfo[] = [];
  
  for (const [normalizedName, logoPath] of Object.entries(LOGO_REGISTRY)) {
    const colors = COMPANY_COLORS[normalizedName] || {
      primaryColor: '#6366F1',
      secondaryColor: '#4F46E5',
    };
    
    const displayName = normalizedName.charAt(0).toUpperCase() + normalizedName.slice(1);
    
    companies.push({
      id: normalizedName,
      name: displayName,
      displayName: displayName,
      logoPath: logoPath,
      primaryColor: colors.primaryColor,
      secondaryColor: colors.secondaryColor,
    });
  }
  
  return companies;
}

/**
 * Checks if a company logo exists
 */
export function hasCompanyLogo(companyName: string): boolean {
  const info = getCompanyInfo(companyName);
  return info !== null;
}
`;

  fs.writeFileSync(OUTPUT_FILE, fileContent);
  console.log(`Generated ${OUTPUT_FILE} with ${svgFiles.length} company logos`);
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  generateCompanyLogos();
}

export { generateCompanyLogos };