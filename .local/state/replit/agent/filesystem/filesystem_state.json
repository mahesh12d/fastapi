{"file_contents":{"drizzle.config.ts":{"content":"// import { defineConfig } from \"drizzle-kit\";\n\n// if (!process.env.DATABASE_URL) {\n//   throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n// }\n\n// export default defineConfig({\n//   out: \"./migrations\",\n//   schema: \"./shared/schema.ts\",\n//   dialect: \"postgresql\",\n//   dbCredentials: {\n//     url: process.env.DATABASE_URL,\n//   },\n// });\n","size_bytes":361},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"## 🚀 ZERO-SETUP IMPORT\n\nThis project is 100% ready to run:\n\n1. Dependencies: ✅ Already installed\n2. Configuration: ✅ Pre-configured for Replit\n3. Database: ✅ Auto-connects\n4. Run command: `npm run dev`\n5. No agent setup needed - just run!\n\nOverview\nSQLGym is a gamified SQL learning platform that combines coding practice with fitness-themed motivation. The application allows users to solve SQL problems, track their progress through an XP system, compete on leaderboards, and participate in a community forum. The platform features a comprehensive problem set with different difficulty levels, submission tracking, and a badge system to reward achievements.\n\nUser Preferences\nPreferred communication style: Simple, everyday language.\n\nSystem Architecture\nFrontend Architecture\nThe client uses React with TypeScript, built with Vite for fast development. The UI is constructed with shadcn/ui components and Radix UI primitives, providing a consistent design system with Tailwind CSS for styling. The application uses Wouter for lightweight client-side routing and TanStack Query for server state management and caching. Form handling is implemented with React Hook Form and Zod for validation.\n\nBackend Architecture\nThe server is built with FastAPI and Python, following a RESTful API pattern. The architecture uses SQLAlchemy ORM with Pydantic schemas for type safety and automatic API documentation. JWT tokens handle authentication with bcrypt for password hashing. The server includes middleware for CORS, request logging, and error handling.\n\nDatabase Design\nThe system uses SQLAlchemy ORM with PostgreSQL as the primary database. The schema includes tables for users, problems, submissions, community posts, post comments, post likes, and user badges. The database supports user progression tracking, problem solving statistics, and social features like community posts and comments.\n\nAuthentication System\nAuthentication is implemented using JWT tokens stored in localStorage on the client side. The server validates tokens using middleware that checks for Authorization headers. User registration includes password hashing with bcrypt, and the system checks for existing usernames and emails to prevent duplicates.\n\nKey Features\nGamification: XP system with levels (SQL Beginner, Trainee, Athlete, Powerlifter) and badge rewards\nProblem Management: SQL problems categorized by difficulty with hints and expected outputs\nCode Execution: SQL query submission and validation system\nSocial Features: Community posts with likes and comments\nProgress Tracking: User submissions history and leaderboards\nResponsive Design: Mobile-friendly interface with proper breakpoints\nState Management\nClient-side state is managed through TanStack Query for server state and React's built-in state management for UI state. Authentication state is handled through a custom AuthContext provider that persists user sessions in localStorage.\n\nExternal Dependencies\nDatabase Services\nNeon Database: PostgreSQL hosting service accessed via @neondatabase/serverless driver\nSQLAlchemy ORM: Type-safe database operations with automatic schema migration support\nUI Libraries\nRadix UI: Unstyled, accessible UI primitives for complex components\nshadcn/ui: Pre-built component library built on Radix UI\nTailwind CSS: Utility-first CSS framework for styling\nLucide React: Icon library for consistent iconography\nDevelopment Tools\nVite: Build tool with hot module replacement for development\nTypeScript: Type safety across the entire application\nTanStack Query: Server state management and caching\nReact Hook Form: Form handling with validation\nZod: Schema validation for forms and API data\nAuthentication & Security\nJSON Web Tokens (jsonwebtoken): Token-based authentication\nbcrypt: Password hashing and verification\nWouter: Lightweight client-side routing\nDevelopment Environment\nReplit Integration: Special development tools and error overlays for Replit environment\nESBuild: Fast bundling for production builds\nPostCSS: CSS processing with Autoprefixer\n🚀 QUICK SETUP FOR FUTURE IMPORTS (Reduces Agent Usage)\nOne-Command Setup\nFor future GitHub imports of this project, run this command to automate everything:\n\nbash scripts/replit-setup.sh && npm run dev\nWhat This Automates\n✅ Node.js dependency installation\n✅ Python dependency installation\n✅ Database connection verification\n✅ Environment configuration\n✅ Directory creation\n✅ Configuration validation\n✅ Basic functionality testing\nManual Setup Steps (if needed)\nDependencies: npm install && pip install -r requirements.txt\nDatabase: Ensure DATABASE_URL environment variable is set\nEnvironment: Copy .env.example to .env if needed\nRun: npm run dev (starts frontend Vite dev server on :5000 and FastAPI backend on :8000)\nProduction Deployment\nBuild: npm run build (builds frontend to dist/public)\nStart: npm run start (serves both frontend and backend on port 5000)\nTarget: Already configured for autoscale deployment\nAgent Usage Optimization\nThis project has comprehensive .replit configuration\nAll modules, workflows, and integrations pre-configured\nUse the setup script for zero-analysis imports\nExpert mode enabled for faster agent operations\n","size_bytes":5202},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fillProgress: {\n          from: {\n            width: \"0%\",\n          },\n          to: {\n            width: \"var(--progress-width)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fill-progress\": \"fillProgress 2s ease-in-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2975},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    // Temporarily disabled cartographer plugin due to \"traverse is not a function\" error\n    // ...(process.env.NODE_ENV !== \"production\" &&\n    // process.env.REPL_ID !== undefined\n    //   ? [\n    //       await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n    //         m.cartographer()\n    //       ),\n    //     ]\n    //   : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n    allowedHosts: true,\n    host: \"0.0.0.0\",\n    port: 5000,\n    proxy: {\n      \"/api\": {\n        target: \"http://localhost:8000\",\n        changeOrigin: true,\n      },\n    },\n  },\n});\n","size_bytes":1259},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\n// Environment detection\nconst isReplit = !!(process.env.REPL_ID || process.env.REPLIT_DEV_DOMAIN);\nconst isDevelopment = process.env.NODE_ENV === 'development';\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// Neon configuration\nneonConfig.webSocketConstructor = ws;\nneonConfig.pipelineConnect = false;\n\n// SSL Configuration based on environment\nif (isDevelopment) {\n  // For development (both local and Replit), disable strict SSL verification\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\";\n  console.log(\"🔓 SSL verification disabled for development\");\n}\n\nif (!process.env.DATABASE_URL) {\n  const environmentHelp = isReplit \n    ? \"Make sure PostgreSQL is enabled in your Replit environment\" \n    : \"Set DATABASE_URL in your local environment (.env file)\";\n  \n  throw new Error(\n    `DATABASE_URL must be set. ${environmentHelp}`\n  );\n}\n\n// Database connection configuration\nconst dbConfig: any = {\n  connectionString: process.env.DATABASE_URL,\n};\n\n// SSL configuration based on environment\nif (isProduction) {\n  // Production: Enable SSL but don't reject unauthorized (for compatibility)\n  dbConfig.ssl = { rejectUnauthorized: false };\n} else if (isReplit) {\n  // Replit development: No SSL for internal connections\n  dbConfig.ssl = false;\n} else {\n  // Local development: Typically no SSL needed\n  dbConfig.ssl = false;\n}\n\n// Log connection info (without exposing sensitive data)\nconst dbUrl = new URL(process.env.DATABASE_URL);\nconsole.log(`🗄️  Database: ${dbUrl.hostname}:${dbUrl.port}${dbUrl.pathname}`);\nconsole.log(`🔧 Environment: ${isReplit ? 'Replit' : 'Local'} (${process.env.NODE_ENV || 'development'})`);\n\nexport const pool = new Pool(dbConfig);\nexport const db = drizzle({ client: pool, schema });","size_bytes":1924},"server/index.ts":{"content":"import \"dotenv/config\";\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Environment detection\n  const isReplit = process.env.REPL_ID || process.env.REPLIT_DEV_DOMAIN;\n  const isProduction = process.env.NODE_ENV === \"production\";\n\n  // Port configuration - flexible for local and Replit\n  const port = parseInt(\n    process.env.PORT || (isReplit ? \"5000\" : \"3000\"), // Default to 5000 for Replit, 3000 for local\n    10\n  );\n\n  // Host configuration - 0.0.0.0 for Replit, localhost for local\n  const host = isReplit ? \"0.0.0.0\" : \"localhost\";\n\n  // Server options\n  const serverOptions: any = {\n    port,\n    host,\n  };\n\n  // Only add reusePort for Replit to avoid local conflicts\n  if (isReplit) {\n    serverOptions.reusePort = true;\n  }\n\n  server.listen(serverOptions, () => {\n    const environment = isReplit ? \"Replit\" : \"Local\";\n    log(`🚀 ${environment} server running at http://${host}:${port}`);\n    log(`📊 Environment: ${process.env.NODE_ENV || \"development\"}`);\n    log(\n      `🔗 Database: ${\n        process.env.DATABASE_URL ? \"Connected\" : \"Not configured\"\n      }`\n    );\n  });\n})();\n","size_bytes":2696},"server/oauth.ts":{"content":"import passport from 'passport';\nimport { Strategy as GoogleStrategy } from 'passport-google-oauth20';\nimport { Strategy as GitHubStrategy } from 'passport-github2';\nimport { storage } from './storage';\nimport jwt from 'jsonwebtoken';\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-jwt-secret-key\";\n\nexport function setupOAuth() {\n  // Only setup OAuth if environment variables are provided\n  const googleClientId = process.env.GOOGLE_CLIENT_ID;\n  const googleClientSecret = process.env.GOOGLE_CLIENT_SECRET;\n  const githubClientId = process.env.GITHUB_CLIENT_ID;\n  const githubClientSecret = process.env.GITHUB_CLIENT_SECRET;\n\n  // Google OAuth Strategy\n  if (googleClientId && googleClientSecret) {\n    passport.use(new GoogleStrategy({\n      clientID: googleClientId,\n      clientSecret: googleClientSecret,\n      callbackURL: \"/api/auth/google/callback\"\n    },\n    async (accessToken: string, refreshToken: string, profile: any, done: any) => {\n    try {\n      let user = await storage.getUserByGoogleId(profile.id);\n      \n      if (user) {\n        return done(null, user);\n      }\n      \n      // Check if user exists with same email\n      if (profile.emails && profile.emails[0]) {\n        user = await storage.getUserByEmail(profile.emails[0].value);\n        if (user) {\n          // Update existing user with Google ID\n          user = await storage.updateUser(user.id, {\n            googleId: profile.id,\n            authProvider: 'google',\n            profileImageUrl: user.profileImageUrl || profile.photos?.[0]?.value,\n          });\n          return done(null, user);\n        }\n      }\n      \n      // Create new user\n      const newUser = await storage.createUser({\n        username: profile.displayName || `user_${profile.id}`,\n        email: profile.emails?.[0]?.value || '',\n        firstName: profile.name?.givenName,\n        lastName: profile.name?.familyName,\n        profileImageUrl: profile.photos?.[0]?.value,\n        googleId: profile.id,\n        authProvider: 'google',\n      });\n      \n      return done(null, newUser);\n    } catch (error) {\n      return done(error, undefined);\n    }\n    }));\n  }\n\n  // GitHub OAuth Strategy\n  if (githubClientId && githubClientSecret) {\n    passport.use(new GitHubStrategy({\n      clientID: githubClientId,\n      clientSecret: githubClientSecret,\n      callbackURL: \"/api/auth/github/callback\"\n    },\n    async (accessToken: string, refreshToken: string, profile: any, done: any) => {\n    try {\n      let user = await storage.getUserByGithubId(profile.id);\n      \n      if (user) {\n        return done(null, user);\n      }\n      \n      // Check if user exists with same email\n      if (profile.emails && profile.emails[0]) {\n        user = await storage.getUserByEmail(profile.emails[0].value);\n        if (user) {\n          // Update existing user with GitHub ID\n          user = await storage.updateUser(user.id, {\n            githubId: profile.id,\n            authProvider: 'github',\n            profileImageUrl: user.profileImageUrl || profile.photos?.[0]?.value,\n          });\n          return done(null, user);\n        }\n      }\n      \n      // Create new user\n      const newUser = await storage.createUser({\n        username: profile.username || `user_${profile.id}`,\n        email: profile.emails?.[0]?.value || '',\n        firstName: profile.displayName?.split(' ')[0],\n        lastName: profile.displayName?.split(' ').slice(1).join(' '),\n        profileImageUrl: profile.photos?.[0]?.value,\n        githubId: profile.id,\n        authProvider: 'github',\n      });\n      \n      return done(null, newUser);\n    } catch (error) {\n      return done(error, undefined);\n    }\n    }));\n  }\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUserById(id);\n      done(null, user);\n    } catch (error) {\n      done(error, null);\n    }\n  });\n}","size_bytes":3942},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertUserSchema,\n  insertSubmissionSchema,\n  insertCommunityPostSchema,\n  insertPostCommentSchema,\n} from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport { setupOAuth } from \"./oauth\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-jwt-secret-key\";\n\n// Middleware to verify JWT token\nconst authenticateToken = (req: any, res: any, next: any) => {\n  const authHeader = req.headers[\"authorization\"];\n  const token = authHeader && authHeader.split(\" \")[1];\n\n  if (!token) {\n    return res.status(401).json({ message: \"Access token required\" });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      return res.status(403).json({ message: \"Invalid or expired token\" });\n    }\n    req.user = user;\n    next();\n  });\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configure session middleware\n  app.use(\n    session({\n      secret: process.env.SESSION_SECRET || \"fallback-secret\",\n      resave: false,\n      saveUninitialized: false,\n      cookie: { secure: false }, // Set to true in production with HTTPS\n    })\n  );\n\n  // Initialize passport and session\n  app.use(passport.initialize());\n  app.use(passport.session());\n  setupOAuth();\n\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      const existingUsername = await storage.getUserByUsername(\n        userData.username\n      );\n      if (existingUsername) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n\n      // Hash password\n      const saltRounds = 10;\n      const passwordHash = userData.passwordHash\n        ? await bcrypt.hash(userData.passwordHash, saltRounds)\n        : undefined;\n\n      // Create user\n      const user = await storage.createUser({\n        ...userData,\n        passwordHash,\n      });\n\n      // Generate JWT token\n      const token = jwt.sign(\n        { userId: user.id, username: user.username },\n        JWT_SECRET,\n        {\n          expiresIn: \"24h\",\n        }\n      );\n\n      res.status(201).json({\n        message: \"User created successfully\",\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          profileImageUrl: user.profileImageUrl,\n          problemsSolved: user.problemsSolved,\n        },\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      // Find user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Verify password\n      if (!user.passwordHash) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      const isValidPassword = await bcrypt.compare(password, user.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Generate JWT token\n      const token = jwt.sign(\n        { userId: user.id, username: user.username },\n        JWT_SECRET,\n        {\n          expiresIn: \"24h\",\n        }\n      );\n\n      res.json({\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          profileImageUrl: user.profileImageUrl,\n          problemsSolved: user.problemsSolved,\n        },\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Get current user\n  app.get(\"/api/auth/user\", authenticateToken, async (req: any, res) => {\n    try {\n      const user = await storage.getUserById(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        profileImageUrl: user.profileImageUrl,\n        problemsSolved: user.problemsSolved,\n      });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Problem routes\n  app.get(\"/api/problems\", async (req, res) => {\n    try {\n      const { difficulty } = req.query;\n      const authHeader = req.headers[\"authorization\"];\n      const token = authHeader && authHeader.split(\" \")[1];\n      let problems;\n\n      // If user is authenticated, include solve status\n      if (token) {\n        try {\n          const decoded = jwt.verify(token, JWT_SECRET) as any;\n          const userId = decoded.userId;\n\n          if (difficulty && typeof difficulty === \"string\") {\n            problems = await storage.getProblemsByDifficultyForUser(\n              difficulty,\n              userId\n            );\n          } else {\n            problems = await storage.getAllProblemsForUser(userId);\n          }\n        } catch (jwtError) {\n          // If token is invalid, fall back to unauthenticated response\n          if (difficulty && typeof difficulty === \"string\") {\n            problems = await storage.getProblemsByDifficulty(difficulty);\n          } else {\n            problems = await storage.getAllProblems();\n          }\n        }\n      } else {\n        // Unauthenticated user\n        if (difficulty && typeof difficulty === \"string\") {\n          problems = await storage.getProblemsByDifficulty(difficulty);\n        } else {\n          problems = await storage.getAllProblems();\n        }\n      }\n\n      res.json(problems);\n    } catch (error) {\n      console.error(\"Get problems error:\", error);\n      res.status(500).json({ message: \"Failed to fetch problems\" });\n    }\n  });\n\n  app.get(\"/api/problems/:id\", async (req, res) => {\n    try {\n      const problem = await storage.getProblemById(req.params.id);\n      if (!problem) {\n        return res.status(404).json({ message: \"Problem not found\" });\n      }\n      res.json(problem);\n    } catch (error) {\n      console.error(\"Get problem error:\", error);\n      res.status(500).json({ message: \"Failed to fetch problem\" });\n    }\n  });\n\n  // OAuth routes\n  app.get(\n    \"/api/auth/google\",\n    passport.authenticate(\"google\", { scope: [\"profile\", \"email\"] })\n  );\n\n  app.get(\n    \"/api/auth/google/callback\",\n    passport.authenticate(\"google\", { failureRedirect: \"/\" }),\n    (req, res) => {\n      // Successful authentication, create JWT and redirect\n      const user = req.user as any;\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, {\n        expiresIn: \"7d\",\n      });\n      res.redirect(`/?token=${token}`);\n    }\n  );\n\n  app.get(\n    \"/api/auth/github\",\n    passport.authenticate(\"github\", { scope: [\"user:email\"] })\n  );\n\n  app.get(\n    \"/api/auth/github/callback\",\n    passport.authenticate(\"github\", { failureRedirect: \"/\" }),\n    (req, res) => {\n      // Successful authentication, create JWT and redirect\n      const user = req.user as any;\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, {\n        expiresIn: \"7d\",\n      });\n      res.redirect(`/?token=${token}`);\n    }\n  );\n\n  // Submission routes\n  app.post(\"/api/submissions\", authenticateToken, async (req: any, res) => {\n    try {\n      const submissionData = insertSubmissionSchema.parse({\n        ...req.body,\n        userId: req.user.userId,\n      });\n\n      // Simulate SQL query execution\n      const isCorrect = await simulateQueryExecution(\n        submissionData.query,\n        submissionData.problemId\n      );\n      const executionTime = Math.floor(Math.random() * 500) + 50; // Random execution time\n\n      const submission = await storage.createSubmission({\n        ...submissionData,\n        isCorrect,\n        executionTime,\n      });\n\n      // If correct, update user progress\n      if (isCorrect) {\n        await storage.updateUserProgress(req.user.userId);\n      }\n\n      res.json({\n        ...submission,\n        message: isCorrect\n          ? \"Query executed successfully!\"\n          : \"Query has errors or incorrect result\",\n      });\n    } catch (error) {\n      console.error(\"Submission error:\", error);\n      res.status(500).json({ message: \"Failed to submit solution\" });\n    }\n  });\n\n  app.get(\n    \"/api/submissions/user/:userId\",\n    authenticateToken,\n    async (req: any, res) => {\n      try {\n        // Users can only view their own submissions\n        if (req.params.userId !== req.user.userId) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n\n        const submissions = await storage.getUserSubmissions(req.params.userId);\n        res.json(submissions);\n      } catch (error) {\n        console.error(\"Get submissions error:\", error);\n        res.status(500).json({ message: \"Failed to fetch submissions\" });\n      }\n    }\n  );\n\n  // Leaderboard routes\n  app.get(\"/api/leaderboard\", async (req, res) => {\n    try {\n      const { limit } = req.query;\n      const leaderboard = await storage.getLeaderboard(\n        limit ? parseInt(limit as string) : undefined\n      );\n\n      res.json(\n        leaderboard.map((user) => ({\n          id: user.id,\n          username: user.username,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          profileImageUrl: user.profileImageUrl,\n          problemsSolved: user.problemsSolved,\n        }))\n      );\n    } catch (error) {\n      console.error(\"Get leaderboard error:\", error);\n      res.status(500).json({ message: \"Failed to fetch leaderboard\" });\n    }\n  });\n\n  // Community routes\n  app.get(\"/api/community/posts\", async (req, res) => {\n    try {\n      const posts = await storage.getAllCommunityPosts();\n      res.json(\n        posts.map((post) => ({\n          ...post,\n          user: {\n            id: post.user.id,\n            username: post.user.username,\n            firstName: post.user.firstName,\n            lastName: post.user.lastName,\n            profileImageUrl: post.user.profileImageUrl,\n          },\n        }))\n      );\n    } catch (error) {\n      console.error(\"Get community posts error:\", error);\n      res.status(500).json({ message: \"Failed to fetch community posts\" });\n    }\n  });\n\n  app.post(\"/api/community/posts\", authenticateToken, async (req: any, res) => {\n    try {\n      const postData = insertCommunityPostSchema.parse({\n        ...req.body,\n        userId: req.user.userId,\n      });\n\n      const post = await storage.createCommunityPost(postData);\n      res.status(201).json(post);\n    } catch (error) {\n      console.error(\"Create post error:\", error);\n      res.status(500).json({ message: \"Failed to create post\" });\n    }\n  });\n\n  app.post(\n    \"/api/community/posts/:postId/like\",\n    authenticateToken,\n    async (req: any, res) => {\n      try {\n        await storage.likeCommunityPost(req.user.userId, req.params.postId);\n        res.json({ message: \"Post liked successfully\" });\n      } catch (error) {\n        console.error(\"Like post error:\", error);\n        res.status(500).json({ message: \"Failed to like post\" });\n      }\n    }\n  );\n\n  app.delete(\n    \"/api/community/posts/:postId/like\",\n    authenticateToken,\n    async (req: any, res) => {\n      try {\n        await storage.unlikeCommunityPost(req.user.userId, req.params.postId);\n        res.json({ message: \"Post unliked successfully\" });\n      } catch (error) {\n        console.error(\"Unlike post error:\", error);\n        res.status(500).json({ message: \"Failed to unlike post\" });\n      }\n    }\n  );\n\n  app.get(\"/api/community/posts/:postId/comments\", async (req, res) => {\n    try {\n      const comments = await storage.getPostComments(req.params.postId);\n      res.json(\n        comments.map((comment) => ({\n          ...comment,\n          user: {\n            id: comment.user.id,\n            username: comment.user.username,\n            firstName: comment.user.firstName,\n            lastName: comment.user.lastName,\n            profileImageUrl: comment.user.profileImageUrl,\n          },\n        }))\n      );\n    } catch (error) {\n      console.error(\"Get comments error:\", error);\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post(\n    \"/api/community/posts/:postId/comments\",\n    authenticateToken,\n    async (req: any, res) => {\n      try {\n        const commentData = insertPostCommentSchema.parse({\n          ...req.body,\n          userId: req.user.userId,\n          postId: req.params.postId,\n        });\n\n        const comment = await storage.createPostComment(commentData);\n        res.status(201).json(comment);\n      } catch (error) {\n        console.error(\"Create comment error:\", error);\n        res.status(500).json({ message: \"Failed to create comment\" });\n      }\n    }\n  );\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper functions\nasync function simulateQueryExecution(\n  query: string,\n  problemId: string\n): Promise<boolean> {\n  // This is a simplified simulation. In a real app, you'd run the query against a sandbox database.\n  const problem = await storage.getProblemById(problemId);\n  if (!problem) return false;\n\n  // Simple validation: check if query contains basic SQL keywords and structure\n  const normalizedQuery = query.toLowerCase().trim();\n\n  // Basic checks for different problem types\n  if (problem.title.toLowerCase().includes(\"sum\")) {\n    return (\n      normalizedQuery.includes(\"select\") &&\n      normalizedQuery.includes(\"from\") &&\n      (normalizedQuery.includes(\"sum\") || normalizedQuery.includes(\"+\"))\n    );\n  }\n\n  if (problem.title.toLowerCase().includes(\"join\")) {\n    return (\n      normalizedQuery.includes(\"select\") &&\n      normalizedQuery.includes(\"from\") &&\n      normalizedQuery.includes(\"join\")\n    );\n  }\n\n  // Default validation: must contain SELECT and FROM\n  return normalizedQuery.includes(\"select\") && normalizedQuery.includes(\"from\");\n}\n","size_bytes":14613},"server/storage.ts":{"content":"import {\n  users,\n  problems,\n  submissions,\n  communityPosts,\n  postLikes,\n  postComments,\n  type User,\n  type InsertUser,\n  type Problem,\n  type InsertProblem,\n  type Submission,\n  type InsertSubmission,\n  type CommunityPost,\n  type InsertCommunityPost,\n  type PostComment,\n  type InsertPostComment,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUserById(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByGoogleId(googleId: string): Promise<User | undefined>;\n  getUserByGithubId(githubId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  getLeaderboard(limit?: number): Promise<User[]>;\n  updateUserProgress(userId: string): Promise<void>;\n\n  // Problem operations\n  getAllProblems(): Promise<(Problem & { solvedCount: number })[]>;\n  getAllProblemsForUser(userId: string): Promise<(Problem & { solvedCount: number; isUserSolved: boolean })[]>;\n  getProblemById(id: string): Promise<Problem | undefined>;\n  getProblemsByDifficulty(difficulty: string): Promise<(Problem & { solvedCount: number })[]>;\n  getProblemsByDifficultyForUser(difficulty: string, userId: string): Promise<(Problem & { solvedCount: number; isUserSolved: boolean })[]>;\n  createProblem(problem: InsertProblem): Promise<Problem>;\n\n  // Submission operations\n  createSubmission(submission: InsertSubmission): Promise<Submission>;\n  getUserSubmissions(userId: string): Promise<Submission[]>;\n  getUserSubmissionForProblem(userId: string, problemId: string): Promise<Submission[]>;\n\n  // Community operations\n  getAllCommunityPosts(): Promise<(CommunityPost & { user: User })[]>;\n  createCommunityPost(post: InsertCommunityPost): Promise<CommunityPost>;\n  likeCommunityPost(userId: string, postId: string): Promise<void>;\n  unlikeCommunityPost(userId: string, postId: string): Promise<void>;\n  getPostComments(postId: string): Promise<(PostComment & { user: User })[]>;\n  createPostComment(comment: InsertPostComment): Promise<PostComment>;\n\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUserById(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async getUserByGoogleId(googleId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.googleId, googleId));\n    return user;\n  }\n\n  async getUserByGithubId(githubId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.githubId, githubId));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getLeaderboard(limit: number = 50): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .orderBy(desc(users.problemsSolved))\n      .limit(limit);\n  }\n\n  async updateUserProgress(userId: string): Promise<void> {\n    await db\n      .update(users)\n      .set({\n        problemsSolved: sql`${users.problemsSolved} + 1`,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId));\n  }\n\n  // Problem operations\n  async getAllProblems(): Promise<(Problem & { solvedCount: number })[]> {\n    const result = await db\n      .select({\n        id: problems.id,\n        title: problems.title,\n        description: problems.description,\n        difficulty: problems.difficulty,\n        tags: problems.tags,\n        companies: problems.companies,\n        schema: problems.schema,\n        expectedOutput: problems.expectedOutput,\n        hints: problems.hints,\n        createdAt: problems.createdAt,\n        updatedAt: problems.updatedAt,\n        solvedCount: sql<number>`COALESCE(COUNT(DISTINCT CASE WHEN ${submissions.isCorrect} = true THEN ${submissions.userId} END), 0)`,\n      })\n      .from(problems)\n      .leftJoin(submissions, eq(problems.id, submissions.problemId))\n      .groupBy(problems.id)\n      .orderBy(problems.title);\n    \n    return result.map(row => ({\n      ...row,\n      solvedCount: Number(row.solvedCount)\n    }));\n  }\n\n  async getProblemById(id: string): Promise<Problem | undefined> {\n    const [problem] = await db.select().from(problems).where(eq(problems.id, id));\n    return problem;\n  }\n\n  async getProblemsByDifficulty(difficulty: string): Promise<(Problem & { solvedCount: number })[]> {\n    const result = await db\n      .select({\n        id: problems.id,\n        title: problems.title,\n        description: problems.description,\n        difficulty: problems.difficulty,\n        tags: problems.tags,\n        companies: problems.companies,\n        schema: problems.schema,\n        expectedOutput: problems.expectedOutput,\n        hints: problems.hints,\n        createdAt: problems.createdAt,\n        updatedAt: problems.updatedAt,\n        solvedCount: sql<number>`COALESCE(COUNT(DISTINCT CASE WHEN ${submissions.isCorrect} = true THEN ${submissions.userId} END), 0)`,\n      })\n      .from(problems)\n      .leftJoin(submissions, eq(problems.id, submissions.problemId))\n      .where(eq(problems.difficulty, difficulty))\n      .groupBy(problems.id)\n      .orderBy(problems.title);\n    \n    return result.map(row => ({\n      ...row,\n      solvedCount: Number(row.solvedCount)\n    }));\n  }\n\n  async getAllProblemsForUser(userId: string): Promise<(Problem & { solvedCount: number; isUserSolved: boolean })[]> {\n    const result = await db\n      .select({\n        id: problems.id,\n        title: problems.title,\n        description: problems.description,\n        difficulty: problems.difficulty,\n        tags: problems.tags,\n        companies: problems.companies,\n        schema: problems.schema,\n        expectedOutput: problems.expectedOutput,\n        hints: problems.hints,\n        createdAt: problems.createdAt,\n        updatedAt: problems.updatedAt,\n        solvedCount: sql<number>`COALESCE(COUNT(DISTINCT CASE WHEN ${submissions.isCorrect} = true THEN ${submissions.userId} END), 0)`,\n        isUserSolved: sql<boolean>`COALESCE(MAX(CASE WHEN ${submissions.userId} = ${userId} AND ${submissions.isCorrect} = true THEN 1 ELSE 0 END), 0) = 1`,\n      })\n      .from(problems)\n      .leftJoin(submissions, eq(problems.id, submissions.problemId))\n      .groupBy(problems.id)\n      .orderBy(problems.title);\n    \n    return result.map(row => ({\n      ...row,\n      solvedCount: Number(row.solvedCount),\n      isUserSolved: Boolean(row.isUserSolved)\n    }));\n  }\n\n  async getProblemsByDifficultyForUser(difficulty: string, userId: string): Promise<(Problem & { solvedCount: number; isUserSolved: boolean })[]> {\n    const result = await db\n      .select({\n        id: problems.id,\n        title: problems.title,\n        description: problems.description,\n        difficulty: problems.difficulty,\n        tags: problems.tags,\n        companies: problems.companies,\n        schema: problems.schema,\n        expectedOutput: problems.expectedOutput,\n        hints: problems.hints,\n        createdAt: problems.createdAt,\n        updatedAt: problems.updatedAt,\n        solvedCount: sql<number>`COALESCE(COUNT(DISTINCT CASE WHEN ${submissions.isCorrect} = true THEN ${submissions.userId} END), 0)`,\n        isUserSolved: sql<boolean>`COALESCE(MAX(CASE WHEN ${submissions.userId} = ${userId} AND ${submissions.isCorrect} = true THEN 1 ELSE 0 END), 0) = 1`,\n      })\n      .from(problems)\n      .leftJoin(submissions, eq(problems.id, submissions.problemId))\n      .where(eq(problems.difficulty, difficulty))\n      .groupBy(problems.id)\n      .orderBy(problems.title);\n    \n    return result.map(row => ({\n      ...row,\n      solvedCount: Number(row.solvedCount),\n      isUserSolved: Boolean(row.isUserSolved)\n    }));\n  }\n\n  async createProblem(problemData: InsertProblem): Promise<Problem> {\n    const [problem] = await db.insert(problems).values([problemData]).returning();\n    return problem;\n  }\n\n\n  // Submission operations\n  async createSubmission(submissionData: InsertSubmission): Promise<Submission> {\n    const [submission] = await db.insert(submissions).values(submissionData).returning();\n    return submission;\n  }\n\n  async getUserSubmissions(userId: string): Promise<Submission[]> {\n    return await db\n      .select()\n      .from(submissions)\n      .where(eq(submissions.userId, userId))\n      .orderBy(desc(submissions.submittedAt));\n  }\n\n  async getUserSubmissionForProblem(userId: string, problemId: string): Promise<Submission[]> {\n    return await db\n      .select()\n      .from(submissions)\n      .where(and(eq(submissions.userId, userId), eq(submissions.problemId, problemId)))\n      .orderBy(desc(submissions.submittedAt));\n  }\n\n  // Community operations\n  async getAllCommunityPosts(): Promise<(CommunityPost & { user: User })[]> {\n    return await db\n      .select({\n        id: communityPosts.id,\n        userId: communityPosts.userId,\n        content: communityPosts.content,\n        codeSnippet: communityPosts.codeSnippet,\n        likes: communityPosts.likes,\n        comments: communityPosts.comments,\n        createdAt: communityPosts.createdAt,\n        updatedAt: communityPosts.updatedAt,\n        user: users,\n      })\n      .from(communityPosts)\n      .innerJoin(users, eq(communityPosts.userId, users.id))\n      .orderBy(desc(communityPosts.createdAt));\n  }\n\n  async createCommunityPost(postData: InsertCommunityPost): Promise<CommunityPost> {\n    const [post] = await db.insert(communityPosts).values(postData).returning();\n    return post;\n  }\n\n  async likeCommunityPost(userId: string, postId: string): Promise<void> {\n    await db.insert(postLikes).values({ userId, postId });\n    await db\n      .update(communityPosts)\n      .set({ likes: sql`${communityPosts.likes} + 1` })\n      .where(eq(communityPosts.id, postId));\n  }\n\n  async unlikeCommunityPost(userId: string, postId: string): Promise<void> {\n    await db\n      .delete(postLikes)\n      .where(and(eq(postLikes.userId, userId), eq(postLikes.postId, postId)));\n    await db\n      .update(communityPosts)\n      .set({ likes: sql`${communityPosts.likes} - 1` })\n      .where(eq(communityPosts.id, postId));\n  }\n\n  async getPostComments(postId: string): Promise<(PostComment & { user: User })[]> {\n    return await db\n      .select({\n        id: postComments.id,\n        userId: postComments.userId,\n        postId: postComments.postId,\n        content: postComments.content,\n        createdAt: postComments.createdAt,\n        user: users,\n      })\n      .from(postComments)\n      .innerJoin(users, eq(postComments.userId, users.id))\n      .where(eq(postComments.postId, postId))\n      .orderBy(postComments.createdAt);\n  }\n\n  async createPostComment(commentData: InsertPostComment): Promise<PostComment> {\n    const [comment] = await db.insert(postComments).values(commentData).returning();\n    await db\n      .update(communityPosts)\n      .set({ comments: sql`${communityPosts.comments} + 1` })\n      .where(eq(communityPosts.id, commentData.postId));\n    return comment;\n  }\n\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11877},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  // Environment detection for Vite configuration\n  const isReplit = !!(process.env.REPL_ID || process.env.REPLIT_DEV_DOMAIN);\n  \n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    // allowedHosts: true is crucial for Replit but also safe for local\n    allowedHosts: true as const,\n    // For local development, you might want to enable these for better debugging\n    ...(isReplit ? {} : {\n      cors: true,\n      strictPort: false,\n    }),\n  };\n\n  log(`🔧 Setting up Vite for ${isReplit ? 'Replit' : 'Local'} environment`);\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        if (isReplit) {\n          // In Replit, exit on error to trigger restart\n          process.exit(1);\n        } else {\n          // In local development, just log the error but don't exit\n          console.error('Vite error:', msg);\n        }\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2929},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\", { length: 50 }).notNull().unique(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  passwordHash: text(\"password_hash\"),\n  firstName: varchar(\"first_name\", { length: 50 }),\n  lastName: varchar(\"last_name\", { length: 50 }),\n  profileImageUrl: text(\"profile_image_url\"),\n  googleId: varchar(\"google_id\", { length: 255 }),\n  githubId: varchar(\"github_id\", { length: 255 }),\n  authProvider: varchar(\"auth_provider\", { length: 20 }).default(\"email\").notNull(),\n  problemsSolved: integer(\"problems_solved\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// SQL Problems table\nexport const problems = pgTable(\"problems\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  description: text(\"description\").notNull(),\n  difficulty: varchar(\"difficulty\", { length: 20 }).notNull(), // Easy, Medium, Hard\n  tags: jsonb(\"tags\").$type<string[]>().default([]).notNull(),\n  companies: jsonb(\"companies\").$type<string[]>().default([]).notNull(),\n  schema: text(\"schema\").notNull(), // SQL schema definition\n  expectedOutput: text(\"expected_output\").notNull(),\n  hints: jsonb(\"hints\").$type<string[]>().default([]).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// User submissions table\nexport const submissions = pgTable(\"submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  problemId: varchar(\"problem_id\").notNull().references(() => problems.id),\n  query: text(\"query\").notNull(),\n  isCorrect: boolean(\"is_correct\").notNull(),\n  executionTime: integer(\"execution_time\"), // in milliseconds\n  submittedAt: timestamp(\"submitted_at\").defaultNow().notNull(),\n});\n\n// Community posts table\nexport const communityPosts = pgTable(\"community_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  codeSnippet: text(\"code_snippet\"),\n  likes: integer(\"likes\").default(0).notNull(),\n  comments: integer(\"comments\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Post likes table\nexport const postLikes = pgTable(\"post_likes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  postId: varchar(\"post_id\").notNull().references(() => communityPosts.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Post comments table\nexport const postComments = pgTable(\"post_comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  postId: varchar(\"post_id\").notNull().references(() => communityPosts.id),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  submissions: many(submissions),\n  communityPosts: many(communityPosts),\n  postLikes: many(postLikes),\n  postComments: many(postComments),\n}));\n\nexport const problemsRelations = relations(problems, ({ many }) => ({\n  submissions: many(submissions),\n}));\n\nexport const submissionsRelations = relations(submissions, ({ one }) => ({\n  user: one(users, {\n    fields: [submissions.userId],\n    references: [users.id],\n  }),\n  problem: one(problems, {\n    fields: [submissions.problemId],\n    references: [problems.id],\n  }),\n}));\n\nexport const communityPostsRelations = relations(communityPosts, ({ one, many }) => ({\n  user: one(users, {\n    fields: [communityPosts.userId],\n    references: [users.id],\n  }),\n  likes: many(postLikes),\n  comments: many(postComments),\n}));\n\nexport const postLikesRelations = relations(postLikes, ({ one }) => ({\n  user: one(users, {\n    fields: [postLikes.userId],\n    references: [users.id],\n  }),\n  post: one(communityPosts, {\n    fields: [postLikes.postId],\n    references: [communityPosts.id],\n  }),\n}));\n\nexport const postCommentsRelations = relations(postComments, ({ one }) => ({\n  user: one(users, {\n    fields: [postComments.userId],\n    references: [users.id],\n  }),\n  post: one(communityPosts, {\n    fields: [postComments.postId],\n    references: [communityPosts.id],\n  }),\n}));\n\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  passwordHash: z.string().optional(),\n});\n\nexport const insertProblemSchema = createInsertSchema(problems).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSubmissionSchema = createInsertSchema(submissions).omit({\n  id: true,\n  submittedAt: true,\n});\n\nexport const insertCommunityPostSchema = createInsertSchema(communityPosts).omit({\n  id: true,\n  likes: true,\n  comments: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPostCommentSchema = createInsertSchema(postComments).omit({\n  id: true,\n  createdAt: true,\n});\n\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Problem = typeof problems.$inferSelect;\nexport type InsertProblem = z.infer<typeof insertProblemSchema>;\n\nexport type Submission = typeof submissions.$inferSelect;\nexport type InsertSubmission = z.infer<typeof insertSubmissionSchema>;\n\nexport type CommunityPost = typeof communityPosts.$inferSelect;\nexport type InsertCommunityPost = z.infer<typeof insertCommunityPostSchema>;\n\nexport type PostComment = typeof postComments.$inferSelect;\nexport type InsertPostComment = z.infer<typeof insertPostCommentSchema>;\n\n","size_bytes":6349},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Problems from \"@/pages/problems\";\nimport ProblemDetail from \"@/pages/problem-detail\";\nimport Leaderboard from \"@/pages/leaderboard\";\nimport Community from \"@/pages/community\";\nimport Submissions from \"@/pages/submissions\";\nimport NotFound from \"@/pages/not-found\";\nimport Navbar from \"@/components/navbar\";\n\nfunction AppRouter() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [location] = useLocation();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading SQLGym...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Hide navbar on problem detail pages (routes like /problems/:id)\n  const isOnProblemDetailPage = location.startsWith('/problems/');\n\n  return (\n    <>\n      {isAuthenticated && !isOnProblemDetailPage && <Navbar />}\n      <Switch>\n        {!isAuthenticated ? (\n          <Route path=\"/\" component={Landing} />\n        ) : (\n          <>\n            <Route path=\"/\" component={Home} />\n            <Route path=\"/problems\" component={Problems} />\n            <Route path=\"/problems/:id\" component={ProblemDetail} />\n            <Route path=\"/leaderboard\" component={Leaderboard} />\n            <Route path=\"/community\" component={Community} />\n            <Route path=\"/submissions\" component={Submissions} />\n          </>\n        )}\n        <Route component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <AppRouter />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2284},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 84% 4.9%);\n  --primary: hsl(24 95% 53%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222 47% 11%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222 47% 11%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(24 95% 53%);\n  --chart-1: hsl(24 95% 53%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(210 40% 96%);\n  --sidebar-foreground: hsl(222 84% 4.9%);\n  --sidebar-primary: hsl(24 95% 53%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222 47% 11%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(24 95% 53%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Courier New', monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(24 95% 53% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(24 95% 53% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(24 95% 53% / 0.00), 0px 1px 2px -1px hsl(24 95% 53% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(24 95% 53% / 0.00), 0px 1px 2px -1px hsl(24 95% 53% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(24 95% 53% / 0.00), 0px 2px 4px -1px hsl(24 95% 53% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(24 95% 53% / 0.00), 0px 4px 6px -1px hsl(24 95% 53% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(24 95% 53% / 0.00), 0px 8px 10px -1px hsl(24 95% 53% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(24 95% 53% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(24 95% 53%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(24 95% 53%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(24 95% 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Gym-inspired custom styles */\n.dumbbell-btn {\n  position: relative;\n  transition: all 0.3s ease;\n}\n\n.dumbbell-btn:hover {\n  transform: translateY(-2px);\n}\n\n.progress-weight {\n  background: linear-gradient(90deg, var(--primary) 0%, #f59e0b 100%);\n  animation: fillProgress 2s ease-in-out;\n  transition: width 0.3s ease;\n}\n\n@keyframes fillProgress {\n  from {\n    width: 0%;\n  }\n\n  to {\n    width: var(--progress-width);\n  }\n}\n\n.weight-plate {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: var(--primary);\n  position: relative;\n}\n\n.weight-plate::before {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 6px;\n  height: 6px;\n  border-radius: 50%;\n  background: white;\n}\n\n.syntax-highlight {\n  font-family: var(--font-mono);\n  background: var(--muted);\n  padding: 1rem;\n  border-radius: 6px;\n  border-left: 4px solid var(--primary);\n  overflow-x: auto;\n  /* Adds horizontal scroll for very long content */\n  max-width: 100%;\n  /* Ensures it doesn't break container */\n}\n\n.syntax-highlight pre {\n  white-space: pre-wrap;\n  /* Allows wrapping while preserving formatting */\n  overflow-wrap: break-word;\n  /* Breaks long words if needed */\n  word-break: break-all;\n  /* Breaks long SQL statements at any character */\n  margin: 0;\n  /* Remove default pre margin */\n}\n\n.code-editor {\n  font-family: var(--font-mono);\n  background: hsl(222 47% 11%);\n  color: hsl(210 40% 98%);\n}\n\n/* Smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--muted);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--border);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: var(--muted-foreground);\n}\n\n/* Console output styling */\n.console-output {\n  background: #1a1a1a;\n  color: #e0e0e0;\n  font-family: 'JetBrains Mono', 'Fira Code', 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n  font-size: 13px;\n  line-height: 1.4;\n  padding: 16px;\n  border-radius: 6px;\n  white-space: pre-wrap;\n  overflow-x: auto;\n  border: 1px solid #333;\n}\n\n.console-output.error {\n  color: #ff6b6b;\n  background: #2d1b1b;\n  border-color: #8b0000;\n}\n\n.console-output.success {\n  border-left: 4px solid #28ca42;\n}\n\n/* Make sure pre elements don't have conflicting styles */\npre.console-output {\n  margin: 0;\n  font-family: inherit;\n}","size_bytes":5468},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/navbar.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { Dumbbell, User, LogOut } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n\nexport default function Navbar() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  const navItems = [\n    { href: '/', label: 'Home' },\n    { href: '/problems', label: 'Problems' },\n    { href: '/leaderboard', label: 'Leaderboard' },\n    { href: '/community', label: 'Community' },\n    { href: '/submissions', label: 'Submissions' },\n  ];\n\n  return (\n    <nav className=\"bg-white border-b border-border shadow-sm sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-12\">\n          <div className=\"flex items-center space-x-8\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n              <Dumbbell className=\"text-primary text-xl\" />\n              <span className=\"text-xl font-bold text-foreground\">SQLGym</span>\n            </Link>\n            \n            <div className=\"hidden md:flex items-center space-x-6\">\n              {navItems.map((item) => (\n                <Link\n                  key={item.href}\n                  href={item.href}\n                  className={`font-medium transition-colors text-sm ${\n                    location === item.href\n                      ? 'text-primary'\n                      : 'text-foreground hover:text-primary'\n                  }`}\n                  data-testid={`link-${item.label.toLowerCase()}`}\n                >\n                  {item.label}\n                </Link>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"button-profile\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={user?.profileImageUrl} alt={user?.username} />\n                    <AvatarFallback>\n                      {user?.username?.charAt(0).toUpperCase() || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                <div className=\"flex items-center space-x-2 p-2\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={user?.profileImageUrl} alt={user?.username} />\n                    <AvatarFallback>\n                      {user?.username?.charAt(0).toUpperCase() || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex flex-col space-y-1\">\n                    <p className=\"text-sm font-medium\">{user?.username}</p>\n                    <p className=\"text-xs text-muted-foreground\">{user?.problemsSolved || 0} problems solved</p>\n                  </div>\n                </div>\n                <DropdownMenuItem onClick={handleLogout} data-testid=\"button-logout\">\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Log out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3700},"client/src/components/progress-bar.tsx":{"content":"import { useEffect, useRef } from 'react';\n\ninterface ProgressBarProps {\n  value: number;\n  max: number;\n  className?: string;\n  showText?: boolean;\n}\n\nexport default function ProgressBar({ value, max, className = '', showText = true }: ProgressBarProps) {\n  const progressRef = useRef<HTMLDivElement>(null);\n  const percentage = Math.min((value / max) * 100, 100);\n\n  useEffect(() => {\n    if (progressRef.current) {\n      progressRef.current.style.setProperty('--progress-width', `${percentage}%`);\n      // Trigger animation\n      progressRef.current.classList.add('progress-weight');\n    }\n  }, [percentage]);\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      {showText && (\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-muted-foreground\">Progress</span>\n          <span className=\"font-medium text-foreground\">{Math.round(percentage)}%</span>\n        </div>\n      )}\n      <div className=\"w-full bg-muted rounded-full h-3\">\n        <div \n          ref={progressRef}\n          className=\"h-3 rounded-full transition-all duration-300\"\n          style={{ \n            background: 'linear-gradient(90deg, var(--primary) 0%, #f59e0b 100%)',\n            width: `${percentage}%`\n          }}\n        />\n      </div>\n      {showText && (\n        <div className=\"flex items-center space-x-2 mt-2\">\n          <div className=\"weight-plate\" />\n          <span className=\"text-xs text-muted-foreground\">{value}/{max} completed</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":1524},"client/src/components/sql-editor.tsx":{"content":"import { useState, useMemo, useCallback, useEffect } from 'react';\nimport { Play, Save, Lightbulb, Dumbbell, TrendingUp, ChevronDown } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { sql, PostgreSQL } from '@codemirror/lang-sql';\nimport { autocompletion } from '@codemirror/autocomplete';\nimport { EditorView, keymap, placeholder } from '@codemirror/view';\nimport { defaultKeymap, indentWithTab } from '@codemirror/commands';\nimport { oneDark } from '@codemirror/theme-one-dark';\n\ninterface SQLEditorProps {\n  initialQuery?: string;\n  onRunQuery: (query: string) => Promise<any>;\n  onSubmitSolution: (query: string) => Promise<any>;\n  hints?: string[];\n  className?: string;\n}\n\nexport default function SQLEditor({ \n  initialQuery = '', \n  onRunQuery,\n  onSubmitSolution,\n  hints = [],\n  className = '' \n}: SQLEditorProps) {\n  const [query, setQuery] = useState(initialQuery);\n  const [result, setResult] = useState<any>(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showHint, setShowHint] = useState(false);\n  const [hintIndex, setHintIndex] = useState(0);\n\n  // Detect dark mode with reactivity\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    if (typeof window !== 'undefined') {\n      return document.documentElement.classList.contains('dark');\n    }\n    return false;\n  });\n\n  useEffect(() => {\n    const observer = new MutationObserver(() => {\n      setIsDarkMode(document.documentElement.classList.contains('dark'));\n    });\n    \n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['class']\n    });\n    \n    return () => observer.disconnect();\n  }, []);\n\n  const handleRunQuery = useCallback(async () => {\n    if (!query.trim()) return;\n    \n    setIsRunning(true);\n    try {\n      const result = await onRunQuery(query);\n      setResult(result);\n    } catch (error) {\n      setResult({\n        error: true,\n        message: error instanceof Error ? error.message : 'Query execution failed',\n      });\n    } finally {\n      setIsRunning(false);\n    }\n  }, [query, onRunQuery]);\n\n  const handleSubmitSolution = useCallback(async () => {\n    if (!query.trim()) return;\n    \n    setIsSubmitting(true);\n    try {\n      const result = await onSubmitSolution(query);\n      setResult(result);\n      // Also save to localStorage as backup\n      localStorage.setItem('sqlgym_last_query', query);\n    } catch (error) {\n      setResult({\n        error: true,\n        message: error instanceof Error ? error.message : 'Submission failed',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [query, onSubmitSolution]);\n\n  const handleSave = () => {\n    localStorage.setItem('sqlgym_last_query', query);\n    console.log('Saving query:', query);\n  };\n\n\n  const handleShowHint = () => {\n    setShowHint(true);\n  };\n\n  const handleNextHint = () => {\n    if (hintIndex < hints.length - 1) {\n      setHintIndex(hintIndex + 1);\n    }\n  };\n\n  // Configure CodeMirror extensions and theme\n  const extensions = useMemo(() => [\n    sql({\n      dialect: PostgreSQL,\n      upperCaseKeywords: true,\n      schema: {\n        customers: ['id', 'name', 'email'],\n        employees: ['id', 'name', 'department'],\n        orders: ['id', 'customer_id', 'total'],\n        order_items: ['id', 'order_id', 'price', 'quantity'],\n      }\n    }),\n    autocompletion(),\n    EditorView.lineWrapping,\n    placeholder('-- Write your SQL query here\\nSELECT \\n    column1,\\n    column2\\nFROM table_name\\nWHERE condition;'),\n    keymap.of([\n      ...defaultKeymap,\n      indentWithTab,\n      {\n        key: 'Mod-Enter',\n        run: () => {\n          handleRunQuery();\n          return true;\n        }\n      }\n    ])\n  ], [handleRunQuery]);\n\n  const theme = useMemo(() => {\n    if (isDarkMode) {\n      return [oneDark];\n    }\n    return [\n      EditorView.theme({\n        '&': {\n          color: 'hsl(var(--foreground))',\n          backgroundColor: 'hsl(var(--background))',\n        },\n        '.cm-content': {\n          padding: '16px',\n          fontSize: '14px',\n          fontFamily: 'var(--font-mono)',\n          minHeight: '200px', // Reduced height\n        },\n        '.cm-focused': {\n          outline: 'none',\n        },\n        '.cm-editor': {\n          borderRadius: '0',\n        },\n        '.cm-scroller': {\n          fontFamily: 'var(--font-mono)',\n        },\n        '.cm-line': {\n          lineHeight: '1.5',\n        },\n        '&.cm-focused .cm-cursor': {\n          borderLeftColor: 'hsl(var(--primary))',\n        },\n        '&.cm-focused .cm-selectionBackground, .cm-selectionBackground': {\n          backgroundColor: 'hsl(var(--primary) / 0.2)',\n        }\n      })\n    ];\n  }, [isDarkMode]);\n\n  return (\n    <div className={`w-full max-w-6xl mx-auto ${className}`}>\n      {/* Training Zone (Input Section) - Reduced spacing */}\n      <div className=\"mb-3\">\n        <Card className=\"overflow-hidden\">\n          {/* Input Header - Reduced padding */}\n          <CardHeader className=\"bg-muted/50 px-4 py-2 border-b border-border\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Dumbbell className=\"h-4 w-4 text-primary\" />\n                <h3 className=\"text-base font-semibold text-foreground\">Training Zone</h3>\n              </div>\n              <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                <span>PostgreSQL 14</span>\n                <ChevronDown className=\"h-4 w-4\" />\n              </div>\n            </div>\n          </CardHeader>\n          \n          {/* Code Editor - Reduced height */}\n          <CardContent className=\"p-0\">\n            <div className=\"relative\">\n              <CodeMirror\n                value={query}\n                onChange={(value) => setQuery(value)}\n                height=\"200px\" // Fixed compact height\n                theme={theme}\n                extensions={extensions}\n                basicSetup={{\n                  lineNumbers: true,\n                  foldGutter: true,\n                  dropCursor: false,\n                  allowMultipleSelections: false,\n                  indentOnInput: true,\n                  bracketMatching: true,\n                  closeBrackets: true,\n                  autocompletion: false,\n                  highlightSelectionMatches: false,\n                  searchKeymap: true,\n                  tabSize: 2,\n                }}\n                data-testid=\"editor-sql\"\n                className=\"sqlgym-editor\"\n              />\n              <div className=\"absolute top-2 right-2 text-xs text-muted-foreground\">\n                Ctrl/Cmd + Enter to run\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Gym Controls - Moved up and made more compact */}\n      <div className=\"flex flex-wrap gap-2 mb-3\">\n        <Button\n          onClick={handleRunQuery}\n          disabled={isRunning || !query.trim()}\n          className=\"bg-primary text-primary-foreground hover:bg-primary/90 font-semibold flex items-center\"\n          data-testid=\"button-run-query\"\n        >\n          <Dumbbell className=\"mr-2 h-4 w-4\" />\n          {isRunning ? 'Running...' : 'Run Code'}\n        </Button>\n        \n        <Button \n          onClick={handleSave} \n          variant=\"outline\"\n          className=\"flex items-center\"\n        >\n          <Save className=\"mr-2 h-4 w-4\" />\n          Save Query\n        </Button>\n        \n\n        {hints.length > 0 && (\n          <Button \n            onClick={handleShowHint} \n            variant=\"outline\"\n            className=\"text-primary hover:bg-primary/10 flex items-center\"\n          >\n            <Lightbulb className=\"mr-2 h-4 w-4\" />\n            Get Hint\n          </Button>\n        )}\n\n        {/* Check Solution button like in your screenshot */}\n        <Button\n          onClick={handleSubmitSolution}\n          disabled={isSubmitting || !query.trim()}\n          className=\"bg-green-600 text-white hover:bg-green-700 font-semibold flex items-center ml-auto\"\n          data-testid=\"button-submit\"\n        >\n          ✓ {isSubmitting ? 'Submitting...' : 'Check Solution'}\n        </Button>\n      </div>\n\n      {/* Trainer Tips - More compact */}\n      {showHint && hints.length > 0 && (\n        <Alert className=\"border-primary/20 bg-primary/5 mb-3 py-3\">\n          <div className=\"flex\">\n            <Lightbulb className=\"h-4 w-4 text-primary mt-0.5 mr-2 flex-shrink-0\" />\n            <AlertDescription className=\"text-foreground\">\n              <strong>💡 Hint {hintIndex + 1}:</strong> {hints[hintIndex]}\n              {hintIndex < hints.length - 1 && (\n                <Button \n                  onClick={handleNextHint}\n                  variant=\"link\" \n                  className=\"p-0 ml-2 text-primary underline text-sm\"\n                >\n                  Next hint →\n                </Button>\n              )}\n            </AlertDescription>\n          </div>\n        </Alert>\n      )}\n\n      {/* Performance Report (Output Section) - Only appears when there are results */}\n      {result && (\n        <div className=\"mb-4\">\n          <Card className=\"overflow-hidden\">\n            <CardHeader className=\"bg-muted/50 px-4 py-2 border-b border-border\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <TrendingUp className=\"h-4 w-4 text-primary\" />\n                  <h3 className=\"text-base font-semibold text-foreground\">Query Results</h3>\n                </div>\n                {result && !result.error && (\n                  <div className=\"text-sm text-muted-foreground\">\n                    Execution: {result.executionTime || 0}ms\n                  </div>\n                )}\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"p-4\">\n              {result.error ? (\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-2 text-red-600 dark:text-red-400\">\n                    <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                    <span className=\"font-medium text-sm\">Query Failed</span>\n                  </div>\n                  <div className=\"bg-red-50 dark:bg-red-950/30 border border-red-200 dark:border-red-800 rounded p-3\">\n                    <p className=\"text-red-800 dark:text-red-200 text-sm font-mono\">{result.message}</p>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-2 text-green-600 dark:text-green-400\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <span className=\"font-medium text-sm\">\n                      {result.isCorrect ? 'Perfect! 🏆' : 'Query Executed'}\n                    </span>\n                  </div>\n                  \n                  {result.isCorrect && (\n                    <div className=\"bg-green-50 dark:bg-green-950/30 border border-green-200 dark:border-green-800 rounded p-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-lg\">🎉</span>\n                        <div>\n                          <p className=\"text-green-800 dark:text-green-200 font-medium text-sm\">Excellent work!</p>\n                          <p className=\"text-green-700 dark:text-green-300 text-sm\">Solution is correct!</p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div className=\"bg-muted/50 rounded p-3\">\n                    <p className=\"text-sm text-muted-foreground mb-2\">📊 Results:</p>\n                    <div className=\"font-mono text-sm bg-background rounded border p-2\">\n                      <p className=\"mb-2\">Status: {result.isCorrect ? '✅ Correct' : '⚠️ Check again'}</p>\n                      <p className=\"mb-2\">Performance: {result.query_result?.execution_time_ms || result.executionTime || 0}ms</p>\n                      {result.query_result?.result && result.query_result.result.length > 0 ? (\n                        <div className=\"overflow-x-auto mt-2\">\n                          <table className=\"w-full text-xs border-collapse\">\n                            <thead>\n                              <tr>\n                                {Object.keys(result.query_result.result[0]).map((column) => (\n                                  <th key={column} className=\"border border-border px-2 py-1 bg-muted font-semibold text-left\">\n                                    {column}\n                                  </th>\n                                ))}\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {result.query_result.result.slice(0, 10).map((row, index) => (\n                                <tr key={index}>\n                                  {Object.values(row).map((value, colIndex) => (\n                                    <td key={colIndex} className=\"border border-border px-2 py-1\">\n                                      {String(value)}\n                                    </td>\n                                  ))}\n                                </tr>\n                              ))}\n                            </tbody>\n                          </table>\n                          {result.query_result.result.length > 10 && (\n                            <p className=\"text-muted-foreground mt-2 text-xs\">\n                              Showing first 10 of {result.query_result.rows_affected} rows\n                            </p>\n                          )}\n                          <p className=\"text-muted-foreground mt-1 text-xs\">\n                            {result.query_result.rows_affected} rows returned\n                          </p>\n                        </div>\n                      ) : (\n                        <p className=\"text-muted-foreground mt-1 text-xs\">\n                          No data returned\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Empty state hint when no result - Only shows when no results */}\n      {!result && (\n        <div className=\"text-center py-4 text-muted-foreground text-sm\">\n          💡 Write your SQL query above and click \"Run Code\" to see results\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":14897},"client/src/hooks/use-auth.tsx":{"content":"import { useState, useEffect, createContext, useContext } from 'react';\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  xp: number;\n  level: string;\n  problemsSolved: number;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  login: (token: string, user: User) => void;\n  logout: () => void;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  // TEMPORARY: Mock user for development purposes (using real user from database)\n  const mockUser: User = {\n    id: '880be3c3-e093-4274-9294-d20c5f08c583',\n    username: 'demo12s',\n    email: 'demo@demo.com',\n    firstName: 'demo',\n    lastName: 'deom',\n    profileImageUrl: undefined,\n    xp: 500,\n    level: 'SQL Trainee',\n    problemsSolved: 5,\n  };\n\n  const [user, setUser] = useState<User | null>(mockUser);\n  const [token, setToken] = useState<string | null>('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI4ODBiZTNjMy1lMDkzLTQyNzQtOTI5NC1kMjBjNWYwOGM1ODMiLCJ1c2VybmFtZSI6ImRlbW8xMnMiLCJleHAiOjE3NTgwMzgzNDV9.xFadvOmd5EoIF40JSWTG87pJVv3XwRPYamXf69iL_DM');\n  const [isLoading, setIsLoading] = useState(false); // Set to false to skip loading\n\n  useEffect(() => {\n    // TEMPORARY: Set up mock authentication for development\n    const validToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI4ODBiZTNjMy1lMDkzLTQyNzQtOTI5NC1kMjBjNWYwOGM1ODMiLCJ1c2VybmFtZSI6ImRlbW8xMnMiLCJleHAiOjE3NTgwMzgzNDV9.xFadvOmd5EoIF40JSWTG87pJVv3XwRPYamXf69iL_DM';\n    const mockUserData = JSON.stringify(mockUser);\n    \n    // Set the valid token and user in localStorage for API requests\n    localStorage.setItem('auth_token', validToken);\n    localStorage.setItem('auth_user', mockUserData);\n    \n    setIsLoading(false);\n  }, [mockUser]);\n\n  const login = (newToken: string, newUser: User) => {\n    setToken(newToken);\n    setUser(newUser);\n    localStorage.setItem('auth_token', newToken);\n    localStorage.setItem('auth_user', JSON.stringify(newUser));\n  };\n\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('auth_user');\n  };\n\n  const value = {\n    user,\n    token,\n    login,\n    logout,\n    isAuthenticated: !!user && !!token,\n    isLoading,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2755},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"// Use proxy for API calls - Vite will proxy /api to the backend\nexport const API_BASE_URL = \"/api\";\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  username: string;\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n}\n\nexport interface ApiResponse<T = any> {\n  message?: string;\n  token?: string;\n  user?: T;\n  [key: string]: any;\n}\n\nclass ApiError extends Error {\n  constructor(public status: number, message: string) {\n    super(message);\n    this.name = \"ApiError\";\n  }\n}\n\nasync function apiRequest<T = any>(\n  endpoint: string,\n  options: RequestInit = {}\n): Promise<T> {\n  const url = `${API_BASE_URL}${endpoint}`;\n\n  const token = localStorage.getItem(\"auth_token\");\n  const headers: Record<string, string> = {\n    \"Content-Type\": \"application/json\",\n    ...(options.headers as Record<string, string>),\n  };\n\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  const response = await fetch(url, {\n    ...options,\n    headers,\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new ApiError(response.status, data.message || \"An error occurred\");\n  }\n\n  return data;\n}\n\nexport const authApi = {\n  async login(credentials: LoginCredentials): Promise<ApiResponse> {\n    return apiRequest(\"/auth/login\", {\n      method: \"POST\",\n      body: JSON.stringify(credentials),\n    });\n  },\n\n  async register(credentials: RegisterCredentials): Promise<ApiResponse> {\n    return apiRequest(\"/auth/register\", {\n      method: \"POST\",\n      body: JSON.stringify(credentials),\n    });\n  },\n\n  async getCurrentUser(): Promise<any> {\n    return apiRequest(\"/auth/user\");\n  },\n};\n\nexport const problemsApi = {\n  async getAll(difficulty?: string): Promise<any[]> {\n    const query = difficulty ? `?difficulty=${difficulty}` : \"\";\n    return apiRequest(`/problems${query}`);\n  },\n\n  async getFiltered(filters?: { difficulty?: string; company?: string }): Promise<any[]> {\n    const queryParams = new URLSearchParams();\n    if (filters?.difficulty) {\n      queryParams.append('difficulty', filters.difficulty);\n    }\n    if (filters?.company) {\n      queryParams.append('company', filters.company);\n    }\n    const query = queryParams.toString() ? `?${queryParams.toString()}` : \"\";\n    return apiRequest(`/problems${query}`);\n  },\n\n  async getById(id: string): Promise<any> {\n    return apiRequest(`/problems/${id}`);\n  },\n};\n\nexport const submissionsApi = {\n  async create(submission: { problemId: string; query: string }): Promise<any> {\n    return apiRequest(\"/submissions\", {\n      method: \"POST\",\n      body: JSON.stringify(submission),\n    });\n  },\n\n  async getUserSubmissions(userId: string): Promise<any[]> {\n    return apiRequest(`/submissions/user/${userId}`);\n  },\n\n  async testQuery(problemId: string, query: string, includeHidden: boolean = false): Promise<any> {\n    return apiRequest(`/problems/${problemId}/test`, {\n      method: \"POST\",\n      body: JSON.stringify({ \n        query: query.trim(),\n        include_hidden: includeHidden \n      }),\n    });\n  },\n};\n\nexport const leaderboardApi = {\n  async get(limit?: number): Promise<any[]> {\n    const query = limit ? `?limit=${limit}` : \"\";\n    return apiRequest(`/leaderboard${query}`);\n  },\n};\n\nexport const communityApi = {\n  async getPosts(): Promise<any[]> {\n    return apiRequest(\"/community/posts\");\n  },\n\n  async createPost(post: {\n    content: string;\n    codeSnippet?: string;\n  }): Promise<any> {\n    return apiRequest(\"/community/posts\", {\n      method: \"POST\",\n      body: JSON.stringify(post),\n    });\n  },\n\n  async likePost(postId: string): Promise<void> {\n    return apiRequest(`/community/posts/${postId}/like`, {\n      method: \"POST\",\n    });\n  },\n\n  async unlikePost(postId: string): Promise<void> {\n    return apiRequest(`/community/posts/${postId}/like`, {\n      method: \"DELETE\",\n    });\n  },\n\n  async getComments(postId: string): Promise<any[]> {\n    return apiRequest(`/community/posts/${postId}/comments`);\n  },\n\n  async createComment(postId: string, content: string): Promise<any> {\n    return apiRequest(`/community/posts/${postId}/comments`, {\n      method: \"POST\",\n      body: JSON.stringify({ content }),\n    });\n  },\n};\n\nexport const badgesApi = {\n  async getUserBadges(userId: string): Promise<any[]> {\n    return apiRequest(`/badges/user/${userId}`);\n  },\n};\n\nexport { ApiError };\n","size_bytes":4407},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/community.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Heart, MessageCircle, Share, Code, Trophy, Image, Users, Activity } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/hooks/use-auth';\nimport { communityApi } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Community() {\n  const [newPostContent, setNewPostContent] = useState('');\n  const [newPostCodeSnippet, setNewPostCodeSnippet] = useState('');\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: posts, isLoading: postsLoading } = useQuery({\n    queryKey: ['/api/community/posts'],\n    queryFn: () => communityApi.getPosts(),\n  });\n\n  const createPostMutation = useMutation({\n    mutationFn: (postData: { content: string; codeSnippet?: string }) => \n      communityApi.createPost(postData),\n    onSuccess: () => {\n      setNewPostContent('');\n      setNewPostCodeSnippet('');\n      queryClient.invalidateQueries({ queryKey: ['/api/community/posts'] });\n      toast({\n        title: 'Success!',\n        description: 'Your post has been shared with the community.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Failed to create post',\n        description: error instanceof Error ? error.message : 'Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const likePostMutation = useMutation({\n    mutationFn: ({ postId, isLiked }: { postId: string; isLiked: boolean }) =>\n      isLiked ? communityApi.unlikePost(postId) : communityApi.likePost(postId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/community/posts'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Action failed',\n        description: error instanceof Error ? error.message : 'Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleCreatePost = () => {\n    if (!newPostContent.trim()) return;\n    \n    createPostMutation.mutate({\n      content: newPostContent,\n      codeSnippet: newPostCodeSnippet || undefined,\n    });\n  };\n\n  const handleLikePost = (postId: string, isLiked: boolean) => {\n    likePostMutation.mutate({ postId, isLiked });\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    if (diffInHours < 168) return `${Math.floor(diffInHours / 24)}d ago`;\n    return date.toLocaleDateString();\n  };\n\n  const getLevelBadgeColor = (level: string) => {\n    switch (level) {\n      case 'SQL Powerlifter': return 'bg-purple-100 text-purple-800';\n      case 'SQL Athlete': return 'bg-blue-100 text-blue-800';\n      case 'SQL Trainee': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  // Mock data for active members and study groups\n  const activeMembers = [\n    { id: '1', username: 'alex_chen', status: 'online', lastActive: 'Online now' },\n    { id: '2', username: 'sarah_j', status: 'away', lastActive: '5 min ago' },\n    { id: '3', username: 'mike_db', status: 'online', lastActive: 'Online now' },\n  ];\n\n  const studyGroups = [\n    { name: 'Advanced Window Functions', members: 12 },\n    { name: 'SQL Performance Tuning', members: 8 },\n    { name: 'Database Design Patterns', members: 15 },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">SQL Gym Community</h1>\n          <p className=\"text-xl text-muted-foreground\">Connect, share, and motivate each other</p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Feed */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Create Post */}\n            {user && (\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <Avatar className=\"w-12 h-12\">\n                      <AvatarImage src={user.profileImageUrl} alt={user.username} />\n                      <AvatarFallback>\n                        {user.username?.charAt(0).toUpperCase() || 'U'}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <Textarea\n                        placeholder=\"Share your SQL journey, tips, or celebrate your achievements...\"\n                        value={newPostContent}\n                        onChange={(e) => setNewPostContent(e.target.value)}\n                        rows={3}\n                        className=\"resize-none mb-3\"\n                        data-testid=\"textarea-new-post\"\n                      />\n                      \n                      {/* Code Snippet Input */}\n                      <details className=\"mb-3\">\n                        <summary className=\"cursor-pointer text-sm text-muted-foreground hover:text-foreground\">\n                          Add code snippet (optional)\n                        </summary>\n                        <Textarea\n                          placeholder=\"-- Add your SQL code here\nSELECT column1, column2\nFROM table_name\nWHERE condition;\"\n                          value={newPostCodeSnippet}\n                          onChange={(e) => setNewPostCodeSnippet(e.target.value)}\n                          rows={4}\n                          className=\"mt-2 font-mono text-sm resize-none\"\n                          data-testid=\"textarea-code-snippet\"\n                        />\n                      </details>\n                      \n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-primary\">\n                            <Image className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-primary\">\n                            <Code className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-primary\">\n                            <Trophy className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                        <Button\n                          onClick={handleCreatePost}\n                          disabled={!newPostContent.trim() || createPostMutation.isPending}\n                          className=\"dumbbell-btn bg-primary text-primary-foreground hover:bg-primary/90\"\n                          data-testid=\"button-share-post\"\n                        >\n                          {createPostMutation.isPending ? 'Sharing...' : 'Share'}\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Community Posts */}\n            {postsLoading ? (\n              <div className=\"space-y-6\">\n                {[...Array(3)].map((_, i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start space-x-4\">\n                        <div className=\"w-12 h-12 bg-muted rounded-full\" />\n                        <div className=\"flex-1 space-y-3\">\n                          <div className=\"h-4 bg-muted rounded w-1/3\" />\n                          <div className=\"h-4 bg-muted rounded\" />\n                          <div className=\"h-4 bg-muted rounded w-4/5\" />\n                          <div className=\"h-20 bg-muted rounded\" />\n                          <div className=\"flex space-x-4\">\n                            <div className=\"h-8 bg-muted rounded w-16\" />\n                            <div className=\"h-8 bg-muted rounded w-16\" />\n                            <div className=\"h-8 bg-muted rounded w-16\" />\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : posts?.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-12 text-center\">\n                  <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <MessageCircle className=\"w-8 h-8 text-muted-foreground\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No posts yet</h3>\n                  <p className=\"text-muted-foreground\">Be the first to share something with the community!</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-6\">\n                {posts?.map((post) => (\n                  <Card key={post.id} data-testid={`post-${post.id}`}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start space-x-4\">\n                        <Avatar className=\"w-12 h-12\">\n                          <AvatarImage src={post.user.profileImageUrl} alt={post.user.username} />\n                          <AvatarFallback>\n                            {post.user.username?.charAt(0).toUpperCase() || 'U'}\n                          </AvatarFallback>\n                        </Avatar>\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <h4 className=\"font-semibold text-foreground\" data-testid={`text-post-author-${post.id}`}>\n                              {post.user.firstName && post.user.lastName \n                                ? `${post.user.firstName} ${post.user.lastName}`\n                                : post.user.username}\n                            </h4>\n                            <span className=\"text-sm text-muted-foreground\">•</span>\n                            <span className=\"text-sm text-muted-foreground\" data-testid={`text-post-time-${post.id}`}>\n                              {formatTimeAgo(post.createdAt)}\n                            </span>\n                            <Badge className={`text-xs ${getLevelBadgeColor(post.user.level)}`}>\n                              {post.user.level}\n                            </Badge>\n                          </div>\n                          \n                          <p className=\"text-foreground mb-4 leading-relaxed\" data-testid={`text-post-content-${post.id}`}>\n                            {post.content}\n                          </p>\n                          \n                          {/* Code Snippet */}\n                          {post.codeSnippet && (\n                            <div className=\"bg-muted rounded-lg p-3 mb-4 overflow-x-auto\">\n                              <pre className=\"text-sm text-muted-foreground font-mono\">\n                                <code data-testid={`code-snippet-${post.id}`}>{post.codeSnippet}</code>\n                              </pre>\n                            </div>\n                          )}\n                          \n                          {/* Actions */}\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-6\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleLikePost(post.id, false)} // For simplicity, always like\n                                className=\"flex items-center space-x-2 text-muted-foreground hover:text-red-500 transition-colors\"\n                                data-testid={`button-like-${post.id}`}\n                              >\n                                <Heart className=\"w-4 h-4\" />\n                                <span className=\"text-sm\">{post.likes}</span>\n                              </Button>\n                              \n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"flex items-center space-x-2 text-muted-foreground hover:text-blue-500 transition-colors\"\n                                data-testid={`button-comment-${post.id}`}\n                              >\n                                <MessageCircle className=\"w-4 h-4\" />\n                                <span className=\"text-sm\">{post.comments}</span>\n                              </Button>\n                              \n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"flex items-center space-x-2 text-muted-foreground hover:text-green-500 transition-colors\"\n                                data-testid={`button-share-${post.id}`}\n                              >\n                                <Share className=\"w-4 h-4\" />\n                                <span className=\"text-sm\">Share</span>\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Active Members */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Activity className=\"w-5 h-5 text-primary\" />\n                  <span>Active Members</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {activeMembers.map((member) => (\n                  <div key={member.id} className=\"flex items-center space-x-3\" data-testid={`active-member-${member.username}`}>\n                    <Avatar className=\"w-10 h-10\">\n                      <AvatarFallback>\n                        {member.username.charAt(0).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-foreground text-sm\">{member.username}</p>\n                      <p className=\"text-xs text-muted-foreground\">{member.lastActive}</p>\n                    </div>\n                    <div className={`w-3 h-3 rounded-full ${\n                      member.status === 'online' ? 'bg-green-400' : 'bg-yellow-400'\n                    }`} />\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Weekly Challenge */}\n            <Card className=\"bg-gradient-to-br from-primary to-orange-400 text-white\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Weekly Challenge</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm opacity-90 mb-4\">\n                  Share 3 helpful SQL tips this week to earn the \"Community Helper\" badge!\n                </p>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Progress</span>\n                    <span>1/3</span>\n                  </div>\n                  <div className=\"w-full bg-white/20 rounded-full h-2\">\n                    <div className=\"bg-white h-2 rounded-full\" style={{ width: '33%' }} />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Study Groups */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Users className=\"w-5 h-5 text-primary\" />\n                  <span>Study Groups</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {studyGroups.map((group, index) => (\n                  <div key={index} className=\"flex items-center justify-between\" data-testid={`study-group-${index}`}>\n                    <div>\n                      <p className=\"font-medium text-foreground text-sm\">{group.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">{group.members} members</p>\n                    </div>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      className=\"text-primary hover:bg-primary/10\"\n                      data-testid={`button-join-group-${index}`}\n                    >\n                      Join\n                    </Button>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Community Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Community Stats</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Total Posts</span>\n                  <span className=\"font-bold text-foreground\">{posts?.length || 0}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Active Today</span>\n                  <span className=\"font-bold text-foreground\">{activeMembers.length}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Study Groups</span>\n                  <span className=\"font-bold text-foreground\">{studyGroups.length}</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18763},"client/src/pages/home.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Play, TrendingUp, Users, Target } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/hooks/use-auth';\nimport { problemsApi, leaderboardApi } from '@/lib/auth';\nimport { DifficultyBadge } from '@/components/DifficultyBadge';\nimport { CompanyLogo } from '@/components/CompanyLogo';\n\nexport default function Home() {\n  const { user } = useAuth();\n\n  const { data: problems, isLoading: problemsLoading } = useQuery({\n    queryKey: ['/api/problems'],\n    queryFn: () => problemsApi.getAll(),\n  });\n\n  const { data: leaderboard, isLoading: leaderboardLoading } = useQuery({\n    queryKey: ['/api/leaderboard'],\n    queryFn: () => leaderboardApi.get(5),\n  });\n\n\n\n  const recentProblems = problems?.slice(0, 3) || [];\n  const topUsers = leaderboard?.slice(0, 3) || [];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-2\">\n            Welcome back, <span className=\"text-primary\">{user?.username}</span>! 💪\n          </h1>\n          <p className=\"text-xl text-muted-foreground\">\n            Ready to continue your SQL training journey?\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            {/* Progress Overview */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <TrendingUp className=\"w-5 h-5 text-primary\" />\n                  <span>Your Progress</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-green-600\">{user?.problemsSolved || 0}</div>\n                  <div className=\"text-sm text-muted-foreground\">Problems Solved</div>\n                  <p className=\"text-sm text-muted-foreground mt-2\">Keep solving problems to improve your skills!</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Target className=\"w-5 h-5 text-primary\" />\n                  <span>Quick Actions</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <Link href=\"/problems\">\n                    <Button \n                      className=\"w-full dumbbell-btn bg-primary text-primary-foreground hover:bg-primary/90 h-16\"\n                      data-testid=\"button-browse-problems\"\n                    >\n                      <Play className=\"mr-2 h-5 w-5\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-semibold\">Browse Problems</div>\n                        <div className=\"text-sm opacity-90\">Find your next challenge</div>\n                      </div>\n                    </Button>\n                  </Link>\n                  \n                  <Link href=\"/community\">\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full h-16\"\n                      data-testid=\"button-join-community\"\n                    >\n                      <Users className=\"mr-2 h-5 w-5\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-semibold\">Join Community</div>\n                        <div className=\"text-sm opacity-70\">Share and learn together</div>\n                      </div>\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Problems */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <CardTitle>Recommended Problems</CardTitle>\n                  <Link href=\"/problems\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-view-all-problems\">\n                      View All\n                    </Button>\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {problemsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"h-20 bg-muted rounded-lg animate-pulse\" />\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {recentProblems.map((problem) => (\n                      <Link key={problem.id} href={`/problems/${problem.id}`}>\n                        <Card className=\"hover:shadow-md transition-shadow cursor-pointer\" data-testid={`card-problem-${problem.id}`}>\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1\">\n                                <h3 className=\"font-semibold text-foreground mb-2\">{problem.title}</h3>\n                                <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                                  {problem.description}\n                                </p>\n                              </div>\n                              <div className=\"ml-4\">\n                                <DifficultyBadge\n                                  difficulty={problem.difficulty}\n                                  variant=\"badge\"\n                                  size=\"sm\"\n                                  showIcon={true}\n                                  data-testid={`difficulty-badge-home-${problem.id}`}\n                                />\n                              </div>\n                            </div>\n                            <div className=\"flex items-center justify-between mt-3\">\n                              <div className=\"flex items-center space-x-4\">\n                                {problem.company && (\n                                  <CompanyLogo\n                                    companyName={problem.company}\n                                    variant=\"minimal\"\n                                    size=\"sm\"\n                                    data-testid={`company-logo-home-${problem.id}`}\n                                  />\n                                )}\n                                <span className=\"text-xs text-muted-foreground\">\n                                  {problem.solvedCount} solved\n                                </span>\n                              </div>\n                              <Button size=\"sm\" variant=\"ghost\" className=\"text-primary\">\n                                Start Training →\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      </Link>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n\n            {/* Leaderboard Preview */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <CardTitle>Top Athletes</CardTitle>\n                  <Link href=\"/leaderboard\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-view-leaderboard\">\n                      View All\n                    </Button>\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {leaderboardLoading ? (\n                  <div className=\"space-y-3\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-muted rounded-full\" />\n                        <div className=\"flex-1 space-y-1\">\n                          <div className=\"h-4 bg-muted rounded w-3/4\" />\n                          <div className=\"h-3 bg-muted rounded w-1/2\" />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {topUsers.map((topUser, index) => (\n                      <div key={topUser.id} className=\"flex items-center space-x-3\" data-testid={`user-rank-${index + 1}`}>\n                        <div className=\"w-10 h-10 bg-primary text-primary-foreground rounded-full flex items-center justify-center font-bold text-sm\">\n                          {index + 1}\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-foreground\">{topUser.username}</div>\n                          <div className=\"text-sm text-muted-foreground\">{topUser.problemsSolved} problems solved</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9673},"client/src/pages/landing.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Play, Users, Code, CheckCircle } from \"lucide-react\";\nimport { FaGoogle, FaGithub } from \"react-icons/fa\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { authApi } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ProgressBar from \"@/components/progress-bar\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n});\n\nexport default function Landing() {\n  const [isLoginOpen, setIsLoginOpen] = useState(false);\n  const [isRegisterOpen, setIsRegisterOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  // Handle OAuth callback tokens\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const token = urlParams.get(\"token\");\n\n    if (token) {\n      // Store the token and get user info\n      localStorage.setItem(\"auth_token\", token);\n\n      // Clean up URL\n      window.history.replaceState({}, document.title, \"/\");\n\n      // Get user info and complete login\n      authApi\n        .getCurrentUser()\n        .then((user) => {\n          login(token, user);\n          toast({\n            title: \"Welcome!\",\n            description: \"Successfully logged into SQL Practice Hub.\",\n          });\n        })\n        .catch(() => {\n          toast({\n            title: \"Authentication failed\",\n            description: \"Please try logging in again.\",\n            variant: \"destructive\",\n          });\n        });\n    }\n  }, [login, toast]);\n\n  const loginForm = useForm({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  const handleLogin = async (data: z.infer<typeof loginSchema>) => {\n    setIsLoading(true);\n    try {\n      const response = await authApi.login(data);\n      login(response.token!, response.user!);\n      setIsLoginOpen(false);\n      toast({\n        title: \"Welcome back!\",\n        description: \"Successfully logged into SQL Practice Hub.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description:\n          error instanceof Error\n            ? error.message\n            : \"Please check your credentials.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRegister = async (data: z.infer<typeof registerSchema>) => {\n    setIsLoading(true);\n    try {\n      const response = await authApi.register(data);\n      login(response.token!, response.user!);\n      setIsRegisterOpen(false);\n      toast({\n        title: \"Welcome to SQL Practice Hub!\",\n        description: \"Your account has been created successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Registration failed\",\n        description:\n          error instanceof Error ? error.message : \"Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"bg-background\">\n      {/* Navigation */}\n      <nav className=\"bg-white border-b border-border shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <Code className=\"text-primary text-2xl\" />\n              <span className=\"text-2xl font-bold text-foreground\">\n                SQL Practice Hub\n              </span>\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              <Dialog open={isLoginOpen} onOpenChange={setIsLoginOpen}>\n                <DialogTrigger asChild>\n                  <Button variant=\"ghost\" data-testid=\"button-login\">\n                    Login\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Login to SQL Practice Hub</DialogTitle>\n                  </DialogHeader>\n                  <Form {...loginForm}>\n                    <form\n                      onSubmit={loginForm.handleSubmit(handleLogin)}\n                      className=\"space-y-4\"\n                    >\n                      <FormField\n                        control={loginForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input\n                                {...field}\n                                type=\"email\"\n                                data-testid=\"input-email\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={loginForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input\n                                {...field}\n                                type=\"password\"\n                                data-testid=\"input-password\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button\n                        type=\"submit\"\n                        disabled={isLoading}\n                        className=\"w-full\"\n                        data-testid=\"button-submit-login\"\n                      >\n                        {isLoading ? \"Logging in...\" : \"Login\"}\n                      </Button>\n\n                      <div className=\"relative my-4\">\n                        <div className=\"absolute inset-0 flex items-center\">\n                          <div className=\"w-full border-t border-muted\"></div>\n                        </div>\n                        <div className=\"relative flex justify-center text-xs uppercase\">\n                          <span className=\"bg-background px-2 text-muted-foreground\">\n                            Or continue with\n                          </span>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          className=\"w-full\"\n                          onClick={() =>\n                            (window.location.href = \"/api/auth/google\")\n                          }\n                          data-testid=\"button-google-login\"\n                        >\n                          <FaGoogle className=\"mr-2 h-4 w-4 text-red-500\" />\n                          Google\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          className=\"w-full\"\n                          onClick={() =>\n                            (window.location.href = \"/api/auth/github\")\n                          }\n                          data-testid=\"button-github-login\"\n                        >\n                          <FaGithub className=\"mr-2 h-4 w-4\" />\n                          GitHub\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n\n              <Dialog open={isRegisterOpen} onOpenChange={setIsRegisterOpen}>\n                <DialogTrigger asChild>\n                  <Button\n                    className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                    data-testid=\"button-register\"\n                  >\n                    <Code className=\"mr-2 h-4 w-4\" />\n                    Start Practicing\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Join SQL Practice Hub</DialogTitle>\n                  </DialogHeader>\n                  <Form {...registerForm}>\n                    <form\n                      onSubmit={registerForm.handleSubmit(handleRegister)}\n                      className=\"space-y-4\"\n                    >\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={registerForm.control}\n                          name=\"firstName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>First Name</FormLabel>\n                              <FormControl>\n                                <Input\n                                  {...field}\n                                  data-testid=\"input-firstName\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={registerForm.control}\n                          name=\"lastName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Last Name</FormLabel>\n                              <FormControl>\n                                <Input\n                                  {...field}\n                                  data-testid=\"input-lastName\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={registerForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-username\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input\n                                {...field}\n                                type=\"email\"\n                                data-testid=\"input-register-email\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input\n                                {...field}\n                                type=\"password\"\n                                data-testid=\"input-register-password\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button\n                        type=\"submit\"\n                        disabled={isLoading}\n                        className=\"w-full\"\n                        data-testid=\"button-submit-register\"\n                      >\n                        {isLoading ? \"Creating account...\" : \"Create Account\"}\n                      </Button>\n\n                      <div className=\"relative my-4\">\n                        <div className=\"absolute inset-0 flex items-center\">\n                          <div className=\"w-full border-t border-muted\"></div>\n                        </div>\n                        <div className=\"relative flex justify-center text-xs uppercase\">\n                          <span className=\"bg-background px-2 text-muted-foreground\">\n                            Or sign up with\n                          </span>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          className=\"w-full\"\n                          onClick={() =>\n                            (window.location.href = \"/api/auth/google\")\n                          }\n                          data-testid=\"button-google-register\"\n                        >\n                          <FaGoogle className=\"mr-2 h-4 w-4 text-red-500\" />\n                          Google\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          className=\"w-full\"\n                          onClick={() =>\n                            (window.location.href = \"/api/auth/github\")\n                          }\n                          data-testid=\"button-github-register\"\n                        >\n                          <FaGithub className=\"mr-2 h-4 w-4\" />\n                          GitHub\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-8\">\n              <div>\n                <h1 className=\"text-5xl font-bold text-foreground leading-tight\">\n                  Master <span className=\"text-primary\">SQL Skills</span> for\n                  Interviews & Work\n                </h1>\n                <p className=\"text-xl text-muted-foreground mt-6 leading-relaxed\">\n                  Practice SQL with real-world problems designed for interviews\n                  and professional development. Progress from Junior to Senior\n                  level with our comprehensive platform.\n                </p>\n              </div>\n\n              {/* Progress Showcase */}\n              <Card className=\"p-6\">\n                <h3 className=\"font-semibold text-foreground mb-4\">\n                  Your Progress\n                </h3>\n                <ProgressBar value={15} max={20} />\n              </Card>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button\n                      size=\"lg\"\n                      className=\"bg-primary text-primary-foreground px-8 py-4 text-lg hover:bg-primary/90\"\n                      data-testid=\"button-start-practice\"\n                    >\n                      <Play className=\"mr-3 h-5 w-5\" />\n                      Start Practicing\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Join SQL Practice Hub</DialogTitle>\n                    </DialogHeader>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Create your free account to access hundreds of\n                      interview-focused SQL problems and join our professional\n                      community.\n                    </p>\n                    <Button\n                      onClick={() => {\n                        setIsRegisterOpen(true);\n                      }}\n                      className=\"w-full\"\n                      data-testid=\"button-join-now\"\n                    >\n                      Join Now - It's Free!\n                    </Button>\n                  </DialogContent>\n                </Dialog>\n\n                <Button\n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"px-8 py-4 text-lg\"\n                  onClick={() =>\n                    document\n                      .getElementById(\"community\")\n                      ?.scrollIntoView({ behavior: \"smooth\" })\n                  }\n                  data-testid=\"button-join-community\"\n                >\n                  <Users className=\"mr-3 h-5 w-5\" />\n                  Join Community\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <img\n                src=\"https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n                alt=\"Professional coding workspace\"\n                className=\"rounded-xl shadow-2xl w-full\"\n              />\n\n              {/* Floating achievement cards */}\n              <Card className=\"absolute -top-4 -right-4 p-4 shadow-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                    <CheckCircle className=\"text-primary text-xl\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold text-foreground\">\n                      Senior Developer\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Level Achieved!\n                    </p>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"absolute -bottom-4 -left-4 p-4 shadow-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                    <CheckCircle className=\"text-green-600 text-xl\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold text-foreground\">\n                      Problem Solved!\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      +50 XP Gained\n                    </p>\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Community Section */}\n      <section id=\"community\" className=\"bg-muted/30 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-4xl font-bold text-foreground mb-4\">\n            Join the SQL Practice Community\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Connect with fellow developers, share solutions, and advance your\n            career\n          </p>\n\n          <div className=\"grid md:grid-cols-3 gap-8 mb-12\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Code className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"font-semibold text-foreground mb-2\">\n                Practice Together\n              </h3>\n              <p className=\"text-muted-foreground\">\n                Solve problems with peers and share your solutions\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <h3 className=\"font-semibold text-foreground mb-2\">\n                Learn from Experts\n              </h3>\n              <p className=\"text-muted-foreground\">\n                Get tips and tricks from senior developers\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <CheckCircle className=\"w-8 h-8 text-yellow-600\" />\n              </div>\n              <h3 className=\"font-semibold text-foreground mb-2\">\n                Track Progress\n              </h3>\n              <p className=\"text-muted-foreground\">\n                Earn badges and climb the leaderboards\n              </p>\n            </div>\n          </div>\n\n          <Button\n            onClick={() => setIsRegisterOpen(true)}\n            size=\"lg\"\n            className=\"bg-primary text-primary-foreground px-8 py-4 text-lg hover:bg-primary/90\"\n            data-testid=\"button-get-started\"\n          >\n            <Code className=\"mr-3 h-5 w-5\" />\n            Get Started Now\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-foreground text-background py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Code className=\"text-primary text-2xl\" />\n                <span className=\"text-2xl font-bold\">SQL Practice Hub</span>\n              </div>\n              <p className=\"text-background/70\">\n                Master SQL skills for interviews and professional development\n                with our comprehensive platform.\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"font-semibold mb-4\">Platform</h3>\n              <div className=\"space-y-2 text-background/70\">\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Problems\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Leaderboard\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Community\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Submissions\n                </a>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"font-semibold mb-4\">Resources</h3>\n              <div className=\"space-y-2 text-background/70\">\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Documentation\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  SQL Guide\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Video Tutorials\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Blog\n                </a>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"font-semibold mb-4\">Company</h3>\n              <div className=\"space-y-2 text-background/70\">\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  About\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Contact\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Privacy\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Terms\n                </a>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"border-t border-background/20 mt-8 pt-8 text-center text-background/70\">\n            <p>\n              &copy; 2024 SQL Practice Hub. All rights reserved. Practice smart,\n              code professionally.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":26535},"client/src/pages/leaderboard.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Trophy, Medal, Award, TrendingUp, Users, Target } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { leaderboardApi } from '@/lib/auth';\nimport { useAuth } from '@/hooks/use-auth';\n\nexport default function Leaderboard() {\n  const [limit, setLimit] = useState(50);\n  const { user } = useAuth();\n\n  const { data: leaderboard, isLoading } = useQuery({\n    queryKey: ['/api/leaderboard', limit],\n    queryFn: () => leaderboardApi.get(limit),\n  });\n\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1: return <Trophy className=\"w-6 h-6 text-yellow-500\" />;\n      case 2: return <Medal className=\"w-6 h-6 text-gray-400\" />;\n      case 3: return <Award className=\"w-6 h-6 text-orange-400\" />;\n      default: return null;\n    }\n  };\n\n\n  const currentUserRank = leaderboard?.findIndex(u => u.id === user?.id) ?? -1;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">SQL Athletes Leaderboard</h1>\n          <p className=\"text-xl text-muted-foreground\">See who's crushing their SQL workouts</p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Leaderboard */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"overflow-hidden\">\n              <CardHeader className=\"bg-gradient-to-r from-primary to-orange-400 text-white\">\n                <CardTitle className=\"text-2xl font-bold mb-2\">Top SQL Athletes</CardTitle>\n                <p className=\"opacity-90\">This week's strongest performers</p>\n              </CardHeader>\n              \n              <CardContent className=\"p-6\">\n                {isLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(10)].map((_, i) => (\n                      <div key={i} className=\"flex items-center space-x-4 py-4 animate-pulse\">\n                        <div className=\"w-12 h-12 bg-muted rounded-full\" />\n                        <div className=\"w-12 h-12 bg-muted rounded-full\" />\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"h-4 bg-muted rounded w-1/3\" />\n                          <div className=\"h-3 bg-muted rounded w-1/4\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <div className=\"h-4 bg-muted rounded w-16\" />\n                          <div className=\"h-3 bg-muted rounded w-12\" />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {leaderboard?.map((athlete, index) => (\n                      <div \n                        key={athlete.id} \n                        className={`flex items-center space-x-4 py-4 border-b border-border last:border-b-0 rounded-lg transition-colors ${\n                          athlete.id === user?.id ? 'bg-primary/5 border-primary/20' : 'hover:bg-muted/50'\n                        }`}\n                        data-testid={`leaderboard-rank-${index + 1}`}\n                      >\n                        {/* Rank */}\n                        <div className=\"flex items-center justify-center w-12 h-12\">\n                          {getRankIcon(index + 1) || (\n                            <div className={`flex items-center justify-center w-12 h-12 rounded-full font-bold text-lg ${\n                              index < 3 ? 'bg-primary text-primary-foreground' : 'bg-muted text-muted-foreground'\n                            }`}>\n                              {index + 1}\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Avatar */}\n                        <Avatar className=\"w-12 h-12\">\n                          <AvatarImage src={athlete.profileImageUrl} alt={athlete.username} />\n                          <AvatarFallback>\n                            {athlete.username?.charAt(0).toUpperCase() || 'U'}\n                          </AvatarFallback>\n                        </Avatar>\n\n                        {/* User Info */}\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <h4 className=\"font-semibold text-foreground\" data-testid={`text-username-${index + 1}`}>\n                              {athlete.firstName && athlete.lastName \n                                ? `${athlete.firstName} ${athlete.lastName}` \n                                : athlete.username}\n                            </h4>\n                            {athlete.id === user?.id && (\n                              <Badge variant=\"outline\" className=\"text-xs\">You</Badge>\n                            )}\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-sm text-muted-foreground\">@{athlete.username}</span>\n                          </div>\n                        </div>\n\n                        {/* Stats */}\n                        <div className=\"text-right\">\n                          <p className=\"font-bold text-foreground\" data-testid={`text-problems-${index + 1}`}>\n                            {athlete.problemsSolved} solved\n                          </p>\n                        </div>\n\n                        {/* Achievement Icons */}\n                        <div className=\"flex items-center space-x-1\">\n                          {index === 0 && <Trophy className=\"w-4 h-4 text-yellow-400\" />}\n                          {index <= 1 && <Medal className=\"w-4 h-4 text-gray-400\" />}\n                          {index <= 2 && <Award className=\"w-4 h-4 text-orange-400\" />}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {/* Load More */}\n                {!isLoading && leaderboard && leaderboard.length >= limit && (\n                  <div className=\"text-center mt-6\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setLimit(limit + 50)}\n                      data-testid=\"button-load-more\"\n                    >\n                      Load More Athletes\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Your Stats */}\n            {user && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Target className=\"w-5 h-5 text-primary\" />\n                    <span>Your Stats</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Rank</span>\n                    <span className=\"font-bold text-foreground\" data-testid=\"text-user-rank\">\n                      #{currentUserRank >= 0 ? currentUserRank + 1 : '?'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Problems Solved</span>\n                    <span className=\"font-bold text-foreground\" data-testid=\"text-user-problems\">\n                      {user.problemsSolved}\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n\n            {/* Weekly Challenge */}\n            <Card className=\"bg-gradient-to-br from-primary to-orange-400 text-white\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Weekly Challenge</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm opacity-90 mb-4\">\n                  Solve 5 problems this week to climb the leaderboard faster!\n                </p>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Progress</span>\n                    <span>{Math.min(user?.problemsSolved || 0, 5)}/5</span>\n                  </div>\n                  <div className=\"w-full bg-white/20 rounded-full h-2\">\n                    <div \n                      className=\"bg-white h-2 rounded-full transition-all duration-300\" \n                      style={{ width: `${Math.min(((user?.problemsSolved || 0) / 5) * 100, 100)}%` }} \n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Leaderboard Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Users className=\"w-5 h-5 text-primary\" />\n                  <span>Community Stats</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Total Athletes</span>\n                  <span className=\"font-bold text-foreground\">\n                    {leaderboard?.length.toLocaleString() || 0}\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Top Problems Solved</span>\n                  <span className=\"font-bold text-foreground\">\n                    {leaderboard?.[0]?.problemsSolved || 0}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10376},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/problem-detail.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState, useEffect, useCallback, useMemo } from \"react\";\n\nimport { problemsApi, submissionsApi } from \"@/lib/auth\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ResizableSplitter from \"@/components/resizable-splitter\";\nimport ProblemNavigation from \"@/components/ProblemNavigation\";\nimport ProblemTabsContent from \"@/components/ProblemTabsContent\";\nimport OptimizedEditorOutputSplit from \"@/components/OptimizedEditorOutputSplit\";\nimport \"../components/AnimatedFields.css\";\n\nexport default function ProblemDetail() {\n  const params = useParams();\n  const problemId = params.id as string;\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Memoized navigation handlers to prevent recreation\n  const handleDifficultyClick = useCallback((difficulty: string) => {\n    setLocation(`/problems?difficulty=${encodeURIComponent(difficulty)}`);\n  }, [setLocation]);\n\n  const handleCompanyClick = useCallback((company: string) => {\n    setLocation(`/problems?company=${encodeURIComponent(company)}`);\n  }, [setLocation]);\n\n  // Optimized queries with proper memoization\n  const { data: problem, isLoading: problemLoading } = useQuery({\n    queryKey: [\"/api/problems\", problemId],\n    queryFn: () => problemsApi.getById(problemId),\n    enabled: !!problemId,\n  });\n\n  const { data: userSubmissions = [] } = useQuery({\n    queryKey: [\"/api/submissions\", problemId],\n    queryFn: () => submissionsApi.getByProblemId(problemId),\n    enabled: !!problemId && !!user,\n  });\n\n  // Memoized run query mutation\n  const runQueryMutation = useMutation({\n    mutationFn: async (query: string) => {\n      if (!problemId) throw new Error(\"No problem selected\");\n      return submissionsApi.testQuery(problemId, query);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Query failed\",\n        description: error instanceof Error ? error.message : \"Unknown error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Memoized submit solution mutation\n  const submitSolutionMutation = useMutation({\n    mutationFn: async (query: string) => {\n      if (!problemId) throw new Error(\"No problem selected\");\n      return submissionsApi.submit(problemId, query);\n    },\n    onSuccess: (result) => {\n      if (result.isCorrect) {\n        toast({\n          title: \"🎉 Congratulations!\",\n          description: \"Your solution is correct!\",\n        });\n      } else {\n        toast({\n          title: \"Solution submitted\",\n          description: \"Keep trying! Check the feedback for hints.\",\n          variant: \"default\",\n        });\n      }\n      // Invalidate submissions to refetch\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/submissions\", problemId],\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Submission failed\",\n        description: error instanceof Error ? error.message : \"Unknown error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Memoized handlers\n  const handleRunQuery = useCallback(\n    async (query: string) => {\n      return runQueryMutation.mutateAsync(query);\n    },\n    [runQueryMutation]\n  );\n\n  const handleSubmitSolution = useCallback(\n    async (query: string) => {\n      return submitSolutionMutation.mutateAsync(query);\n    },\n    [submitSolutionMutation]\n  );\n\n  // Navigation handlers (placeholder - could be implemented with actual navigation logic)\n  const handlePrevious = useCallback(() => {\n    // Implement navigation to previous problem\n    console.log(\"Navigate to previous problem\");\n  }, []);\n\n  const handleNext = useCallback(() => {\n    // Implement navigation to next problem  \n    console.log(\"Navigate to next problem\");\n  }, []);\n\n  // Loading state\n  if (problemLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading problem...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Error state\n  if (!problem) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-2\">Problem not found</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            The problem you're looking for doesn't exist.\n          </p>\n          <button\n            onClick={() => setLocation(\"/problems\")}\n            className=\"text-primary hover:underline\"\n          >\n            Back to Problems\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col bg-background\">\n      {/* Navigation Header */}\n      <ProblemNavigation\n        problem={problem}\n        userSubmissions={userSubmissions}\n        onPrevious={handlePrevious}\n        onNext={handleNext}\n        hasPrevious={false} // TODO: Implement actual navigation logic\n        hasNext={false} // TODO: Implement actual navigation logic\n      />\n\n      {/* Main Content with Resizable Split */}\n      <div className=\"flex-1 min-h-0\">\n        <ResizableSplitter\n          leftPanel={\n            <ProblemTabsContent\n              problem={problem}\n              userSubmissions={userSubmissions}\n            />\n          }\n          rightPanel={\n            <OptimizedEditorOutputSplit\n              problem={problem}\n              handleRunQuery={handleRunQuery}\n              handleSubmitSolution={handleSubmitSolution}\n              onDifficultyClick={handleDifficultyClick}\n              onCompanyClick={handleCompanyClick}\n            />\n          }\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":5921},"client/src/pages/problems.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport {\n  Search,\n  Filter,\n  X,\n  ChevronDown,\n  Users,\n  Building2,\n  Tag,\n  Dumbbell,\n  CheckCircle,\n} from \"lucide-react\";\nimport { CompanyLogo } from \"@/components/CompanyLogo\";\nimport { DifficultyBadge } from \"@/components/DifficultyBadge\";\nimport { Link } from \"wouter\";\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { problemsApi } from \"@/lib/auth\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface Problem {\n  id: string;\n  title: string;\n  question: {\n    description: string;\n    tables: any[];\n    expectedOutput: any[];\n  };\n  difficulty: string;\n  tags: string[];\n  company?: string | null;\n  solvedCount: number;\n  isUserSolved: boolean;\n}\n\ninterface FilterState {\n  difficulties: string[];\n  companies: string[];\n  tags: string[];\n  status: \"all\" | \"solved\" | \"unsolved\";\n}\n\nexport default function Problems() {\n  const { user } = useAuth();\n  const [location] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filters, setFilters] = useState<FilterState>({\n    difficulties: [],\n    companies: [],\n    tags: [],\n    status: \"all\",\n  });\n\n  // Handle URL search parameters for filtering\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const difficultyParam = urlParams.get('difficulty');\n    const companyParam = urlParams.get('company');\n    \n    if (difficultyParam || companyParam) {\n      setFilters(prev => ({\n        ...prev,\n        difficulties: difficultyParam ? [difficultyParam] : prev.difficulties,\n        companies: companyParam ? [companyParam] : prev.companies,\n      }));\n    }\n  }, [location]);\n\n  const { data: problems, isLoading } = useQuery<Problem[]>({\n    queryKey: [\"/api/problems\"],\n    queryFn: () => problemsApi.getAll(),\n  });\n\n  // Get unique values for filter options\n  const allCompanies = Array.from(\n    new Set((problems ?? []).map((p) => p.company).filter(Boolean))\n  ).sort();\n  const allTags = Array.from(\n    new Set((problems ?? []).flatMap((p) => p.tags || []))\n  ).sort();\n  // Normalize difficulties to handle case/whitespace differences\n  const difficulties = Array.from(\n    new Map(\n      (problems ?? [])\n        .map((p) => p.difficulty)\n        .filter(Boolean)\n        .map((d) => [d.trim().toLowerCase(), d.trim()])\n    ).values()\n  ).sort();\n\n  // Get tag counts for display\n  const getTagCount = (tag: string) => {\n    return problems?.filter((p) => p.tags?.includes(tag)).length || 0;\n  };\n\n  // Filter problems based on all criteria\n  const filteredProblems =\n    problems?.filter((problem) => {\n      // Search filter\n      const matchesSearch =\n        searchQuery === \"\" ||\n        problem.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        problem.question.description.toLowerCase().includes(searchQuery.toLowerCase());\n\n      // Difficulty filter (case-insensitive comparison)\n      const matchesDifficulty =\n        filters.difficulties.length === 0 ||\n        filters.difficulties.some(filterDiff => \n          filterDiff.trim().toLowerCase() === problem.difficulty?.trim().toLowerCase()\n        );\n\n      // Company filter\n      const matchesCompany =\n        filters.companies.length === 0 ||\n        (problem.company && filters.companies.includes(problem.company));\n\n      // Tags filter - must have ALL selected tags (AND logic)\n      const matchesTags =\n        filters.tags.length === 0 ||\n        filters.tags.every((tag) => problem.tags?.includes(tag));\n\n      // Status filter - check if user has solved the problem\n      const matchesStatus =\n        filters.status === \"all\" ||\n        (filters.status === \"solved\" && problem.isUserSolved === true) ||\n        (filters.status === \"unsolved\" && problem.isUserSolved !== true);\n\n      return (\n        matchesSearch &&\n        matchesDifficulty &&\n        matchesCompany &&\n        matchesTags &&\n        matchesStatus\n      );\n    }) || [];\n\n\n  const updateFilter = (key: keyof FilterState, value: any) => {\n    setFilters((prev) => ({ ...prev, [key]: value }));\n  };\n\n  const toggleArrayFilter = (\n    key: \"difficulties\" | \"companies\" | \"tags\",\n    value: string\n  ) => {\n    setFilters((prev) => ({\n      ...prev,\n      [key]: prev[key].includes(value)\n        ? prev[key].filter((item) => item !== value)\n        : [...prev[key], value],\n    }));\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      difficulties: [],\n      companies: [],\n      tags: [],\n      status: \"all\",\n    });\n    setSearchQuery(\"\");\n  };\n\n  const getActiveFilterCount = () => {\n    return (\n      filters.difficulties.length +\n      filters.companies.length +\n      filters.tags.length +\n      (filters.status !== \"all\" ? 1 : 0)\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n            SQL Practice Problems\n          </h1>\n          <p className=\"text-xl text-gray-600\">\n            Master SQL for interviews and professional development\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"mb-8 space-y-4\">\n          {/* Search Bar */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n            <Input\n              placeholder=\"Search problems by title or description...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 h-12 text-lg border-gray-200 focus:border-orange-500 focus:ring-orange-500\"\n              data-testid=\"input-search-problems\"\n            />\n          </div>\n\n          {/* Filter Section */}\n          <div className=\"flex flex-wrap gap-3 items-center\">\n            {/* Difficulty Filter */}\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  className=\"h-10 border-gray-200 hover:border-orange-500\"\n                  data-testid=\"button-difficulty-filter\"\n                >\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  Difficulty\n                  {filters.difficulties.length > 0 && (\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"ml-2 bg-orange-100 text-orange-700\"\n                    >\n                      {filters.difficulties.length}\n                    </Badge>\n                  )}\n                  <ChevronDown className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-64\" align=\"start\">\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium text-gray-900\">\n                    Filter by Difficulty\n                  </h4>\n                  {difficulties.map((difficulty) => (\n                    <div\n                      key={difficulty}\n                      className=\"flex items-center space-x-2\"\n                    >\n                      <Checkbox\n                        checked={filters.difficulties.includes(difficulty)}\n                        onCheckedChange={() =>\n                          toggleArrayFilter(\"difficulties\", difficulty)\n                        }\n                        data-testid={`checkbox-difficulty-${difficulty.toLowerCase()}`}\n                      />\n                      <label className=\"text-sm font-medium cursor-pointer\">\n                        {difficulty}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </PopoverContent>\n            </Popover>\n\n            {/* Companies Filter */}\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  className=\"h-10 border-gray-200 hover:border-orange-500\"\n                  data-testid=\"button-companies-filter\"\n                >\n                  <Building2 className=\"w-4 h-4 mr-2\" />\n                  Companies\n                  {filters.companies.length > 0 && (\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"ml-2 bg-orange-100 text-orange-700\"\n                    >\n                      {filters.companies.length}\n                    </Badge>\n                  )}\n                  <ChevronDown className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-80\" align=\"start\">\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium text-gray-900\">\n                    Filter by Companies\n                  </h4>\n                  <div className=\"max-h-64 overflow-y-auto space-y-2\">\n                    {allCompanies.map((company: string) => (\n                      <div\n                        key={company}\n                        className=\"flex items-center space-x-2\"\n                      >\n                        <Checkbox\n                          checked={filters.companies.includes(company)}\n                          onCheckedChange={() =>\n                            toggleArrayFilter(\"companies\", company)\n                          }\n                          data-testid={`checkbox-company-${company\n                            .toLowerCase()\n                            .replace(/\\s+/g, \"-\")}`}\n                        />\n                        <label className=\"text-sm font-medium cursor-pointer\">\n                          {company}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </PopoverContent>\n            </Popover>\n\n            {/* Status Filter - Only show if user is authenticated */}\n            {user && (\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className=\"h-10 border-gray-200 hover:border-orange-500\"\n                    data-testid=\"button-status-filter\"\n                  >\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Status\n                    {filters.status !== \"all\" && (\n                      <Badge\n                        variant=\"secondary\"\n                        className=\"ml-2 bg-orange-100 text-orange-700\"\n                      >\n                        1\n                      </Badge>\n                    )}\n                    <ChevronDown className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-64\" align=\"start\">\n                  <div className=\"space-y-3\">\n                    <h4 className=\"font-medium text-gray-900\">\n                      Filter by Status\n                    </h4>\n                    {[\n                      { value: \"all\", label: \"All Problems\" },\n                      { value: \"solved\", label: \"Solved\" },\n                      { value: \"unsolved\", label: \"Unsolved\" },\n                    ].map((option) => (\n                      <div\n                        key={option.value}\n                        className=\"flex items-center space-x-2\"\n                      >\n                        <Checkbox\n                          checked={filters.status === option.value}\n                          onCheckedChange={() =>\n                            updateFilter(\"status\", option.value)\n                          }\n                          data-testid={`checkbox-status-${option.value}`}\n                        />\n                        <label className=\"text-sm font-medium cursor-pointer\">\n                          {option.label}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </PopoverContent>\n              </Popover>\n            )}\n\n            {/* Clear Filters */}\n            {getActiveFilterCount() > 0 && (\n              <Button\n                variant=\"ghost\"\n                onClick={clearFilters}\n                className=\"h-10 text-gray-600 hover:text-gray-900\"\n                data-testid=\"button-clear-filters\"\n              >\n                <X className=\"w-4 h-4 mr-2\" />\n                Clear filters\n              </Button>\n            )}\n          </div>\n\n          {/* Active Filter Chips */}\n          <AnimatePresence>\n            {getActiveFilterCount() > 0 && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: \"auto\" }}\n                exit={{ opacity: 0, height: 0 }}\n                className=\"flex flex-wrap gap-2\"\n              >\n                {filters.difficulties.map((difficulty) => (\n                  <motion.div\n                    key={`difficulty-${difficulty}`}\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                  >\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"bg-orange-100 text-orange-700 hover:bg-orange-200 cursor-pointer\"\n                      onClick={() =>\n                        toggleArrayFilter(\"difficulties\", difficulty)\n                      }\n                      data-testid={`chip-difficulty-${difficulty.toLowerCase()}`}\n                    >\n                      {difficulty}\n                      <X className=\"w-3 h-3 ml-1\" />\n                    </Badge>\n                  </motion.div>\n                ))}\n                {filters.companies.map((company) => (\n                  <motion.div\n                    key={`company-${company}`}\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                  >\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"bg-blue-100 text-blue-700 hover:bg-blue-200 cursor-pointer\"\n                      onClick={() => toggleArrayFilter(\"companies\", company)}\n                      data-testid={`chip-company-${company\n                        .toLowerCase()\n                        .replace(/\\s+/g, \"-\")}`}\n                    >\n                      {company}\n                      <X className=\"w-3 h-3 ml-1\" />\n                    </Badge>\n                  </motion.div>\n                ))}\n                {filters.tags.map((tag) => (\n                  <motion.div\n                    key={`tag-${tag}`}\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                  >\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"bg-purple-100 text-purple-700 hover:bg-purple-200 cursor-pointer\"\n                      onClick={() => toggleArrayFilter(\"tags\", tag)}\n                      data-testid={`chip-tag-${tag\n                        .toLowerCase()\n                        .replace(/\\s+/g, \"-\")}`}\n                    >\n                      {tag}\n                      <X className=\"w-3 h-3 ml-1\" />\n                    </Badge>\n                  </motion.div>\n                ))}\n                {filters.status !== \"all\" && (\n                  <motion.div\n                    key={`status-${filters.status}`}\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                  >\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"bg-green-100 text-green-700 hover:bg-green-200 cursor-pointer\"\n                      onClick={() => updateFilter(\"status\", \"all\")}\n                      data-testid={`chip-status-${filters.status}`}\n                    >\n                      {filters.status === \"solved\" ? \"Solved\" : \"Unsolved\"}\n                      <X className=\"w-3 h-3 ml-1\" />\n                    </Badge>\n                  </motion.div>\n                )}\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Main Content Area - Table and Tags Side by Side */}\n        <div className=\"flex gap-8\">\n          {/* Left Side - Table and Results */}\n          <div className=\"flex-1\">\n            {/* Results Summary */}\n            <div className=\"mb-6\">\n              <p className=\"text-gray-600\">\n                Showing{\" \"}\n                <span className=\"font-semibold text-gray-900\">\n                  {filteredProblems.length}\n                </span>{\" \"}\n                of{\" \"}\n                <span className=\"font-semibold text-gray-900\">\n                  {problems?.length || 0}\n                </span>{\" \"}\n                problems\n              </p>\n            </div>\n\n            {/* Problems Table */}\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(6)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse\">\n                    <div className=\"h-16 bg-gray-200 rounded\" />\n                  </div>\n                ))}\n              </div>\n            ) : filteredProblems.length === 0 ? (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"text-center py-16\"\n              >\n                <div className=\"w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <Search className=\"w-12 h-12 text-gray-400\" />\n                </div>\n                <h3 className=\"text-2xl font-semibold text-gray-900 mb-2\">\n                  No problems found\n                </h3>\n                <p className=\"text-gray-600 mb-6\">\n                  Try changing your filters or search terms\n                </p>\n                <Button\n                  onClick={clearFilters}\n                  variant=\"outline\"\n                  data-testid=\"button-clear-all-filters\"\n                >\n                  Clear all filters\n                </Button>\n              </motion.div>\n            ) : (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"border rounded-lg overflow-hidden bg-white\"\n              >\n                <Table>\n                  <TableHeader>\n                    <TableRow className=\"bg-gray-50\">\n                      <TableHead className=\"font-semibold text-gray-900\">\n                        Company\n                      </TableHead>\n                      <TableHead className=\"font-semibold text-gray-900\">\n                        Title\n                      </TableHead>\n                      <TableHead className=\"font-semibold text-gray-900\">\n                        Description\n                      </TableHead>\n                      <TableHead className=\"font-semibold text-gray-900\">\n                        Difficulty\n                      </TableHead>\n                      <TableHead className=\"font-semibold text-gray-900\">\n                        Status\n                      </TableHead>\n                      <TableHead className=\"font-semibold text-gray-900\">\n                        Submissions\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredProblems.map((problem, index) => (\n                      <motion.tr\n                        key={problem.id}\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.02 }}\n                        className=\"hover:bg-gray-50 transition-colors cursor-pointer\"\n                        onClick={() =>\n                          (window.location.href = `/problems/${problem.id}`)\n                        }\n                        data-testid={`row-problem-${problem.id}`}\n                      >\n                        <TableCell className=\"py-4 w-32\">\n                          <div className=\"flex flex-wrap gap-1\">\n                            <CompanyLogo\n                              companyName={problem.company}\n                              variant=\"badge\"\n                              size=\"sm\"\n                              showFallback={true}\n                              data-testid={`company-badge-${problem.id}`}\n                            />\n                          </div>\n                        </TableCell>\n\n                        <TableCell className=\"py-4 max-w-xs\">\n                          <h3 className=\"font-medium text-gray-900 hover:text-orange-600 transition-colors truncate\">\n                            {problem.title}\n                          </h3>\n                        </TableCell>\n\n                        <TableCell className=\"py-4 max-w-md\">\n                          <div className=\"text-gray-600 text-sm line-clamp-2\">\n                            <ReactMarkdown \n                              remarkPlugins={[remarkGfm]}\n                              components={{\n                                // Flatten all elements for preview - keep formatting but avoid line breaks\n                                p: ({children}) => <span className=\"inline\">{children} </span>,\n                                strong: ({children}) => <strong className=\"font-semibold text-gray-800\">{children}</strong>,\n                                em: ({children}) => <em className=\"italic\">{children}</em>,\n                                code: ({children}) => <code className=\"bg-gray-100 px-1 py-0.5 rounded text-xs font-mono text-gray-800\">{children}</code>,\n                                h1: ({children}) => <span className=\"font-bold text-gray-800\">{children} </span>,\n                                h2: ({children}) => <span className=\"font-semibold text-gray-800\">{children} </span>,\n                                h3: ({children}) => <span className=\"font-medium text-gray-800\">{children} </span>,\n                                ul: ({children}) => <span>{children}</span>,\n                                ol: ({children}) => <span>{children}</span>,\n                                li: ({children}) => <span>{children} • </span>,\n                                blockquote: ({children}) => <span className=\"italic text-blue-600\">\"{children}\" </span>,\n                                // Tables and code blocks are hidden in preview\n                                table: () => <span className=\"text-blue-600 font-medium\">[Table] </span>,\n                                pre: () => <span className=\"text-green-600 font-medium\">[Code] </span>,\n                              }}\n                            >\n                              {(() => {\n                                // Get first paragraph or first 150 chars to avoid breaking markdown syntax\n                                const desc = problem.question.description;\n                                const firstParagraph = desc.split('\\n\\n')[0];\n                                if (firstParagraph.length > 150) {\n                                  return firstParagraph.substring(0, 150) + '...';\n                                }\n                                return firstParagraph + (desc.length > firstParagraph.length ? '...' : '');\n                              })()}\n                            </ReactMarkdown>\n                          </div>\n                        </TableCell>\n\n                        <TableCell className=\"py-4\">\n                          <DifficultyBadge\n                            difficulty={problem.difficulty}\n                            variant=\"badge\"\n                            size=\"sm\"\n                            showIcon={true}\n                            data-testid={`difficulty-badge-${problem.id}`}\n                          />\n                        </TableCell>\n\n                        <TableCell className=\"py-4\">\n                          <div className=\"flex items-center justify-center\">\n                            {problem.isUserSolved ? (\n                              <div\n                                className=\"text-green-600\"\n                                data-testid={`dumbbell-solved-${problem.id}`}\n                              >\n                                <Dumbbell className=\"w-5 h-5\" />\n                              </div>\n                            ) : null}\n                          </div>\n                        </TableCell>\n\n                        <TableCell className=\"py-4\">\n                          <div className=\"flex items-center space-x-1 text-sm text-gray-500\">\n                            <Users className=\"w-4 h-4\" />\n                            <span>{problem.solvedCount}</span>\n                          </div>\n                        </TableCell>\n                      </motion.tr>\n                    ))}\n                  </TableBody>\n                </Table>\n              </motion.div>\n            )}\n\n            {/* Stats Footer */}\n            {!isLoading && filteredProblems.length > 0 && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.3 }}\n                className=\"mt-16 bg-gray-50 rounded-2xl p-8\"\n              >\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 text-center\">\n                  <div>\n                    <div className=\"text-3xl font-bold text-gray-900\">\n                      {filteredProblems.length}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Total Problems</div>\n                  </div>\n                  <div>\n                    <div className=\"text-3xl font-bold text-green-600\">\n                      {\n                        filteredProblems.filter((p) => p.difficulty === \"Easy\")\n                          .length\n                      }\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Easy</div>\n                  </div>\n                  <div>\n                    <div className=\"text-3xl font-bold text-orange-600\">\n                      {\n                        filteredProblems.filter(\n                          (p) => p.difficulty === \"Medium\"\n                        ).length\n                      }\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Medium</div>\n                  </div>\n                  <div>\n                    <div className=\"text-3xl font-bold text-red-600\">\n                      {\n                        filteredProblems.filter((p) => p.difficulty === \"Hard\")\n                          .length\n                      }\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Hard</div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </div>\n\n          {/* Right Sidebar - Tags */}\n          <div className=\"w-80\">\n            {allTags.length > 0 && (\n              <div className=\"sticky top-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                  Tags\n                </h3>\n                <div className=\"flex flex-wrap gap-1.5 max-h-96 overflow-y-auto\">\n                  {allTags.map((tag) => (\n                    <button\n                      key={tag}\n                      onClick={() => toggleArrayFilter(\"tags\", tag)}\n                      className={`\n                    px-3 py-1.5 rounded-full text-sm font-medium transition-colors duration-200\n                    ${\n                      filters.tags.includes(tag)\n                        ? \"bg-orange-500 text-white border border-orange-500\"\n                        : \"bg-white text-gray-700 border border-gray-300 hover:bg-gray-100 hover:border-gray-400\"\n                    }\n                  `}\n                    >\n                      {tag} ({getTagCount(tag)})\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":29132},"client/src/pages/submissions.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Clock, CheckCircle, XCircle, Code, ArrowRight, Filter } from 'lucide-react';\nimport { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { submissionsApi, problemsApi } from '@/lib/auth';\nimport { useAuth } from '@/hooks/use-auth';\n\nexport default function Submissions() {\n  const [filter, setFilter] = useState<'all' | 'correct' | 'incorrect'>('all');\n  const { user } = useAuth();\n\n  const { data: submissions, isLoading: submissionsLoading } = useQuery({\n    queryKey: ['/api/submissions/user', user?.id],\n    queryFn: () => submissionsApi.getUserSubmissions(user!.id),\n    enabled: !!user?.id,\n  });\n\n  const { data: problems } = useQuery({\n    queryKey: ['/api/problems'],\n    queryFn: () => problemsApi.getAll(),\n  });\n\n  const filteredSubmissions = submissions?.filter(submission => {\n    if (filter === 'correct') return submission.isCorrect;\n    if (filter === 'incorrect') return !submission.isCorrect;\n    return true;\n  }) || [];\n\n  const getProblemTitle = (problemId: string) => {\n    return problems?.find(p => p.id === problemId)?.title || 'Unknown Problem';\n  };\n\n  const getProblemDifficulty = (problemId: string) => {\n    return problems?.find(p => p.id === problemId)?.difficulty || 'Unknown';\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'Easy': return 'bg-green-100 text-green-800';\n      case 'Medium': return 'bg-yellow-100 text-yellow-800';\n      case 'Hard': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const truncateQuery = (query: string, maxLength: number = 100) => {\n    if (query.length <= maxLength) return query;\n    return query.substring(0, maxLength).trim() + '...';\n  };\n\n  // Calculate stats\n  const totalSubmissions = submissions?.length || 0;\n  const correctSubmissions = submissions?.filter(s => s.isCorrect).length || 0;\n  const successRate = totalSubmissions > 0 ? Math.round((correctSubmissions / totalSubmissions) * 100) : 0;\n  const avgExecutionTime = submissions?.length ? \n    Math.round(submissions.reduce((sum, s) => sum + (s.executionTime || 0), 0) / submissions.length) : 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">Your Submissions</h1>\n          <p className=\"text-xl text-muted-foreground\">Track your SQL training progress and achievements</p>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"stat-total-submissions\">\n                {totalSubmissions}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Total Submissions</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-green-600 mb-2\" data-testid=\"stat-correct-submissions\">\n                {correctSubmissions}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Correct Solutions</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-blue-600 mb-2\" data-testid=\"stat-success-rate\">\n                {successRate}%\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Success Rate</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-orange-600 mb-2\" data-testid=\"stat-avg-time\">\n                {avgExecutionTime}ms\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Avg Execution Time</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex items-center space-x-4 mb-6\">\n          <div className=\"flex items-center space-x-2\">\n            <Filter className=\"w-4 h-4 text-muted-foreground\" />\n            <span className=\"text-sm font-medium text-foreground\">Filter:</span>\n          </div>\n          <div className=\"bg-white border border-border rounded-lg p-1 inline-flex\">\n            <Button\n              variant={filter === 'all' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setFilter('all')}\n              className={filter === 'all' ? 'bg-primary text-primary-foreground' : ''}\n              data-testid=\"button-filter-all\"\n            >\n              All ({totalSubmissions})\n            </Button>\n            <Button\n              variant={filter === 'correct' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setFilter('correct')}\n              className={filter === 'correct' ? 'bg-primary text-primary-foreground' : ''}\n              data-testid=\"button-filter-correct\"\n            >\n              Correct ({correctSubmissions})\n            </Button>\n            <Button\n              variant={filter === 'incorrect' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setFilter('incorrect')}\n              className={filter === 'incorrect' ? 'bg-primary text-primary-foreground' : ''}\n              data-testid=\"button-filter-incorrect\"\n            >\n              Incorrect ({totalSubmissions - correctSubmissions})\n            </Button>\n          </div>\n        </div>\n\n        {/* Submissions List */}\n        {submissionsLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-3 flex-1\">\n                      <div className=\"h-4 bg-muted rounded w-1/3\" />\n                      <div className=\"h-3 bg-muted rounded w-1/2\" />\n                      <div className=\"h-16 bg-muted rounded\" />\n                    </div>\n                    <div className=\"ml-4 space-y-2\">\n                      <div className=\"h-6 bg-muted rounded w-20\" />\n                      <div className=\"h-4 bg-muted rounded w-16\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : filteredSubmissions.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Code className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                {filter === 'all' ? 'No submissions yet' : `No ${filter} submissions`}\n              </h3>\n              <p className=\"text-muted-foreground mb-6\">\n                {filter === 'all' \n                  ? 'Start solving problems to see your submission history here!'\n                  : `You haven't made any ${filter} submissions yet.`}\n              </p>\n              {filter === 'all' && (\n                <Link href=\"/problems\">\n                  <Button className=\"dumbbell-btn bg-primary text-primary-foreground hover:bg-primary/90\" data-testid=\"button-start-solving\">\n                    Start Solving Problems\n                  </Button>\n                </Link>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-4\">\n            {filteredSubmissions.map((submission, index) => (\n              <Card key={submission.id} className=\"hover:shadow-md transition-shadow\" data-testid={`submission-${index}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      {/* Header */}\n                      <div className=\"flex items-center space-x-3 mb-3\">\n                        <div className={`flex items-center justify-center w-8 h-8 rounded-full ${\n                          submission.isCorrect ? 'bg-green-100' : 'bg-red-100'\n                        }`}>\n                          {submission.isCorrect ? (\n                            <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                          ) : (\n                            <XCircle className=\"w-5 h-5 text-red-600\" />\n                          )}\n                        </div>\n                        \n                        <div className=\"flex-1\">\n                          <Link href={`/problems/${submission.problemId}`}>\n                            <h3 className=\"font-semibold text-foreground hover:text-primary transition-colors cursor-pointer\" data-testid={`text-problem-title-${index}`}>\n                              {getProblemTitle(submission.problemId)}\n                            </h3>\n                          </Link>\n                          <div className=\"flex items-center space-x-3 mt-1\">\n                            <Badge className={getDifficultyColor(getProblemDifficulty(submission.problemId))}>\n                              {getProblemDifficulty(submission.problemId)}\n                            </Badge>\n                            <div className=\"flex items-center space-x-1 text-sm text-muted-foreground\">\n                              <Clock className=\"w-3 h-3\" />\n                              <span data-testid={`text-submission-date-${index}`}>\n                                {formatDate(submission.submittedAt)}\n                              </span>\n                            </div>\n                            {submission.executionTime && (\n                              <span className=\"text-sm text-muted-foreground\" data-testid={`text-execution-time-${index}`}>\n                                {submission.executionTime}ms\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Query Preview */}\n                      <div className=\"bg-muted rounded-lg p-3 mb-3\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium text-foreground\">SQL Query</span>\n                          <Badge variant=\"outline\" className={\n                            submission.isCorrect ? 'text-green-700 border-green-300' : 'text-red-700 border-red-300'\n                          }>\n                            {submission.isCorrect ? 'Correct' : 'Incorrect'}\n                          </Badge>\n                        </div>\n                        <pre className=\"text-sm text-muted-foreground font-mono overflow-x-auto\">\n                          <code data-testid={`code-query-${index}`}>\n                            {truncateQuery(submission.query)}\n                          </code>\n                        </pre>\n                        {submission.query.length > 100 && (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"mt-2 text-primary hover:bg-primary/10\"\n                            data-testid={`button-view-full-${index}`}\n                          >\n                            View Full Query\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Actions */}\n                    <div className=\"ml-4 flex flex-col space-y-2\">\n                      <Link href={`/problems/${submission.problemId}`}>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          className=\"w-full\"\n                          data-testid={`button-view-problem-${index}`}\n                        >\n                          View Problem\n                          <ArrowRight className=\"ml-2 w-3 h-3\" />\n                        </Button>\n                      </Link>\n                      \n                      {!submission.isCorrect && (\n                        <Link href={`/problems/${submission.problemId}`}>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            className=\"w-full text-primary border-primary hover:bg-primary/10\"\n                            data-testid={`button-retry-${index}`}\n                          >\n                            Try Again\n                          </Button>\n                        </Link>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Performance Insights */}\n        {submissions && submissions.length > 0 && (\n          <Card className=\"mt-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Clock className=\"w-5 h-5 text-primary\" />\n                <span>Performance Insights</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-8\">\n                <div>\n                  <h4 className=\"font-semibold text-foreground mb-3\">Recent Progress</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">This week</span>\n                      <span className=\"font-medium\">{submissions.filter(s => {\n                        const weekAgo = new Date();\n                        weekAgo.setDate(weekAgo.getDate() - 7);\n                        return new Date(s.submittedAt) > weekAgo;\n                      }).length} submissions</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Best streak</span>\n                      <span className=\"font-medium\">5 correct in a row</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Fastest solution</span>\n                      <span className=\"font-medium\">\n                        {Math.min(...submissions.map(s => s.executionTime || Infinity))}ms\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold text-foreground mb-3\">Areas to Improve</h4>\n                  <div className=\"space-y-2 text-sm text-muted-foreground\">\n                    <p>• Focus on Medium difficulty problems to build confidence</p>\n                    <p>• Practice window functions and CTEs</p>\n                    <p>• Review query optimization techniques</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":15963},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"alembic>=1.16.5\",\n    \"asyncpg>=0.30.0\",\n    \"bcrypt>=4.3.0\",\n    \"email-validator>=2.3.0\",\n    \"fastapi>=0.116.1\",\n    \"passlib>=1.7.4\",\n    \"psycopg2-binary>=2.9.10\",\n    \"pydantic>=2.11.7\",\n    \"python-dotenv>=1.1.1\",\n    \"python-jose>=3.5.0\",\n    \"python-multipart>=0.0.20\",\n    \"sqlalchemy>=2.0.43\",\n    \"sqlparse>=0.5.3\",\n    \"uvicorn>=0.35.0\",\n]\n","size_bytes":500},"api/auth.py":{"content":"\"\"\"\nAuthentication utilities for FastAPI\n\"\"\"\nimport os\nfrom datetime import datetime, timedelta\nfrom typing import Optional\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom fastapi import Depends, HTTPException, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom sqlalchemy.orm import Session\nfrom .database import get_db\nfrom .models import User\nfrom .schemas import TokenData\n\n# Configuration\nJWT_SECRET = os.getenv(\"JWT_SECRET\", \"your-jwt-secret-key\")\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_HOURS = 24\n\n# Password hashing\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\n# OAuth2 scheme\nsecurity = HTTPBearer()\nsecurity_optional = HTTPBearer(auto_error=False)\n\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    \"\"\"Verify a password against its hash\"\"\"\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef get_password_hash(password: str) -> str:\n    \"\"\"Hash a password\"\"\"\n    return pwd_context.hash(password)\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    \"\"\"Create a JWT access token\"\"\"\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(hours=ACCESS_TOKEN_EXPIRE_HOURS)\n    \n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, JWT_SECRET, algorithm=ALGORITHM)\n    return encoded_jwt\n\ndef verify_token(token: str) -> TokenData:\n    \"\"\"Verify and decode a JWT token\"\"\"\n    try:\n        payload = jwt.decode(token, JWT_SECRET, algorithms=[ALGORITHM])\n        user_id: str = payload.get(\"userId\")\n        username: str = payload.get(\"username\")\n        \n        if user_id is None:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Invalid authentication credentials\",\n                headers={\"WWW-Authenticate\": \"Bearer\"},\n            )\n        \n        token_data = TokenData(user_id=user_id, username=username)\n        return token_data\n    except JWTError:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\ndef get_current_user(\n    credentials: HTTPAuthorizationCredentials = Depends(security),\n    db: Session = Depends(get_db)\n) -> User:\n    \"\"\"Get the current authenticated user\"\"\"\n    token = credentials.credentials\n    token_data = verify_token(token)\n    \n    user = db.query(User).filter(User.id == token_data.user_id).first()\n    if user is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"User not found\"\n        )\n    \n    return user\n\ndef get_current_user_optional(\n    credentials: Optional[HTTPAuthorizationCredentials] = Depends(security_optional),\n    db: Session = Depends(get_db)\n) -> Optional[User]:\n    \"\"\"Get the current user if authenticated, otherwise return None\"\"\"\n    if not credentials:\n        return None\n    \n    try:\n        token = credentials.credentials\n        token_data = verify_token(token)\n        user = db.query(User).filter(User.id == token_data.user_id).first()\n        return user\n    except HTTPException:\n        return None","size_bytes":3343},"api/database.py":{"content":"\"\"\"\nDatabase configuration and connection setup\n\"\"\"\nimport os\nimport json\nfrom dotenv import load_dotenv\nfrom sqlalchemy import create_engine, text, inspect\nfrom sqlalchemy.orm import sessionmaker, Session\nfrom sqlalchemy.dialects.postgresql import JSONB\nfrom .models import Base\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Database URL from environment variable (preferred for production)\nDATABASE_URL = os.getenv(\"DATABASE_URL\")\n\n# Only fallback to .env file in development if environment variable doesn't exist\nif not DATABASE_URL and os.getenv(\"NODE_ENV\", \"development\") == \"development\":\n    from pathlib import Path\n    env_file = Path(\".env\")\n    if env_file.exists():\n        with open(env_file, 'r') as f:\n            for line in f:\n                if line.strip().startswith('DATABASE_URL=') and not line.strip().startswith('#'):\n                    DATABASE_URL = line.strip().split('=', 1)[1]\n                    break\n\nif not DATABASE_URL:\n    raise ValueError(\"DATABASE_URL environment variable is required\")\n\n# Create engine with proper SSL and connection pooling\nengine = create_engine(\n    DATABASE_URL,\n    pool_pre_ping=True,  # Verify connections before use\n    pool_recycle=300,    # Recycle connections every 5 minutes\n    pool_timeout=10,     # Timeout for getting connection from pool\n    max_overflow=0,      # No overflow connections\n    echo=False          # Set to True for SQL logging if needed\n)\n\ndef parse_tabular_data(tabular_string: str) -> list:\n    \"\"\"\n    Parse tabular string format into list of dictionaries\n    Format: 'column1 | column2\\\\nvalue1 | value2\\\\n...'\n    \"\"\"\n    if not tabular_string or tabular_string.strip() == '':\n        return []\n    \n    try:\n        lines = tabular_string.strip().split('\\\\n')\n        if len(lines) < 2:\n            return []\n        \n        # First line contains headers\n        headers = [h.strip() for h in lines[0].split('|')]\n        \n        # Remaining lines contain data\n        result = []\n        for line in lines[1:]:\n            if line.strip():\n                values = [v.strip() for v in line.split('|')]\n                if len(values) == len(headers):\n                    row = {}\n                    for i, header in enumerate(headers):\n                        value = values[i]\n                        # Try to convert to number if possible\n                        try:\n                            if '.' in value:\n                                value = float(value)\n                            else:\n                                value = int(value)\n                        except ValueError:\n                            pass  # Keep as string\n                        row[header] = value\n                    result.append(row)\n        return result\n    except Exception as e:\n        print(f\"Error parsing tabular data: {e}\")\n        return []\n\ndef run_schema_migrations():\n    \"\"\"\n    Idempotent schema migration to handle JSONB question field transition\n    \"\"\"\n    with engine.begin() as conn:\n        inspector = inspect(engine)\n        \n        # Check if problems table exists\n        if 'problems' not in inspector.get_table_names():\n            print(\"Problems table doesn't exist, will be created by create_tables()\")\n            return\n        \n        # Get current columns\n        columns = [col['name'] for col in inspector.get_columns('problems')]\n        \n        # Check if question column exists\n        if 'question' not in columns:\n            print(\"Adding question JSONB column to problems table...\")\n            \n            # Add question column\n            conn.execute(text(\"ALTER TABLE problems ADD COLUMN question JSONB NULL\"))\n            \n            # Migrate data from old columns if they exist\n            legacy_cols = ['description', 'schema', 'expected_output']\n            existing_legacy = [col for col in legacy_cols if col in columns]\n            \n            if existing_legacy:\n                print(f\"Migrating data from legacy columns: {existing_legacy}\")\n                \n                # First, get all the data that needs migration\n                result = conn.execute(text(\"SELECT id, description, schema, expected_output FROM problems WHERE question IS NULL\"))\n                problems = result.fetchall()\n                \n                for problem in problems:\n                    problem_id, description, schema, expected_output = problem\n                    \n                    # Parse expected_output from tabular format to list of dicts\n                    parsed_output = parse_tabular_data(expected_output or '')\n                    \n                    # Create the question JSONB object\n                    question_data = {\n                        'description': description or '',\n                        'tables': [],  # Schema parsing would need more complex logic\n                        'expectedOutput': parsed_output\n                    }\n                    \n                    # Update the specific row\n                    conn.execute(text(\"\"\"\n                        UPDATE problems \n                        SET question = :question_data\n                        WHERE id = :problem_id\n                    \"\"\"), {'question_data': question_data, 'problem_id': problem_id})\n                \n                # Drop old columns\n                for col in existing_legacy:\n                    print(f\"Dropping legacy column: {col}\")\n                    conn.execute(text(f\"ALTER TABLE problems DROP COLUMN IF EXISTS {col}\"))\n            \n            # Make question NOT NULL\n            conn.execute(text(\"ALTER TABLE problems ALTER COLUMN question SET NOT NULL\"))\n            print(\"Schema migration completed successfully!\")\n        else:\n            # Check if we need to fix existing data with incorrect expectedOutput format\n            result = conn.execute(text(\"\"\"\n                SELECT id, question \n                FROM problems \n                WHERE jsonb_typeof(question->'expectedOutput') = 'string'\n            \"\"\"))\n            problems_to_fix = result.fetchall()\n            \n            if problems_to_fix:\n                print(f\"Fixing {len(problems_to_fix)} problems with incorrect expectedOutput format...\")\n                for problem_id, question_json in problems_to_fix:\n                    # Parse the string expectedOutput to proper list format\n                    expected_output_str = question_json.get('expectedOutput', '')\n                    parsed_output = parse_tabular_data(expected_output_str)\n                    \n                    # Update the expectedOutput field\n                    conn.execute(text(\"\"\"\n                        UPDATE problems \n                        SET question = jsonb_set(question, '$.expectedOutput', :new_output)\n                        WHERE id = :problem_id\n                    \"\"\"), {'new_output': json.dumps(parsed_output), 'problem_id': problem_id})\n                print(\"Fixed incorrect expectedOutput formats!\")\n            else:\n                print(\"Question column already exists, no migration needed\")\n\n# Create session factory\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n# Create all tables\ndef create_tables():\n    \"\"\"Create all tables including new enhanced schema tables\"\"\"\n    # First create enum types if they don't exist\n    create_enum_types()\n    \n    # Then create all tables\n    Base.metadata.create_all(bind=engine)\n    print(\"✅ All database tables created successfully\")\n    \n    # Initialize enhanced schema with sample data\n    initialize_enhanced_schema()\n\ndef create_enum_types():\n    \"\"\"Create PostgreSQL enum types if they don't exist\"\"\"\n    with engine.begin() as conn:\n        # Create difficulty_level enum\n        conn.execute(text(\"\"\"\n            DO $$ BEGIN\n                CREATE TYPE difficulty_level AS ENUM ('Beginner', 'Easy', 'Medium', 'Hard', 'Expert');\n            EXCEPTION\n                WHEN duplicate_object THEN null;\n            END $$;\n        \"\"\"))\n        \n        # Create execution_status enum\n        conn.execute(text(\"\"\"\n            DO $$ BEGIN\n                CREATE TYPE execution_status AS ENUM ('SUCCESS', 'ERROR', 'TIMEOUT', 'MEMORY_LIMIT');\n            EXCEPTION\n                WHEN duplicate_object THEN null;\n            END $$;\n        \"\"\"))\n        \n        # Create sandbox_status enum\n        conn.execute(text(\"\"\"\n            DO $$ BEGIN\n                CREATE TYPE sandbox_status AS ENUM ('ACTIVE', 'EXPIRED', 'CLEANUP_PENDING');\n            EXCEPTION\n                WHEN duplicate_object THEN null;\n            END $$;\n        \"\"\"))\n        \n        print(\"✅ PostgreSQL enum types created successfully\")\n\ndef initialize_enhanced_schema():\n    \"\"\"Initialize the enhanced schema with sample data - handles topics and badges independently\"\"\"\n    from .models import Topic, Badge, DifficultyLevel\n    \n    # Create a database session\n    db = SessionLocal()\n    \n    try:\n        topics_created = 0\n        badges_created = 0\n        \n        # Initialize Topics independently\n        try:\n            if db.query(Topic).count() == 0:\n                print(\"Initializing sample topics...\")\n                \n                topics = [\n                    Topic(\n                        name=\"Basic SELECT Queries\",\n                        description=\"Learn fundamental SELECT statements, filtering, and sorting\",\n                        difficulty_level=DifficultyLevel.BEGINNER,\n                        order_index=1\n                    ),\n                    Topic(\n                        name=\"Joins and Relationships\",\n                        description=\"Master INNER, LEFT, RIGHT, and FULL joins\",\n                        difficulty_level=DifficultyLevel.EASY,\n                        order_index=2\n                    ),\n                    Topic(\n                        name=\"Aggregate Functions\",\n                        description=\"COUNT, SUM, AVG, MIN, MAX and GROUP BY clauses\",\n                        difficulty_level=DifficultyLevel.MEDIUM,\n                        order_index=3\n                    ),\n                    Topic(\n                        name=\"Subqueries and CTEs\",\n                        description=\"Complex nested queries and Common Table Expressions\",\n                        difficulty_level=DifficultyLevel.HARD,\n                        order_index=4\n                    ),\n                    Topic(\n                        name=\"Advanced Performance\",\n                        description=\"Query optimization, indexing, and window functions\",\n                        difficulty_level=DifficultyLevel.EXPERT,\n                        order_index=5\n                    )\n                ]\n                \n                db.add_all(topics)\n                db.commit()\n                topics_created = len(topics)\n                print(f\"✅ Created {topics_created} topics\")\n            else:\n                print(\"Topics already exist, skipping topic initialization\")\n        except Exception as e:\n            print(f\"❌ Error initializing topics: {e}\")\n            db.rollback()\n        \n        # Initialize Badges independently\n        try:\n            if db.query(Badge).count() == 0:\n                print(\"Initializing sample badges...\")\n                \n                badges = [\n                    Badge(\n                        name=\"First Steps\",\n                        description=\"Complete your first SQL query\",\n                        criteria={\"first_successful_submission\": True},\n                        points_reward=10,\n                        rarity=\"common\"\n                    ),\n                    Badge(\n                        name=\"Problem Solver\",\n                        description=\"Solve 10 problems\",\n                        criteria={\"problems_solved\": 10},\n                        points_reward=50,\n                        rarity=\"common\"\n                    ),\n                    Badge(\n                        name=\"Speed Demon\",\n                        description=\"Execute a query in under 100ms\",\n                        criteria={\"execution_time_ms\": {\"<\": 100}},\n                        points_reward=25,\n                        rarity=\"rare\"\n                    ),\n                    Badge(\n                        name=\"Master\",\n                        description=\"Solve 5 Expert level problems\",\n                        criteria={\"expert_problems_solved\": 5},\n                        points_reward=200,\n                        rarity=\"legendary\"\n                    )\n                ]\n                \n                db.add_all(badges)\n                db.commit()\n                badges_created = len(badges)\n                print(f\"✅ Created {badges_created} badges\")\n            else:\n                print(\"Badges already exist, skipping badge initialization\")\n        except Exception as e:\n            print(f\"❌ Error initializing badges: {e}\")\n            db.rollback()\n        \n        if topics_created == 0 and badges_created == 0:\n            print(\"Enhanced schema already fully initialized\")\n        else:\n            print(f\"Enhanced schema initialization complete: {topics_created} topics, {badges_created} badges\")\n        \n    except Exception as e:\n        print(f\"❌ Error in enhanced schema initialization: {e}\")\n        db.rollback()\n    finally:\n        db.close()\n\n# Dependency to get database session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()","size_bytes":13484},"api/main.py":{"content":"\"\"\"\nFastAPI application - converted from Express.js backend\n\"\"\"\nimport os\nfrom typing import List, Optional\nfrom fastapi import FastAPI, Depends, HTTPException, status, Query\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse\nfrom sqlalchemy.orm import Session, joinedload\nfrom sqlalchemy import func, case, and_, desc, Boolean, Integer\nfrom datetime import timedelta\nimport random\n\nfrom .database import get_db, create_tables\nfrom .models import User, Problem, Submission, CommunityPost, PostLike, PostComment\nfrom .schemas import (UserCreate, UserResponse, UserLogin, LoginResponse,\n                      RegisterResponse, ProblemResponse, SubmissionCreate,\n                      SubmissionResponse, CommunityPostCreate,\n                      CommunityPostResponse, PostCommentCreate,\n                      PostCommentResponse)\nfrom .auth import (get_password_hash, verify_password, create_access_token,\n                   get_current_user, get_current_user_optional)\nfrom .secure_execution import secure_executor\nfrom .sandbox_routes import sandbox_router\n\n# Create FastAPI app\napp = FastAPI(title=\"SQLGym API\",\n              description=\"A gamified SQL learning platform API\",\n              version=\"1.0.0\")\n\n# Add CORS middleware\nfrontend_origins = [\n    \"http://localhost:5000\", \"https://*.replit.dev\", \"https://*.replit.app\",\n    \"https://*.replit.co\"\n]\n\n# In production, use environment variable or specific domain\nif os.getenv(\"REPL_ID\"):\n    repl_id = os.getenv(\"REPL_ID\")\n    username = os.getenv(\"REPL_OWNER\", \"user\")\n    frontend_origins.extend([\n        f\"https://{repl_id}--{username}.replit.app\",\n        f\"https://{repl_id}.{username}.replit.dev\"\n    ])\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=frontend_origins,\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"],\n    allow_headers=[\"*\"],\n)\n\n# Include routers\napp.include_router(sandbox_router)\n\n\ndef format_console_output(execution_result):\n    \"\"\"Create lightweight console output for errors and metadata\"\"\"\n    if not execution_result.get('success'):\n        error_msg = execution_result.get('error', 'Unknown error')\n        return f\"ERROR: {error_msg}\"\n    \n    # Extract results from query_result structure returned by secure_executor\n    query_result = execution_result.get('query_result', {})\n    results = query_result.get('result', []) if query_result else []\n    exec_time = query_result.get('execution_time_ms', 0) if query_result else 0\n    \n    if not results:\n        return f\"Query executed successfully.\\n0 rows returned.\\nExecution time: {exec_time}ms\"\n    \n    return f\"Query executed successfully.\\n{len(results)} rows returned.\\nExecution time: {exec_time}ms\"\n\n\n# Create tables on startup\n@app.on_event(\"startup\")\ndef startup_event():\n    from .database import run_schema_migrations\n    run_schema_migrations()  # Run migrations first\n    create_tables()  # Then create any missing tables\n\n\n# Development/fallback root endpoint\n# Health check endpoint\n@app.get(\"/api/health\")\ndef health_check():\n    return {\"status\": \"healthy\", \"service\": \"SQLGym API\", \"version\": \"1.0.0\"}\n\n\n# Development/fallback root endpoint\n@app.get(\"/\")\ndef read_root():\n    if os.path.exists(\"dist/public/index.html\"):\n        return FileResponse(\"dist/public/index.html\")\n    return {\n        \"message\": \"SQLGym FastAPI Backend - Please run 'npm run build' first\"\n    }\n\n\n# Mount static assets for production\nif os.path.exists(\"dist/public/assets\"):\n    app.mount(\"/assets\",\n              StaticFiles(directory=\"dist/public/assets\"),\n              name=\"assets\")\n\n\n# Authentication endpoints\n@app.post(\"/api/auth/register\",\n          response_model=RegisterResponse,\n          response_model_by_alias=True)\ndef register(user_data: UserCreate, db: Session = Depends(get_db)):\n    # Check if user already exists\n    existing_user = db.query(User).filter(\n        User.email == user_data.email).first()\n    if existing_user:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail=\"User already exists\")\n\n    # Check if username is taken\n    existing_username = db.query(User).filter(\n        User.username == user_data.username).first()\n    if existing_username:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail=\"Username already taken\")\n\n    # Hash password if provided\n    password_hash = None\n    if user_data.password is not None:\n        password_hash = get_password_hash(user_data.password)\n\n    # Create user\n    user = User(username=user_data.username,\n                email=user_data.email,\n                password_hash=password_hash,\n                first_name=user_data.first_name,\n                last_name=user_data.last_name,\n                profile_image_url=user_data.profile_image_url,\n                google_id=user_data.google_id,\n                github_id=user_data.github_id,\n                auth_provider=user_data.auth_provider)\n\n    db.add(user)\n    db.commit()\n    db.refresh(user)\n\n    # Generate JWT token\n    access_token = create_access_token(data={\n        \"userId\": user.id,\n        \"username\": user.username\n    })\n\n    return RegisterResponse(token=access_token,\n                            user=UserResponse.from_orm(user))\n\n\n@app.post(\"/api/auth/login\",\n          response_model=LoginResponse,\n          response_model_by_alias=True)\ndef login(login_data: UserLogin, db: Session = Depends(get_db)):\n    # Find user by email\n    user = db.query(User).filter(User.email == login_data.email).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                            detail=\"Invalid credentials\")\n\n    # Verify password\n    if not user.password_hash or not verify_password(login_data.password,\n                                                     user.password_hash):\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                            detail=\"Invalid credentials\")\n\n    # Generate JWT token\n    access_token = create_access_token(data={\n        \"userId\": user.id,\n        \"username\": user.username\n    })\n\n    return LoginResponse(token=access_token, user=UserResponse.from_orm(user))\n\n\n@app.get(\"/api/auth/user\",\n         response_model=UserResponse,\n         response_model_by_alias=True)\ndef get_current_user_info(current_user: User = Depends(get_current_user)):\n    return UserResponse.from_orm(current_user)\n\n\n# Problem endpoints\n@app.get(\"/api/problems\",\n         response_model=List[ProblemResponse],\n         response_model_by_alias=True)\ndef get_problems(\n        difficulty: Optional[str] = Query(None),\n        company: Optional[str] = Query(None),\n        current_user: Optional[User] = Depends(get_current_user_optional),\n        db: Session = Depends(get_db)):\n    # Base query with solved count\n    query = db.query(\n        Problem,\n        func.coalesce(\n            func.count(\n                case((Submission.is_correct == True, Submission.user_id),\n                     else_=None).distinct()),\n            0).label(\"solved_count\")).outerjoin(Submission)\n\n    # Add user-specific solved status if authenticated\n    if current_user:\n        query = query.add_columns(\n            func.coalesce(\n                func.max(\n                    case((and_(Submission.user_id == current_user.id,\n                               Submission.is_correct == True), 1),\n                         else_=0)), 0).label(\"is_user_solved\"))\n    else:\n        query = query.add_columns(\n            func.cast(0, Integer).label(\"is_user_solved\"))\n\n    # Apply difficulty filter\n    if difficulty:\n        query = query.filter(Problem.difficulty == difficulty)\n\n    # Apply company filter\n    if company:\n        query = query.filter(Problem.company == company)\n\n    # Group by problem and order by title\n    results = query.group_by(Problem.id).order_by(Problem.title).all()\n\n    # Format response\n    problems = []\n    for problem, solved_count, is_user_solved in results:\n        problem_data = ProblemResponse.from_orm(problem)\n        problem_data.solved_count = int(solved_count)\n        problem_data.is_user_solved = bool(\n            is_user_solved) if current_user else False\n        problems.append(problem_data)\n\n    return problems\n\n\n@app.get(\"/api/problems/{problem_id}\",\n         response_model=ProblemResponse,\n         response_model_by_alias=True)\ndef get_problem(problem_id: str, db: Session = Depends(get_db)):\n    problem = db.query(Problem).filter(Problem.id == problem_id).first()\n    if not problem:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=\"Problem not found\")\n    return ProblemResponse.from_orm(problem)\n\n\n# New secure execution endpoints\n@app.post(\"/api/problems/{problem_id}/submit\")\nasync def submit_solution(problem_id: str,\n                          query_data: dict,\n                          current_user: User = Depends(get_current_user),\n                          db: Session = Depends(get_db)):\n    \"\"\"Submit and execute SQL query for final evaluation\"\"\"\n    query = query_data.get(\"query\", \"\").strip()\n\n    if not query:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail=\"Query is required\")\n\n    result = await secure_executor.submit_solution(current_user.id, problem_id,\n                                                   query, db)\n\n    if not result['success']:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail=result.get('feedback',\n                                              ['Submission failed'])[0])\n\n    # Add console output to submission response\n    result['console_output'] = format_console_output(result)\n    return result\n\n\n@app.get(\"/api/problems/{problem_id}/sandbox\")\nasync def get_or_create_sandbox(problem_id: str,\n                                current_user: User = Depends(get_current_user),\n                                db: Session = Depends(get_db)):\n    \"\"\"Get or create user sandbox for a problem\"\"\"\n    from .sandbox_manager import create_user_sandbox\n    from .models import UserSandbox, SandboxStatus\n\n    # Check for existing active sandbox\n    existing_sandbox = db.query(UserSandbox).filter(\n        UserSandbox.user_id == current_user.id,\n        UserSandbox.problem_id == problem_id,\n        UserSandbox.status == SandboxStatus.ACTIVE.value).first()\n\n    if existing_sandbox:\n        return {\n            \"sandbox_id\": existing_sandbox.id,\n            \"status\": existing_sandbox.status,\n            \"expires_at\": existing_sandbox.expires_at.isoformat(),\n            \"created_at\": existing_sandbox.created_at.isoformat()\n        }\n\n    # Create new sandbox\n    try:\n        sandbox = await create_user_sandbox(current_user.id, problem_id)\n        return {\n            \"sandbox_id\": sandbox.id,\n            \"status\": sandbox.status,\n            \"expires_at\": sandbox.expires_at.isoformat(),\n            \"created_at\": sandbox.created_at.isoformat()\n        }\n    except Exception as e:\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n                            detail=f\"Failed to create sandbox: {str(e)}\")\n\n\n@app.post(\"/api/problems/{problem_id}/test\")\nasync def test_query(problem_id: str,\n                     query_data: dict,\n                     current_user: User = Depends(get_current_user),\n                     db: Session = Depends(get_db)):\n    \"\"\"Test query without submitting (practice mode)\"\"\"\n    query = query_data.get(\"query\", \"\").strip()\n    include_hidden = query_data.get(\"include_hidden\", False)\n\n    if not query:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail=\"Query is required\")\n\n    result = await secure_executor.test_query(current_user.id, problem_id,\n                                              query, db, include_hidden)\n\n    # Extract results from nested query_result structure\n    query_result = result.get('query_result', {})\n    results_data = query_result.get('result', []) if query_result else []\n    execution_time = query_result.get('execution_time_ms', 0) if query_result else 0\n    \n    return {\n        \"success\": result['success'],\n        \"results\": results_data,  # Raw data for table\n        \"execution_time_ms\": execution_time,\n        \"rows_affected\": len(results_data),\n        \"console_info\": format_console_output(result),  # Just metadata\n        \"feedback\": result.get('feedback', []),\n        \"test_results\": result.get('test_results', []),\n        \"error\": result.get('error')\n    }\n\n\n@app.get(\"/api/user/progress\")\nasync def get_user_progress(current_user: User = Depends(get_current_user),\n                            db: Session = Depends(get_db)):\n    \"\"\"Get comprehensive user progress statistics\"\"\"\n    result = await secure_executor.get_user_progress(current_user.id, db)\n\n    if not result['success']:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=result.get('error',\n                                              'Progress data not found'))\n\n    return result\n\n\n# Submission endpoints\n@app.post(\"/api/submissions\",\n          response_model=SubmissionResponse,\n          response_model_by_alias=True)\ndef create_submission(submission_data: SubmissionCreate,\n                      current_user: User = Depends(get_current_user),\n                      db: Session = Depends(get_db)):\n    # Simulate SQL query execution (simplified version)\n    problem = db.query(Problem).filter(\n        Problem.id == submission_data.problem_id).first()\n    if not problem:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=\"Problem not found\")\n\n    # Simple validation logic (same as Express.js version)\n    is_correct = simulate_query_execution(submission_data.query, problem)\n    execution_time = random.randint(50, 550)  # Random execution time\n\n    # Create submission\n    submission = Submission(user_id=current_user.id,\n                            problem_id=submission_data.problem_id,\n                            query=submission_data.query,\n                            is_correct=is_correct,\n                            execution_time=execution_time)\n\n    db.add(submission)\n\n    # If correct, update user progress\n    if is_correct:\n        current_user.problems_solved = (current_user.problems_solved or 0) + 1\n\n    db.commit()\n    db.refresh(submission)\n\n    return SubmissionResponse.from_orm(submission)\n\n\n@app.get(\"/api/submissions/user/{user_id}\",\n         response_model=List[SubmissionResponse],\n         response_model_by_alias=True)\ndef get_user_submissions(user_id: str,\n                         current_user: User = Depends(get_current_user),\n                         db: Session = Depends(get_db)):\n    # Users can only view their own submissions\n    if user_id != current_user.id:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,\n                            detail=\"Access denied\")\n\n    submissions = db.query(Submission).filter(\n        Submission.user_id == user_id).order_by(desc(\n            Submission.submitted_at)).all()\n\n    return [SubmissionResponse.from_orm(sub) for sub in submissions]\n\n\n# Leaderboard endpoint\n@app.get(\"/api/leaderboard\",\n         response_model=List[UserResponse],\n         response_model_by_alias=True)\ndef get_leaderboard(limit: Optional[int] = Query(50),\n                    db: Session = Depends(get_db)):\n    users = db.query(User).order_by(desc(\n        User.problems_solved)).limit(limit).all()\n\n    return [UserResponse.from_orm(user) for user in users]\n\n\n# Community endpoints\n@app.get(\"/api/community/posts\",\n         response_model=List[CommunityPostResponse],\n         response_model_by_alias=True)\ndef get_community_posts(db: Session = Depends(get_db)):\n    posts = db.query(CommunityPost).options(joinedload(\n        CommunityPost.user)).order_by(desc(CommunityPost.created_at)).all()\n\n    return [CommunityPostResponse.from_orm(post) for post in posts]\n\n\n@app.post(\"/api/community/posts\",\n          response_model=CommunityPostResponse,\n          response_model_by_alias=True)\ndef create_community_post(post_data: CommunityPostCreate,\n                          current_user: User = Depends(get_current_user),\n                          db: Session = Depends(get_db)):\n    post = CommunityPost(user_id=current_user.id,\n                         content=post_data.content,\n                         code_snippet=post_data.code_snippet)\n\n    db.add(post)\n    db.commit()\n    db.refresh(post)\n\n    # Load user relationship\n    post = db.query(CommunityPost).options(joinedload(\n        CommunityPost.user)).filter(CommunityPost.id == post.id).first()\n\n    return CommunityPostResponse.from_orm(post)\n\n\n@app.post(\"/api/community/posts/{post_id}/like\")\ndef like_post(post_id: str,\n              current_user: User = Depends(get_current_user),\n              db: Session = Depends(get_db)):\n    # Check if already liked\n    existing_like = db.query(PostLike).filter(\n        and_(PostLike.user_id == current_user.id,\n             PostLike.post_id == post_id)).first()\n\n    if existing_like:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail=\"Post already liked\")\n\n    # Create like\n    like = PostLike(user_id=current_user.id, post_id=post_id)\n    db.add(like)\n\n    # Update post likes count\n    post = db.query(CommunityPost).filter(CommunityPost.id == post_id).first()\n    if post:\n        post.likes = (post.likes or 0) + 1\n\n    db.commit()\n    return {\"message\": \"Post liked successfully\"}\n\n\n@app.delete(\"/api/community/posts/{post_id}/like\")\ndef unlike_post(post_id: str,\n                current_user: User = Depends(get_current_user),\n                db: Session = Depends(get_db)):\n    # Find and delete like\n    like = db.query(PostLike).filter(\n        and_(PostLike.user_id == current_user.id,\n             PostLike.post_id == post_id)).first()\n\n    if not like:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=\"Like not found\")\n\n    db.delete(like)\n\n    # Update post likes count\n    post = db.query(CommunityPost).filter(CommunityPost.id == post_id).first()\n    if post:\n        post.likes = max(0, (post.likes or 0) - 1)\n\n    db.commit()\n    return {\"message\": \"Post unliked successfully\"}\n\n\n@app.get(\"/api/community/posts/{post_id}/comments\",\n         response_model=List[PostCommentResponse],\n         response_model_by_alias=True)\ndef get_post_comments(post_id: str, db: Session = Depends(get_db)):\n    comments = db.query(PostComment).options(joinedload(\n        PostComment.user)).filter(PostComment.post_id == post_id).order_by(\n            PostComment.created_at).all()\n\n    return [PostCommentResponse.from_orm(comment) for comment in comments]\n\n\n@app.post(\"/api/community/posts/{post_id}/comments\",\n          response_model=PostCommentResponse,\n          response_model_by_alias=True)\ndef create_post_comment(post_id: str,\n                        comment_data: PostCommentCreate,\n                        current_user: User = Depends(get_current_user),\n                        db: Session = Depends(get_db)):\n    comment = PostComment(user_id=current_user.id,\n                          post_id=post_id,\n                          content=comment_data.content)\n\n    db.add(comment)\n\n    # Update post comments count\n    post = db.query(CommunityPost).filter(CommunityPost.id == post_id).first()\n    if post:\n        post.comments = (post.comments or 0) + 1\n\n    db.commit()\n    db.refresh(comment)\n\n    # Load user relationship\n    comment = db.query(PostComment).options(joinedload(\n        PostComment.user)).filter(PostComment.id == comment.id).first()\n\n    return PostCommentResponse.from_orm(comment)\n\n\n# Helper function for query simulation\ndef simulate_query_execution(query: str, problem: Problem) -> bool:\n    \"\"\"\n    Simplified query validation (same logic as Express.js version)\n    \"\"\"\n    normalized_query = query.lower().strip()\n\n    # Basic checks for different problem types\n    if \"sum\" in problem.title.lower():\n        return (\"select\" in normalized_query and \"from\" in normalized_query\n                and (\"sum\" in normalized_query or \"+\" in normalized_query))\n\n    if \"join\" in problem.title.lower():\n        return (\"select\" in normalized_query and \"from\" in normalized_query\n                and \"join\" in normalized_query)\n\n    # Default validation: must contain SELECT and FROM\n    return \"select\" in normalized_query and \"from\" in normalized_query\n\n\n# SPA fallback route - handle all non-API routes (must be last)\n# SPA fallback route - handle all non-API routes (must be last)\n@app.get(\"/{full_path:path}\")\ndef spa_fallback(full_path: str):\n    # Don't handle API routes\n    if full_path.startswith(\"api/\"):\n        raise HTTPException(status_code=404, detail=\"API endpoint not found\")\n\n    # Don't handle asset files\n    if full_path.startswith(\"assets/\") or \".\" in full_path.split(\"/\")[-1]:\n        raise HTTPException(status_code=404, detail=\"File not found\")\n\n    # Serve SPA for all other routes\n    index_path = \"dist/public/index.html\"\n    if os.path.exists(index_path):\n        return FileResponse(index_path)\n\n    # Fallback if no built frontend\n    raise HTTPException(status_code=404, detail=\"Frontend not built\")\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n    port = int(os.getenv(\"PORT\", 8000))\n    host = \"0.0.0.0\" if os.getenv(\"REPL_ID\") else \"127.0.0.1\"\n    uvicorn.run(app, host=host, port=port)\n","size_bytes":21655},"api/models.py":{"content":"\"\"\"\nSQLAlchemy models for the PostgreSQL database schema\n\"\"\"\nfrom sqlalchemy import Column, String, Text, Integer, Boolean, DateTime, ForeignKey, Float, Enum, Index, UniqueConstraint\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom sqlalchemy.dialects.postgresql import JSON, JSONB, ENUM\nimport uuid\nimport enum\n\nBase = declarative_base()\n\n# Named Postgres enums for better type safety and performance\n# Python enums for reference\nclass DifficultyLevel(enum.Enum):\n    BEGINNER = \"Beginner\"\n    EASY = \"Easy\"\n    MEDIUM = \"Medium\"\n    HARD = \"Hard\"\n    EXPERT = \"Expert\"\n\nclass ExecutionStatus(enum.Enum):\n    SUCCESS = \"SUCCESS\"\n    ERROR = \"ERROR\"\n    TIMEOUT = \"TIMEOUT\"\n    MEMORY_LIMIT = \"MEMORY_LIMIT\"\n\nclass SandboxStatus(enum.Enum):\n    ACTIVE = \"ACTIVE\"\n    EXPIRED = \"EXPIRED\"\n    CLEANUP_PENDING = \"CLEANUP_PENDING\"\n\n# Create named Postgres enums\ndifficulty_enum = ENUM(\n    'Beginner', 'Easy', 'Medium', 'Hard', 'Expert',\n    name='difficulty_level',\n    create_type=False\n)\n\nexecution_status_enum = ENUM(\n    'SUCCESS', 'ERROR', 'TIMEOUT', 'MEMORY_LIMIT',\n    name='execution_status',\n    create_type=False\n)\n\nsandbox_status_enum = ENUM(\n    'ACTIVE', 'EXPIRED', 'CLEANUP_PENDING',\n    name='sandbox_status',\n    create_type=False\n)\n\nclass User(Base):\n    __tablename__ = \"users\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    username = Column(String(50), unique=True, nullable=False)\n    email = Column(String(255), unique=True, nullable=False)\n    password_hash = Column(Text, name=\"password_hash\")\n    first_name = Column(String(50), name=\"first_name\")\n    last_name = Column(String(50), name=\"last_name\")\n    profile_image_url = Column(Text, name=\"profile_image_url\")\n    google_id = Column(String(255), unique=True, name=\"google_id\")\n    github_id = Column(String(255), unique=True, name=\"github_id\")\n    auth_provider = Column(String(20), default=\"email\", nullable=False, name=\"auth_provider\")\n    problems_solved = Column(Integer, default=0, nullable=False, name=\"problems_solved\")\n    created_at = Column(DateTime, default=func.now(), nullable=False, name=\"created_at\")\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now(), nullable=False, name=\"updated_at\")\n    \n    # Relationships\n    submissions = relationship(\"Submission\", back_populates=\"user\")\n    community_posts = relationship(\"CommunityPost\", back_populates=\"user\")\n    post_likes = relationship(\"PostLike\", back_populates=\"user\")\n    post_comments = relationship(\"PostComment\", back_populates=\"user\")\n    sandboxes = relationship(\"UserSandbox\", back_populates=\"user\")\n    progress = relationship(\"UserProgress\", back_populates=\"user\")\n    user_badges = relationship(\"UserBadge\", back_populates=\"user\")\n\nclass Problem(Base):\n    __tablename__ = \"problems\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    title = Column(String(200), nullable=False)\n    difficulty = Column(String(20), nullable=False)  # Easy, Medium, Hard\n\n    # Match DB schema: json (not jsonb)\n    tags = Column(JSON, default=list, nullable=False)\n    company = Column(String(100), nullable=True)\n    hints = Column(JSON, default=list, nullable=False)\n\n    # Match DB schema: jsonb\n    question = Column(JSONB, nullable=False)  # description, schema, expected_output\n\n    created_at = Column(DateTime, default=func.now(), nullable=False, name=\"created_at\")\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now(), nullable=False, name=\"updated_at\")\n    \n    # Relationships\n    submissions = relationship(\"Submission\", back_populates=\"problem\")\n    test_cases = relationship(\"TestCase\", back_populates=\"problem\")\n    schemas = relationship(\"ProblemSchema\", back_populates=\"problem\")\n    sandboxes = relationship(\"UserSandbox\", back_populates=\"problem\")\n    topic_id = Column(String, ForeignKey(\"topics.id\", ondelete=\"SET NULL\"))\n    topic = relationship(\"Topic\", back_populates=\"problems\")\n    \n    # Indexes for performance\n    __table_args__ = (\n        Index('idx_problems_difficulty', 'difficulty'),\n        Index('idx_problems_company', 'company'),\n        Index('idx_problems_topic_id', 'topic_id'),\n        Index('idx_problems_created_at', 'created_at'),\n    )\n\nclass Submission(Base):\n    __tablename__ = \"submissions\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_id = Column(String, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), nullable=False, name=\"user_id\")\n    problem_id = Column(String, ForeignKey(\"problems.id\", ondelete=\"CASCADE\"), nullable=False, name=\"problem_id\")\n    query = Column(Text, nullable=False)\n    is_correct = Column(Boolean, nullable=False, name=\"is_correct\")\n    execution_time = Column(Integer, name=\"execution_time\")  # in milliseconds\n    submitted_at = Column(DateTime, default=func.now(), nullable=False, name=\"submitted_at\")\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"submissions\")\n    problem = relationship(\"Problem\", back_populates=\"submissions\")\n    execution_results = relationship(\"ExecutionResult\", back_populates=\"submission\")\n    \n    # Indexes for performance\n    __table_args__ = (\n        Index('idx_submissions_user_id', 'user_id'),\n        Index('idx_submissions_problem_id', 'problem_id'),\n        Index('idx_submissions_submitted_at', 'submitted_at'),\n        Index('idx_submissions_is_correct', 'is_correct'),\n    )\n\nclass CommunityPost(Base):\n    __tablename__ = \"community_posts\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_id = Column(String, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), nullable=False, name=\"user_id\")\n    content = Column(Text, nullable=False)\n    code_snippet = Column(Text, name=\"code_snippet\")\n    likes = Column(Integer, default=0, nullable=False)\n    comments = Column(Integer, default=0, nullable=False)\n    created_at = Column(DateTime, default=func.now(), nullable=False, name=\"created_at\")\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now(), nullable=False, name=\"updated_at\")\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"community_posts\")\n    post_likes = relationship(\"PostLike\", back_populates=\"post\")\n    post_comments = relationship(\"PostComment\", back_populates=\"post\")\n\nclass PostLike(Base):\n    __tablename__ = \"post_likes\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_id = Column(String, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), nullable=False, name=\"user_id\")\n    post_id = Column(String, ForeignKey(\"community_posts.id\", ondelete=\"CASCADE\"), nullable=False, name=\"post_id\")\n    created_at = Column(DateTime, default=func.now(), nullable=False, name=\"created_at\")\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"post_likes\")\n    post = relationship(\"CommunityPost\", back_populates=\"post_likes\")\n    \n    # Unique constraint: one like per user per post\n    __table_args__ = (UniqueConstraint('user_id', 'post_id', name='uq_post_likes_user_post'),)\n\nclass PostComment(Base):\n    __tablename__ = \"post_comments\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_id = Column(String, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), nullable=False, name=\"user_id\")\n    post_id = Column(String, ForeignKey(\"community_posts.id\", ondelete=\"CASCADE\"), nullable=False, name=\"post_id\")\n    content = Column(Text, nullable=False)\n    created_at = Column(DateTime, default=func.now(), nullable=False, name=\"created_at\")\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"post_comments\")\n    post = relationship(\"CommunityPost\", back_populates=\"post_comments\")\n\n# New Tables for Enhanced SQL Learning Platform\n\nclass Topic(Base):\n    \"\"\"Topics/Categories to organize problems by SQL concepts\"\"\"\n    __tablename__ = \"topics\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    name = Column(String(100), unique=True, nullable=False)\n    description = Column(Text)\n    difficulty_level = Column(difficulty_enum, nullable=False)\n    order_index = Column(Integer, default=0)  # For ordering topics\n    parent_topic_id = Column(String, ForeignKey(\"topics.id\", ondelete=\"SET NULL\"))  # For subtopics\n    created_at = Column(DateTime, default=func.now(), nullable=False)\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now(), nullable=False)\n    \n    # Relationships\n    parent_topic = relationship(\"Topic\", remote_side=[id])\n    problems = relationship(\"Problem\", back_populates=\"topic\")\n    user_progress = relationship(\"UserProgress\", back_populates=\"topic\")\n\nclass TestCase(Base):\n    \"\"\"Test cases for problems with input data and expected outputs\"\"\"\n    __tablename__ = \"test_cases\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    problem_id = Column(String, ForeignKey(\"problems.id\", ondelete=\"CASCADE\"), nullable=False)\n    name = Column(String(200), nullable=False)\n    description = Column(Text)\n    input_data = Column(JSONB, nullable=False)  # Schema and sample data\n    expected_output = Column(JSONB, nullable=False)  # Expected query results\n    validation_rules = Column(JSONB, default=dict)  # Custom validation logic\n    is_hidden = Column(Boolean, default=False)  # Hidden test cases for evaluation\n    order_index = Column(Integer, default=0)\n    timeout_seconds = Column(Integer, default=30)\n    memory_limit_mb = Column(Integer, default=256)\n    created_at = Column(DateTime, default=func.now(), nullable=False)\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now(), nullable=False)\n    \n    # Relationships\n    problem = relationship(\"Problem\", back_populates=\"test_cases\")\n    execution_results = relationship(\"ExecutionResult\", back_populates=\"test_case\")\n    \n    # Unique constraint: unique name per problem\n    __table_args__ = (UniqueConstraint('problem_id', 'name', name='uq_test_cases_problem_name'),)\n\nclass ProblemSchema(Base):\n    \"\"\"Define table structures that problems will use\"\"\"\n    __tablename__ = \"problem_schemas\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    problem_id = Column(String, ForeignKey(\"problems.id\", ondelete=\"CASCADE\"), nullable=False)\n    table_name = Column(String(100), nullable=False)\n    schema_definition = Column(JSONB, nullable=False)  # Table structure with columns, types, constraints\n    sample_data = Column(JSONB, default=list)  # Sample rows for the table\n    indexes = Column(JSON, default=list)  # Index definitions\n    constraints = Column(JSON, default=list)  # FK, CHECK constraints etc\n    created_at = Column(DateTime, default=func.now(), nullable=False)\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now(), nullable=False)\n    \n    # Relationships\n    problem = relationship(\"Problem\", back_populates=\"schemas\")\n    \n    # Unique constraint: unique table_name per problem\n    __table_args__ = (UniqueConstraint('problem_id', 'table_name', name='uq_problem_schemas_problem_table'),)\n\nclass ExecutionResult(Base):\n    \"\"\"Track detailed query execution results\"\"\"\n    __tablename__ = \"execution_results\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    submission_id = Column(String, ForeignKey(\"submissions.id\", ondelete=\"CASCADE\"), nullable=False)\n    test_case_id = Column(String, ForeignKey(\"test_cases.id\", ondelete=\"CASCADE\"), nullable=False)\n    user_sandbox_id = Column(String, ForeignKey(\"user_sandboxes.id\", ondelete=\"CASCADE\"), nullable=False)\n    \n    # Execution details\n    status = Column(execution_status_enum, nullable=False)\n    execution_time_ms = Column(Integer)  # Actual execution time\n    memory_used_mb = Column(Float)  # Memory consumption\n    rows_affected = Column(Integer)  # For DML queries\n    query_result = Column(JSONB)  # Actual query output\n    error_message = Column(Text)  # Error details if any\n    \n    # Performance metrics\n    cpu_time_ms = Column(Integer)\n    io_operations = Column(Integer)\n    query_plan = Column(JSONB)  # EXPLAIN output\n    \n    # Validation\n    is_correct = Column(Boolean, nullable=False)\n    validation_details = Column(JSONB)  # Detailed comparison results\n    \n    created_at = Column(DateTime, default=func.now(), nullable=False)\n    \n    # Relationships\n    submission = relationship(\"Submission\", back_populates=\"execution_results\")\n    test_case = relationship(\"TestCase\", back_populates=\"execution_results\")\n    user_sandbox = relationship(\"UserSandbox\", back_populates=\"execution_results\")\n\nclass UserSandbox(Base):\n    \"\"\"Manage temporary database instances for users\"\"\"\n    __tablename__ = \"user_sandboxes\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_id = Column(String, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), nullable=False)\n    problem_id = Column(String, ForeignKey(\"problems.id\", ondelete=\"CASCADE\"), nullable=False)\n    \n    # Sandbox details\n    database_name = Column(String(100), unique=True, nullable=False)\n    # Remove connection_string for security - use database_name with environment config instead\n    # connection_string = Column(Text, nullable=False)  # REMOVED: Security risk\n    status = Column(sandbox_status_enum, default=SandboxStatus.ACTIVE.value, nullable=False)\n    \n    # Resource limits\n    max_execution_time_seconds = Column(Integer, default=30)\n    max_memory_mb = Column(Integer, default=256)\n    max_connections = Column(Integer, default=5)\n    \n    # Lifecycle management\n    created_at = Column(DateTime, default=func.now(), nullable=False)\n    last_accessed_at = Column(DateTime, default=func.now(), nullable=False)\n    expires_at = Column(DateTime, nullable=False)  # Auto-cleanup after expiry\n    cleanup_scheduled_at = Column(DateTime)\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"sandboxes\")\n    problem = relationship(\"Problem\", back_populates=\"sandboxes\")\n    execution_results = relationship(\"ExecutionResult\", back_populates=\"user_sandbox\")\n    \n    # Indexes for performance\n    __table_args__ = (\n        Index('idx_user_sandboxes_user_id', 'user_id'),\n        Index('idx_user_sandboxes_problem_id', 'problem_id'),\n        Index('idx_user_sandboxes_status', 'status'),\n        Index('idx_user_sandboxes_expires_at', 'expires_at'),\n    )\n\nclass UserProgress(Base):\n    \"\"\"Track user statistics and problem-solving progress\"\"\"\n    __tablename__ = \"user_progress\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_id = Column(String, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), nullable=False)\n    topic_id = Column(String, ForeignKey(\"topics.id\", ondelete=\"CASCADE\"), nullable=False)\n    \n    # Progress metrics\n    problems_attempted = Column(Integer, default=0)\n    problems_solved = Column(Integer, default=0)\n    total_submissions = Column(Integer, default=0)\n    successful_submissions = Column(Integer, default=0)\n    \n    # Performance metrics\n    average_execution_time_ms = Column(Float)\n    best_execution_time_ms = Column(Float)\n    total_time_spent_minutes = Column(Integer, default=0)\n    \n    # Difficulty progression\n    current_difficulty = Column(difficulty_enum, default=DifficultyLevel.BEGINNER.value)\n    highest_difficulty_solved = Column(difficulty_enum, default=DifficultyLevel.BEGINNER.value)\n    \n    # Learning metrics\n    hint_usage_count = Column(Integer, default=0)\n    average_attempts_per_problem = Column(Float, default=1.0)\n    streak_count = Column(Integer, default=0)  # Current solving streak\n    max_streak_count = Column(Integer, default=0)  # Best streak ever\n    \n    # XP and achievements\n    experience_points = Column(Integer, default=0)\n    \n    # Timestamps\n    first_attempt_at = Column(DateTime)\n    last_activity_at = Column(DateTime, default=func.now())\n    created_at = Column(DateTime, default=func.now(), nullable=False)\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now(), nullable=False)\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"progress\")\n    topic = relationship(\"Topic\", back_populates=\"user_progress\")\n    \n    # Unique constraint: one progress record per user per topic\n    __table_args__ = (UniqueConstraint('user_id', 'topic_id', name='uq_user_progress_user_topic'),)\n\nclass Badge(Base):\n    \"\"\"Achievement badges for user motivation\"\"\"\n    __tablename__ = \"badges\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    name = Column(String(100), unique=True, nullable=False)\n    description = Column(Text, nullable=False)\n    icon_url = Column(Text)\n    criteria = Column(JSONB, nullable=False)  # Conditions to earn the badge\n    points_reward = Column(Integer, default=0)\n    rarity = Column(String(20), default=\"common\")  # common, rare, epic, legendary\n    created_at = Column(DateTime, default=func.now(), nullable=False)\n    \n    # Relationships\n    user_badges = relationship(\"UserBadge\", back_populates=\"badge\")\n\nclass UserBadge(Base):\n    \"\"\"Junction table for user-earned badges\"\"\"\n    __tablename__ = \"user_badges\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_id = Column(String, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), nullable=False)\n    badge_id = Column(String, ForeignKey(\"badges.id\", ondelete=\"CASCADE\"), nullable=False)\n    earned_at = Column(DateTime, default=func.now(), nullable=False)\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"user_badges\")\n    badge = relationship(\"Badge\", back_populates=\"user_badges\")\n    \n    # Unique constraint: one badge per user (prevent duplicate awards)\n    __table_args__ = (UniqueConstraint('user_id', 'badge_id', name='uq_user_badges_user_badge'),)\n","size_bytes":17889},"api/schemas.py":{"content":"\"\"\"\nPydantic schemas for request/response validation\n\"\"\"\nfrom pydantic import BaseModel, EmailStr, ConfigDict, Field\nfrom pydantic.alias_generators import to_camel\nfrom typing import Optional, List, Dict, Any\nfrom datetime import datetime\nfrom enum import Enum\n\n# Enums matching the SQLAlchemy enums\nclass DifficultyLevel(str, Enum):\n    BEGINNER = \"Beginner\"\n    EASY = \"Easy\"\n    MEDIUM = \"Medium\"\n    HARD = \"Hard\"\n    EXPERT = \"Expert\"\n\nclass ExecutionStatus(str, Enum):\n    SUCCESS = \"SUCCESS\"\n    ERROR = \"ERROR\"\n    TIMEOUT = \"TIMEOUT\"\n    MEMORY_LIMIT = \"MEMORY_LIMIT\"\n\nclass SandboxStatus(str, Enum):\n    ACTIVE = \"ACTIVE\"\n    EXPIRED = \"EXPIRED\"\n    CLEANUP_PENDING = \"CLEANUP_PENDING\"\n\n# Base model for camelCase aliasing\nclass CamelCaseModel(BaseModel):\n    model_config = ConfigDict(\n        alias_generator=to_camel,\n        populate_by_name=True,\n        from_attributes=True\n    )\n\n# User schemas\nclass UserBase(CamelCaseModel):\n    username: str\n    email: EmailStr\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    profile_image_url: Optional[str] = None\n\nclass UserCreate(UserBase):\n    password: Optional[str] = None\n    google_id: Optional[str] = None\n    github_id: Optional[str] = None\n    auth_provider: str = \"email\"\n\nclass UserResponse(UserBase):\n    id: str\n    problems_solved: int\n    created_at: datetime\n\nclass UserLogin(CamelCaseModel):\n    email: EmailStr\n    password: str\n\n# Table column definition for structured display\nclass TableColumn(BaseModel):\n    name: str\n    type: str\n\n# Table data with columns and sample data\nclass TableData(BaseModel):\n    name: str\n    columns: List[TableColumn]\n    sample_data: List[dict] = Field(..., alias=\"sampleData\")\n    \n    model_config = ConfigDict(\n        populate_by_name=True,\n        from_attributes=True\n    )\n\n# Problem question structure for JSONB field - structured format\nclass QuestionData(BaseModel):\n    description: str\n    tables: List[TableData] = []\n    expected_output: List[dict] = Field(..., alias=\"expectedOutput\")\n    \n    model_config = ConfigDict(\n        populate_by_name=True,\n        from_attributes=True\n    )\n\n# Problem schemas\nclass ProblemBase(CamelCaseModel):\n    title: str\n    question: QuestionData  # JSONB field containing description, schema, expectedOutput\n    difficulty: str\n    tags: List[str] = []\n    company: Optional[str] = None\n    hints: List[str] = []\n\nclass ProblemCreate(ProblemBase):\n    pass\n\nclass ProblemResponse(ProblemBase):\n    id: str\n    created_at: datetime\n    solved_count: Optional[int] = 0\n    is_user_solved: Optional[bool] = False\n\n# Submission schemas\nclass SubmissionBase(CamelCaseModel):\n    problem_id: str\n    query: str\n\nclass SubmissionCreate(SubmissionBase):\n    pass\n\nclass SubmissionResponse(SubmissionBase):\n    id: str\n    user_id: str\n    is_correct: bool\n    execution_time: Optional[int] = None\n    submitted_at: datetime\n\n# Community post schemas\nclass CommunityPostBase(CamelCaseModel):\n    content: str\n    code_snippet: Optional[str] = None\n\nclass CommunityPostCreate(CommunityPostBase):\n    pass\n\nclass CommunityPostResponse(CommunityPostBase):\n    id: str\n    user_id: str\n    likes: int\n    comments: int\n    created_at: datetime\n    user: UserResponse\n\n# Post comment schemas\nclass PostCommentBase(CamelCaseModel):\n    content: str\n\nclass PostCommentCreate(PostCommentBase):\n    pass\n\nclass PostCommentResponse(PostCommentBase):\n    id: str\n    user_id: str\n    post_id: str\n    created_at: datetime\n    user: UserResponse\n\n# Authentication schemas\nclass Token(CamelCaseModel):\n    access_token: str\n    token_type: str = \"bearer\"\n\nclass TokenData(CamelCaseModel):\n    user_id: Optional[str] = None\n    username: Optional[str] = None\n\nclass LoginResponse(CamelCaseModel):\n    token: str\n    user: UserResponse\n    message: str = \"Login successful\"\n\nclass RegisterResponse(CamelCaseModel):\n    token: str\n    user: UserResponse\n    message: str = \"User created successfully\"\n\n# Enhanced schemas for new database models\n\n# Topic schemas\nclass TopicBase(CamelCaseModel):\n    name: str\n    description: Optional[str] = None\n    difficulty_level: DifficultyLevel\n    order_index: int = 0\n    parent_topic_id: Optional[str] = None\n\nclass TopicCreate(TopicBase):\n    pass\n\nclass TopicResponse(TopicBase):\n    id: str\n    created_at: datetime\n    updated_at: datetime\n\n# Test case schemas\nclass TestCaseBase(CamelCaseModel):\n    problem_id: str\n    name: str\n    description: Optional[str] = None\n    input_data: Dict[str, Any]\n    expected_output: List[Dict[str, Any]]\n    validation_rules: Dict[str, Any] = {}\n    is_hidden: bool = False\n    order_index: int = 0\n    timeout_seconds: int = 30\n    memory_limit_mb: int = 256\n\nclass TestCaseCreate(TestCaseBase):\n    pass\n\nclass TestCaseResponse(TestCaseBase):\n    id: str\n    created_at: datetime\n    updated_at: datetime\n\n# Problem schema schemas\nclass ProblemSchemaBase(CamelCaseModel):\n    problem_id: str\n    table_name: str\n    schema_definition: Dict[str, Any]\n    sample_data: List[Dict[str, Any]] = []\n    indexes: List[Dict[str, Any]] = []\n    constraints: List[Dict[str, Any]] = []\n\nclass ProblemSchemaCreate(ProblemSchemaBase):\n    pass\n\nclass ProblemSchemaResponse(ProblemSchemaBase):\n    id: str\n    created_at: datetime\n    updated_at: datetime\n\n# Execution result schemas\nclass ExecutionResultBase(CamelCaseModel):\n    submission_id: str\n    test_case_id: str\n    user_sandbox_id: str\n    status: ExecutionStatus\n    execution_time_ms: Optional[int] = None\n    memory_used_mb: Optional[float] = None\n    rows_affected: Optional[int] = None\n    query_result: Optional[Dict[str, Any]] = None\n    error_message: Optional[str] = None\n    cpu_time_ms: Optional[int] = None\n    io_operations: Optional[int] = None\n    query_plan: Optional[Dict[str, Any]] = None\n    is_correct: bool\n    validation_details: Optional[Dict[str, Any]] = None\n\nclass ExecutionResultCreate(ExecutionResultBase):\n    pass\n\nclass ExecutionResultResponse(ExecutionResultBase):\n    id: str\n    created_at: datetime\n\n# User sandbox schemas\nclass UserSandboxBase(CamelCaseModel):\n    user_id: str\n    problem_id: str\n    database_name: str\n    connection_string: str\n    status: SandboxStatus = SandboxStatus.ACTIVE\n    max_execution_time_seconds: int = 30\n    max_memory_mb: int = 256\n    max_connections: int = 5\n    expires_at: datetime\n\nclass UserSandboxCreate(UserSandboxBase):\n    pass\n\nclass UserSandboxResponse(UserSandboxBase):\n    id: str\n    created_at: datetime\n    last_accessed_at: datetime\n    cleanup_scheduled_at: Optional[datetime] = None\n\n# User progress schemas\nclass UserProgressBase(CamelCaseModel):\n    user_id: str\n    topic_id: str\n    problems_attempted: int = 0\n    problems_solved: int = 0\n    total_submissions: int = 0\n    successful_submissions: int = 0\n    average_execution_time_ms: Optional[float] = None\n    best_execution_time_ms: Optional[float] = None\n    total_time_spent_minutes: int = 0\n    current_difficulty: DifficultyLevel = DifficultyLevel.BEGINNER\n    highest_difficulty_solved: DifficultyLevel = DifficultyLevel.BEGINNER\n    hint_usage_count: int = 0\n    average_attempts_per_problem: float = 1.0\n    streak_count: int = 0\n    max_streak_count: int = 0\n    experience_points: int = 0\n    first_attempt_at: Optional[datetime] = None\n    last_activity_at: Optional[datetime] = None\n\nclass UserProgressCreate(UserProgressBase):\n    pass\n\nclass UserProgressResponse(UserProgressBase):\n    id: str\n    created_at: datetime\n    updated_at: datetime\n\n# Badge schemas\nclass BadgeBase(CamelCaseModel):\n    name: str\n    description: str\n    icon_url: Optional[str] = None\n    criteria: Dict[str, Any]\n    points_reward: int = 0\n    rarity: str = \"common\"\n\nclass BadgeCreate(BadgeBase):\n    pass\n\nclass BadgeResponse(BadgeBase):\n    id: str\n    created_at: datetime\n\nclass UserBadgeResponse(CamelCaseModel):\n    id: str\n    user_id: str\n    badge_id: str\n    earned_at: datetime\n    badge: BadgeResponse\n\n# Enhanced existing schemas\nclass EnhancedUserResponse(UserResponse):\n    \"\"\"Enhanced user response with progress data\"\"\"\n    progress: Optional[List[UserProgressResponse]] = []\n    badges: Optional[List[UserBadgeResponse]] = []\n    current_level: Optional[str] = None\n    total_xp: Optional[int] = 0\n\nclass EnhancedProblemResponse(ProblemResponse):\n    \"\"\"Enhanced problem response with test cases and schema\"\"\"\n    test_cases: Optional[List[TestCaseResponse]] = []\n    schemas: Optional[List[ProblemSchemaResponse]] = []\n    topic: Optional[TopicResponse] = None\n\nclass DetailedSubmissionResponse(SubmissionResponse):\n    \"\"\"Detailed submission with execution results\"\"\"\n    execution_results: Optional[List[ExecutionResultResponse]] = []\n    overall_score: Optional[float] = None\n    passed_test_cases: Optional[int] = 0\n    total_test_cases: Optional[int] = 0","size_bytes":8825},"client/src/pages/crud.py":{"content":"from sqlalchemy.orm import Session\nimport models, schemas\nfrom sqlalchemy import func, case, literal_column\n\ndef get_user(db: Session, user_id: str):\n    return db.query(models.User).filter(models.User.id == user_id).first()\n\ndef upsert_user(db: Session, user: schemas.UserUpsert):\n    db_user = db.query(models.User).filter(models.User.id == user.id).first()\n    if db_user:\n        db_user.email = user.email\n        db_user.first_name = user.first_name\n        db_user.last_name = user.last_name\n        db_user.profile_image_url = user.profile_image_url\n    else:\n        db_user = models.User(**user.dict())\n        db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\ndef get_problems(db: Session, user_id: str | None):\n    # Subquery for total correct submissions count per problem\n    solved_count_sq = db.query(\n        models.Submission.problem_id,\n        func.count(models.Submission.user_id.distinct()).label(\"solved_count\")\n    ).filter(models.Submission.is_correct == True).group_by(models.Submission.problem_id).subquery()\n\n    # Subquery to check if the current user has solved the problem\n    user_solved_sq = None\n    if user_id:\n        user_solved_sq = db.query(\n            models.Submission.problem_id,\n            literal_column(\"1\").label(\"is_user_solved\")\n        ).filter(\n            models.Submission.user_id == user_id,\n            models.Submission.is_correct == True\n        ).distinct().subquery()\n\n    # Main query\n    query = db.query(\n        models.Problem,\n        func.coalesce(solved_count_sq.c.solved_count, 0).label(\"solvedCount\")\n    ).outerjoin(\n        solved_count_sq, models.Problem.id == solved_count_sq.c.problem_id\n    )\n\n    if user_solved_sq is not None:\n        query = query.add_columns(\n            case(\n                (user_solved_sq.c.is_user_solved != None, True),\n                else_=False\n            ).label(\"isUserSolved\")\n        ).outerjoin(\n            user_solved_sq, models.Problem.id == user_solved_sq.c.problem_id\n        )\n    else:\n        # If no user, isUserSolved is always false\n        query = query.add_columns(literal_column(\"false\").label(\"isUserSolved\"))\n    \n    problems_with_stats = query.all()\n\n    # Manually construct the output to match the Pydantic schema\n    results = []\n    for problem, solved_count, is_user_solved in problems_with_stats:\n        results.append(schemas.ProblemOut(\n            id=problem.id,\n            title=problem.title,\n            description=problem.description,\n            difficulty=problem.difficulty,\n            starter_code=problem.starter_code,\n            tags=problem.tags or [],\n            companies=problem.companies or [],\n            solvedCount=solved_count,\n            isUserSolved=is_user_solved\n        ))\n    return results\n\ndef get_problem(db: Session, problem_id: int):\n    return db.query(models.Problem).filter(models.Problem.id == problem_id).first()\n\ndef create_submission(db: Session, submission: schemas.SubmissionCreate, user_id: str):\n    # Mocking correctness check. In a real app, this would execute the SQL.\n    is_correct = \"select\" in submission.user_code.lower() and \"from\" in submission.user_code.lower()\n    db_sub = models.Submission(\n        problem_id=submission.problem_id,\n        user_id=user_id,\n        user_code=submission.user_code,\n        is_correct=is_correct\n    )\n    db.add(db_sub)\n    db.commit()\n    db.refresh(db_sub)\n    return db_sub\n\ndef get_user_submissions(db: Session, user_id: str):\n    return db.query(models.Submission).filter(models.Submission.user_id == user_id).all()\n","size_bytes":3581},"client/src/pages/main.py":{"content":"from fastapi import FastAPI, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom pydantic import BaseModel\nfrom typing import Optional\nimport models, schemas, crud\nfrom database import engine, Base, get_db\n\n# Create tables\nBase.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n# Mock auth dependency, similar to the one in server/routes.ts\nclass MockUserClaims(BaseModel):\n    sub: str\n    email: str\n    first_name: Optional[str]\n    last_name: Optional[str]\n    profile_image_url: Optional[str]\n\nclass MockAuth(BaseModel):\n    claims: MockUserClaims\n\ndef mock_auth_user() -> MockAuth:\n    # Mock user for development\n    return MockAuth(claims=MockUserClaims(\n      sub=\"mock-user-1\",\n      email=\"jane@techcorp.com\",\n      first_name=\"Jane\",\n      last_name=\"Smith\",\n      profile_image_url=None,\n    ))\n\n# ---------------- AUTH ----------------\n@app.get(\"/api/auth/user\", response_model=schemas.User)\ndef get_current_user(user: MockAuth = Depends(mock_auth_user), db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user.claims.sub)\n    if not db_user:\n        claims = user.claims\n        user_data = schemas.UserUpsert(\n            id=claims.sub,\n            email=claims.email,\n            first_name=claims.first_name,\n            last_name=claims.last_name,\n            profile_image_url=claims.profile_image_url,\n        )\n        db_user = crud.upsert_user(db, user=user_data)\n    return db_user\n\n# ---------------- PROBLEMS ----------------\n@app.get(\"/api/problems\", response_model=list[schemas.ProblemOut])\ndef list_problems(user: MockAuth = Depends(mock_auth_user), db: Session = Depends(get_db)):\n    user_id = user.claims.sub\n    return crud.get_problems(db, user_id=user_id)\n\n@app.get(\"/api/problems/{problem_id}\", response_model=schemas.ProblemBase)\ndef get_problem(problem_id: int, db: Session = Depends(get_db)):\n    problem = crud.get_problem(db, problem_id)\n    if not problem:\n        raise HTTPException(status_code=404, detail=\"Problem not found\")\n    return problem\n\n# ---------------- SUBMISSIONS ----------------\n@app.post(\"/api/submissions\", response_model=schemas.SubmissionOut)\ndef submit(sub: schemas.SubmissionCreate, user: MockAuth = Depends(mock_auth_user), db: Session = Depends(get_db)):\n    user_id = user.claims.sub\n    return crud.create_submission(db, sub, user_id=user_id)\n\n@app.get(\"/api/user/submissions\", response_model=list[schemas.SubmissionOut])\ndef get_user_submissions(user: MockAuth = Depends(mock_auth_user), db: Session = Depends(get_db)):\n    submissions = crud.get_user_submissions(db, user_id=user.claims.sub)\n    return submissions\n","size_bytes":2622},"client/src/pages/models.py":{"content":"from sqlalchemy import Column, Integer, String, Text, ForeignKey, Boolean, JSON\nfrom sqlalchemy.orm import relationship\nfrom database import Base\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(String, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True, nullable=False)\n    first_name = Column(String, nullable=True)\n    last_name = Column(String, nullable=True)\n    profile_image_url = Column(String, nullable=True)\n\n    submissions = relationship(\"Submission\", back_populates=\"user\")\n\nclass Problem(Base):\n    __tablename__ = \"problems\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String)\n    description = Column(Text)\n    difficulty = Column(String)\n    starter_code = Column(Text)\n    tags = Column(JSON, default=[], nullable=False)\n    companies = Column(JSON, default=[], nullable=False)\n\n    submissions = relationship(\"Submission\", back_populates=\"problem\")\n\nclass Submission(Base):\n    __tablename__ = \"submissions\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    problem_id = Column(Integer, ForeignKey(\"problems.id\"))\n    user_id = Column(String, ForeignKey(\"users.id\"))\n    user_code = Column(Text)\n    is_correct = Column(Boolean, default=False, nullable=False)\n\n    user = relationship(\"User\", back_populates=\"submissions\")\n    problem = relationship(\"Problem\", back_populates=\"submissions\")\n","size_bytes":1396},"client/src/pages/schemas.py":{"content":"from pydantic import BaseModel\nfrom typing import Optional, List\n\nclass User(BaseModel):\n    id: str\n    email: str\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    profile_image_url: Optional[str] = None\n\n    class Config:\n        orm_mode = True\n\nclass UserUpsert(User):\n    pass\n\nclass ProblemBase(BaseModel):\n    id: int\n    title: str\n    description: str\n    difficulty: str\n    starter_code: str\n    tags: List[str]\n    companies: List[str]\n\nclass ProblemOut(ProblemBase):\n    solvedCount: int\n    isUserSolved: bool\n\n    class Config:\n        orm_mode = True\n\nclass SubmissionCreate(BaseModel):\n    problem_id: int\n    user_code: str\n\nclass SubmissionOut(BaseModel):\n    id: int\n    problem_id: int\n    user_id: str\n    is_correct: bool\n\n    class Config:\n        orm_mode = True\n","size_bytes":816},"api/seed.py":{"content":"import os\nimport sys\nimport json\nimport argparse\nfrom sqlalchemy.orm import Session\n\n# Add the project root to the Python path to allow for absolute imports\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))\n\nfrom api.database import SessionLocal, engine\nfrom api.models import Base, Problem\n\ndef seed_data(env: str):\n    \"\"\"\n    Populates the database with initial data from a JSON file\n    based on the provided environment.\n    \"\"\"\n    # This ensures tables are created before trying to seed them\n    Base.metadata.create_all(bind=engine)\n    \n    db: Session = SessionLocal()\n    \n    try:\n        # Check if problems already exist\n        if db.query(Problem).count() > 0:\n            print(\"Database already contains problems. Skipping seeding.\")\n            return\n\n        # Determine which data file to use\n        file_path = os.path.join(os.path.dirname(__file__), 'data', f'{env}_problems.json')\n        \n        if not os.path.exists(file_path):\n            print(f\"Error: Data file not found at {file_path}\")\n            print(\"Please specify a valid environment: 'demo' or 'production'.\")\n            return\n            \n        print(f\"Seeding database with data from {file_path}...\")\n\n        with open(file_path, 'r') as f:\n            problems_data = json.load(f)\n\n        # Create Problem objects from the loaded data\n        problems_to_add = [Problem(**p) for p in problems_data]\n\n        db.add_all(problems_to_add)\n        db.commit()\n        \n        print(f\"Successfully seeded {len(problems_to_add)} problems from '{env}' environment.\")\n\n    finally:\n        db.close()\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Seed the database with a specific problem set.\")\n    parser.add_argument(\n        \"env\", \n        choices=[\"demo\", \"production\"], \n        help=\"The environment to seed (e.g., 'demo' or 'production').\"\n    )\n    args = parser.parse_args()\n    \n    seed_data(args.env)\n","size_bytes":1975},"client/src/components/table-display.tsx":{"content":"import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\ninterface Column {\n  name: string;\n  type: string;\n}\n\ninterface TableData {\n  name: string;\n  columns: Column[];\n  sampleData: Record<string, any>[];\n}\n\ninterface TableDisplayProps {\n  tables: TableData[];\n  expectedOutput?: Record<string, any>[];\n}\n\nexport default function TableDisplay({ tables, expectedOutput }: TableDisplayProps) {\n  const renderDataTable = (data: Record<string, any>[], title: string) => {\n    if (!data || data.length === 0) return null;\n\n    const headers = Object.keys(data[0]);\n    \n    return (\n      <div className=\"mb-6\">\n        <h4 className=\"font-semibold text-sm text-foreground mb-3\">{title}</h4>\n        <div className=\"border rounded-lg overflow-hidden\">\n          <Table>\n            <TableHeader>\n              <TableRow className=\"bg-muted/50\">\n                {headers.map((header) => (\n                  <TableHead key={header} className=\"font-semibold text-foreground\">\n                    {header}\n                  </TableHead>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.map((row, index) => (\n                <TableRow key={index}>\n                  {headers.map((header) => (\n                    <TableCell key={header} className=\"py-2\">\n                      {row[header]}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {tables.map((table) => (\n        <div key={table.name} className=\"space-y-4\">\n          {/* Table Schema */}\n          <div>\n            <h4 className=\"font-semibold text-sm text-foreground mb-3\">\n              <span className=\"font-bold\">{table.name}</span> Table:\n            </h4>\n            <div className=\"border rounded-lg overflow-hidden\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"bg-muted/50\">\n                    <TableHead className=\"font-semibold text-foreground\">Column Name</TableHead>\n                    <TableHead className=\"font-semibold text-foreground\">Type</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {table.columns.map((column) => (\n                    <TableRow key={column.name}>\n                      <TableCell className=\"py-2 font-mono text-sm\">{column.name}</TableCell>\n                      <TableCell className=\"py-2\">{column.type}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </div>\n\n          {/* Sample Data */}\n          {table.sampleData && table.sampleData.length > 0 && \n            renderDataTable(table.sampleData, `${table.name} Example Input:`)\n          }\n        </div>\n      ))}\n\n      {/* Expected Output */}\n      {expectedOutput && expectedOutput.length > 0 && \n        renderDataTable(expectedOutput, \"Expected Output:\")\n      }\n    </div>\n  );\n}","size_bytes":3154},"client/src/components/resizable-splitter.tsx":{"content":"import { useState, useRef, useCallback, useEffect } from 'react';\n\ninterface ResizableSplitterProps {\n  leftPanel: React.ReactNode;\n  rightPanel: React.ReactNode;\n  defaultLeftWidth?: number;\n  minLeftWidth?: number;\n  minRightWidth?: number;\n  className?: string;\n}\n\nexport default function ResizableSplitter({\n  leftPanel,\n  rightPanel,\n  defaultLeftWidth = 50,\n  minLeftWidth = 20,\n  minRightWidth = 20,\n  className = ''\n}: ResizableSplitterProps) {\n  const [leftWidth, setLeftWidth] = useState(defaultLeftWidth);\n  const [isDragging, setIsDragging] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    setIsDragging(true);\n    e.preventDefault();\n  }, []);\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    if (!isDragging || !containerRef.current) return;\n\n    const containerRect = containerRef.current.getBoundingClientRect();\n    const newLeftWidth = ((e.clientX - containerRect.left) / containerRect.width) * 100;\n    \n    // Apply constraints\n    const constrainedWidth = Math.max(\n      minLeftWidth,\n      Math.min(100 - minRightWidth, newLeftWidth)\n    );\n    \n    setLeftWidth(constrainedWidth);\n  }, [isDragging, minLeftWidth, minRightWidth]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  // Add event listeners when dragging\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      document.body.style.cursor = 'col-resize';\n      document.body.style.userSelect = 'none';\n      \n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n        document.body.style.cursor = '';\n        document.body.style.userSelect = '';\n      };\n    }\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  return (\n    <div \n      ref={containerRef}\n      className={`flex h-full w-full ${className}`}\n    >\n      {/* Left Panel */}\n      <div \n        style={{ width: `${leftWidth}%` }}\n        className=\"flex-shrink-0 overflow-hidden\"\n      >\n        {leftPanel}\n      </div>\n      \n      {/* Resizer */}\n      <div\n        className=\"w-1 bg-border hover:bg-primary/50 cursor-col-resize flex-shrink-0 transition-colors relative group\"\n        onMouseDown={handleMouseDown}\n      >\n        <div className=\"absolute inset-y-0 -left-1 -right-1 group-hover:bg-primary/20\" />\n      </div>\n      \n      {/* Right Panel */}\n      <div \n        style={{ width: `${100 - leftWidth}%` }}\n        className=\"flex-1 overflow-hidden\"\n      >\n        {rightPanel}\n      </div>\n    </div>\n  );\n}","size_bytes":2736},"client/src/components/vertical-resizable-splitter.tsx":{"content":"import { useState, useRef, useCallback, useEffect } from 'react';\n\ninterface VerticalResizableSplitterProps {\n  topPanel: React.ReactNode;\n  bottomPanel: React.ReactNode;\n  defaultTopHeight?: number;\n  minTopHeight?: number;\n  minBottomHeight?: number;\n  className?: string;\n}\n\nexport default function VerticalResizableSplitter({\n  topPanel,\n  bottomPanel,\n  defaultTopHeight = 70,\n  minTopHeight = 30,\n  minBottomHeight = 20,\n  className = ''\n}: VerticalResizableSplitterProps) {\n  const [topHeight, setTopHeight] = useState(defaultTopHeight);\n  const [isDragging, setIsDragging] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    setIsDragging(true);\n    e.preventDefault();\n  }, []);\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    if (!isDragging || !containerRef.current) return;\n\n    const containerRect = containerRef.current.getBoundingClientRect();\n    const newTopHeight = ((e.clientY - containerRect.top) / containerRect.height) * 100;\n    \n    // Apply constraints\n    const constrainedHeight = Math.max(\n      minTopHeight,\n      Math.min(100 - minBottomHeight, newTopHeight)\n    );\n    \n    setTopHeight(constrainedHeight);\n  }, [isDragging, minTopHeight, minBottomHeight]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  // Add event listeners when dragging\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      document.body.style.cursor = 'row-resize';\n      document.body.style.userSelect = 'none';\n      \n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n        document.body.style.cursor = '';\n        document.body.style.userSelect = '';\n      };\n    }\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  return (\n    <div \n      ref={containerRef}\n      className={`flex flex-col h-full w-full ${className}`}\n    >\n      {/* Top Panel */}\n      <div \n        style={{ height: `${topHeight}%` }}\n        className=\"flex-shrink-0 overflow-hidden\"\n      >\n        {topPanel}\n      </div>\n      \n      {/* Resizer */}\n      <div\n        className=\"h-1 bg-border hover:bg-primary/50 cursor-row-resize flex-shrink-0 transition-colors relative group\"\n        onMouseDown={handleMouseDown}\n      >\n        <div className=\"absolute inset-x-0 -top-1 -bottom-1 group-hover:bg-primary/20\" />\n      </div>\n      \n      {/* Bottom Panel */}\n      <div \n        style={{ height: `${100 - topHeight}%` }}\n        className=\"flex-1 overflow-hidden\"\n      >\n        {bottomPanel}\n      </div>\n    </div>\n  );\n}","size_bytes":2781},"REPLIT_SETUP.md":{"content":"🚀 Replit Auto-Setup Instructions\nThis file ensures zero-analysis setup for future GitHub imports and reduces agent utilization by 80%+.\n\n🎯 Quick Start (Recommended)\nbash scripts/replit-setup.sh && npm run dev\n📋 What's Pre-Configured\n✅ Full-stack setup: React frontend + FastAPI backend\n✅ Database: PostgreSQL with SQLAlchemy ORM\n✅ Dependencies: Node.js + Python packages\n✅ Deployment: Ready for autoscale deployment\n✅ Workflows: Frontend (Vite) on port 5000, backend (FastAPI) on 8000\n✅ Environment: All configs optimized for Replit\n🔧 Project Structure\nSQLGym/\n├── client/ # React + TypeScript frontend\n├── api/ # FastAPI Python backend  \n├── scripts/ # Auto-setup scripts\n├── .replit # Complete Replit configuration\n└── replit.md # Comprehensive project documentation\n💡 Agent Optimization Features\nExpert mode enabled in .replit\nPre-configured modules: nodejs-20, python-3.11, postgresql-16\nAuto-workflows: Development and production ready\nIntegration ready: Database and auth integrations included\nZero manual config: Everything automated\n🚨 For Future Imports\nInstead of asking agent to \"set up the project\", simply say:\n\n\"Run the setup script in REPLIT_SETUP.md\"\n\nThis will complete the entire setup in under 2 minutes with minimal agent utilization.\n\nThis automation setup saves ~80% of typical import analysis time\n\n## Python Package Management on Replit\n\n**Important**: This project uses **Python 3.11** and **pip exclusively** on Replit due to compatibility requirements. The setup includes fixes for common Replit environment issues:\n\n- **Python version**: Fixed to use `python3.11` consistently to avoid pydantic compatibility issues\n- **Package installation**: Uses `--break-system-packages` flag to work with NixOS externally-managed environment\n- **Primary dependency file**: `requirements.txt` (pinned with cryptographic hashes)\n- **Development script**: `scripts/dev_backend.cjs` handles Python setup and backend startup\n\n### Environment Fixes Applied\n\n✅ **Pydantic Compatibility**: Fixed ModuleNotFoundError by using consistent Python 3.11 version  \n✅ **NixOS Compatibility**: Added `--break-system-packages` flag for pip installations  \n✅ **Port Configuration**: Frontend on 5000 (proxy-ready), backend on 8000  \n✅ **Database Setup**: PostgreSQL initialization with proper schema migration  \n✅ **Deployment Ready**: Production start script uses python3.11 on correct ports\n\n### Updating Dependencies\n\nTo update Python dependencies:\n1. Modify `pyproject.toml` as needed\n2. Run `uv export --format requirements-txt > requirements.txt` locally (if using uv)\n3. Or manually update `requirements.txt` with pinned versions\n4. Commit the updated `requirements.txt`\n\n### Development vs Production\n\n- **Development**: Backend on port 8000, frontend dev server on 5000 with API proxy\n- **Production**: Build frontend assets, serve backend on appropriate port using `python3.11`\n","size_bytes":2954},"scripts/migrate_database.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nDatabase Migration Script - SQLGym\n==================================\nThis script migrates data from your current Neon database to a local PostgreSQL database.\n\nUsage:\n    python scripts/migrate_database.py\n\nPrerequisites:\n1. Set up local PostgreSQL server\n2. Create a local database\n3. Set LOCAL_DATABASE_URL environment variable or update the script\n\nMigration Order (respects foreign key dependencies):\n1. Users\n2. Problems  \n3. Submissions\n4. CommunityPosts\n5. PostLikes\n6. PostComments\n\"\"\"\n\nimport os\nimport sys\nfrom typing import List, Dict, Any\nfrom datetime import datetime\nfrom dotenv import load_dotenv\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.exc import SQLAlchemyError\n\n# Add the parent directory to sys.path to import from api\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom api.models import Base, User, Problem, Submission, CommunityPost, PostLike, PostComment\nfrom api.database import DATABASE_URL as SOURCE_DATABASE_URL\n\n# Load environment variables\nload_dotenv()\n\n# Configuration\nLOCAL_DATABASE_URL = os.getenv(\"LOCAL_DATABASE_URL\", \"postgresql://username:password@localhost:5432/sqlgym\")\nBATCH_SIZE = 100  # Process records in batches for memory efficiency\n\nclass DatabaseMigrator:\n    def __init__(self, source_url: str, destination_url: str):\n        \"\"\"Initialize migrator with source and destination database connections.\"\"\"\n        self.source_url = source_url\n        self.destination_url = destination_url\n        \n        # Create engines\n        self.source_engine = create_engine(source_url, echo=False)\n        self.destination_engine = create_engine(destination_url, echo=False)\n        \n        # Create session factories\n        self.SourceSession = sessionmaker(bind=self.source_engine)\n        self.DestinationSession = sessionmaker(bind=self.destination_engine)\n        \n    def test_connections(self) -> bool:\n        \"\"\"Test both database connections.\"\"\"\n        try:\n            print(\"Testing source database connection...\")\n            with self.source_engine.connect() as conn:\n                conn.execute(text(\"SELECT 1\"))\n            print(\"✅ Source database connection successful\")\n            \n            print(\"Testing destination database connection...\")\n            with self.destination_engine.connect() as conn:\n                conn.execute(text(\"SELECT 1\"))\n            print(\"✅ Destination database connection successful\")\n            \n            return True\n        except Exception as e:\n            print(f\"❌ Connection test failed: {e}\")\n            return False\n    \n    def setup_destination_schema(self) -> bool:\n        \"\"\"Create tables in destination database.\"\"\"\n        try:\n            print(\"Creating destination database schema...\")\n            Base.metadata.create_all(bind=self.destination_engine)\n            print(\"✅ Schema created successfully\")\n            return True\n        except Exception as e:\n            print(f\"❌ Schema creation failed: {e}\")\n            return False\n    \n    def get_record_counts(self) -> Dict[str, int]:\n        \"\"\"Get record counts from source database.\"\"\"\n        counts = {}\n        tables = [\n            ('users', User),\n            ('problems', Problem),\n            ('submissions', Submission),\n            ('community_posts', CommunityPost),\n            ('post_likes', PostLike),\n            ('post_comments', PostComment)\n        ]\n        \n        with self.SourceSession() as session:\n            for table_name, model_class in tables:\n                try:\n                    count = session.query(model_class).count()\n                    counts[table_name] = count\n                    print(f\"📊 {table_name}: {count} records\")\n                except Exception as e:\n                    print(f\"⚠️ Could not count {table_name}: {e}\")\n                    counts[table_name] = 0\n        \n        return counts\n    \n    def migrate_users(self) -> bool:\n        \"\"\"Migrate users table.\"\"\"\n        try:\n            print(\"\\n🚀 Migrating users...\")\n            \n            with self.SourceSession() as source_session:\n                with self.DestinationSession() as dest_session:\n                    # Get total count for progress tracking\n                    total_users = source_session.query(User).count()\n                    \n                    if total_users == 0:\n                        print(\"ℹ️ No users to migrate\")\n                        return True\n                    \n                    # Process in batches\n                    offset = 0\n                    migrated = 0\n                    \n                    while offset < total_users:\n                        users = source_session.query(User).offset(offset).limit(BATCH_SIZE).all()\n                        \n                        if not users:\n                            break\n                        \n                        # Create new user objects for destination\n                        for user in users:\n                            new_user = User(\n                                id=user.id,\n                                username=user.username,\n                                email=user.email,\n                                password_hash=user.password_hash,\n                                first_name=user.first_name,\n                                last_name=user.last_name,\n                                profile_image_url=user.profile_image_url,\n                                google_id=user.google_id,\n                                github_id=user.github_id,\n                                auth_provider=user.auth_provider,\n                                problems_solved=user.problems_solved,\n                                created_at=user.created_at,\n                                updated_at=user.updated_at\n                            )\n                            dest_session.add(new_user)\n                        \n                        dest_session.commit()\n                        migrated += len(users)\n                        offset += BATCH_SIZE\n                        \n                        print(f\"  ✅ Migrated {migrated}/{total_users} users\")\n                    \n                    print(f\"✅ Users migration completed: {migrated} records\")\n                    return True\n                    \n        except Exception as e:\n            print(f\"❌ Users migration failed: {e}\")\n            return False\n    \n    def migrate_problems(self) -> bool:\n        \"\"\"Migrate problems table.\"\"\"\n        try:\n            print(\"\\n🚀 Migrating problems...\")\n            \n            with self.SourceSession() as source_session:\n                with self.DestinationSession() as dest_session:\n                    total_problems = source_session.query(Problem).count()\n                    \n                    if total_problems == 0:\n                        print(\"ℹ️ No problems to migrate\")\n                        return True\n                    \n                    offset = 0\n                    migrated = 0\n                    \n                    while offset < total_problems:\n                        problems = source_session.query(Problem).offset(offset).limit(BATCH_SIZE).all()\n                        \n                        if not problems:\n                            break\n                        \n                        for problem in problems:\n                            new_problem = Problem(\n                                id=problem.id,\n                                title=problem.title,\n                                difficulty=problem.difficulty,\n                                tags=problem.tags,\n                                company=problem.company,  # Single company field\n                                hints=problem.hints,\n                                question=problem.question,\n                                created_at=problem.created_at,\n                                updated_at=problem.updated_at\n                            )\n                            dest_session.add(new_problem)\n                        \n                        dest_session.commit()\n                        migrated += len(problems)\n                        offset += BATCH_SIZE\n                        \n                        print(f\"  ✅ Migrated {migrated}/{total_problems} problems\")\n                    \n                    print(f\"✅ Problems migration completed: {migrated} records\")\n                    return True\n                    \n        except Exception as e:\n            print(f\"❌ Problems migration failed: {e}\")\n            return False\n    \n    def migrate_submissions(self) -> bool:\n        \"\"\"Migrate submissions table.\"\"\"\n        try:\n            print(\"\\n🚀 Migrating submissions...\")\n            \n            with self.SourceSession() as source_session:\n                with self.DestinationSession() as dest_session:\n                    total_submissions = source_session.query(Submission).count()\n                    \n                    if total_submissions == 0:\n                        print(\"ℹ️ No submissions to migrate\")\n                        return True\n                    \n                    offset = 0\n                    migrated = 0\n                    \n                    while offset < total_submissions:\n                        submissions = source_session.query(Submission).offset(offset).limit(BATCH_SIZE).all()\n                        \n                        if not submissions:\n                            break\n                        \n                        for submission in submissions:\n                            new_submission = Submission(\n                                id=submission.id,\n                                user_id=submission.user_id,\n                                problem_id=submission.problem_id,\n                                query=submission.query,\n                                is_correct=submission.is_correct,\n                                execution_time=submission.execution_time,\n                                submitted_at=submission.submitted_at\n                            )\n                            dest_session.add(new_submission)\n                        \n                        dest_session.commit()\n                        migrated += len(submissions)\n                        offset += BATCH_SIZE\n                        \n                        print(f\"  ✅ Migrated {migrated}/{total_submissions} submissions\")\n                    \n                    print(f\"✅ Submissions migration completed: {migrated} records\")\n                    return True\n                    \n        except Exception as e:\n            print(f\"❌ Submissions migration failed: {e}\")\n            return False\n    \n    def migrate_community_posts(self) -> bool:\n        \"\"\"Migrate community posts table.\"\"\"\n        try:\n            print(\"\\n🚀 Migrating community posts...\")\n            \n            with self.SourceSession() as source_session:\n                with self.DestinationSession() as dest_session:\n                    total_posts = source_session.query(CommunityPost).count()\n                    \n                    if total_posts == 0:\n                        print(\"ℹ️ No community posts to migrate\")\n                        return True\n                    \n                    offset = 0\n                    migrated = 0\n                    \n                    while offset < total_posts:\n                        posts = source_session.query(CommunityPost).offset(offset).limit(BATCH_SIZE).all()\n                        \n                        if not posts:\n                            break\n                        \n                        for post in posts:\n                            new_post = CommunityPost(\n                                id=post.id,\n                                user_id=post.user_id,\n                                content=post.content,\n                                code_snippet=post.code_snippet,\n                                likes=post.likes,\n                                comments=post.comments,\n                                created_at=post.created_at,\n                                updated_at=post.updated_at\n                            )\n                            dest_session.add(new_post)\n                        \n                        dest_session.commit()\n                        migrated += len(posts)\n                        offset += BATCH_SIZE\n                        \n                        print(f\"  ✅ Migrated {migrated}/{total_posts} community posts\")\n                    \n                    print(f\"✅ Community posts migration completed: {migrated} records\")\n                    return True\n                    \n        except Exception as e:\n            print(f\"❌ Community posts migration failed: {e}\")\n            return False\n    \n    def migrate_post_likes(self) -> bool:\n        \"\"\"Migrate post likes table.\"\"\"\n        try:\n            print(\"\\n🚀 Migrating post likes...\")\n            \n            with self.SourceSession() as source_session:\n                with self.DestinationSession() as dest_session:\n                    total_likes = source_session.query(PostLike).count()\n                    \n                    if total_likes == 0:\n                        print(\"ℹ️ No post likes to migrate\")\n                        return True\n                    \n                    offset = 0\n                    migrated = 0\n                    \n                    while offset < total_likes:\n                        likes = source_session.query(PostLike).offset(offset).limit(BATCH_SIZE).all()\n                        \n                        if not likes:\n                            break\n                        \n                        for like in likes:\n                            new_like = PostLike(\n                                id=like.id,\n                                user_id=like.user_id,\n                                post_id=like.post_id,\n                                created_at=like.created_at\n                            )\n                            dest_session.add(new_like)\n                        \n                        dest_session.commit()\n                        migrated += len(likes)\n                        offset += BATCH_SIZE\n                        \n                        print(f\"  ✅ Migrated {migrated}/{total_likes} post likes\")\n                    \n                    print(f\"✅ Post likes migration completed: {migrated} records\")\n                    return True\n                    \n        except Exception as e:\n            print(f\"❌ Post likes migration failed: {e}\")\n            return False\n    \n    def migrate_post_comments(self) -> bool:\n        \"\"\"Migrate post comments table.\"\"\"\n        try:\n            print(\"\\n🚀 Migrating post comments...\")\n            \n            with self.SourceSession() as source_session:\n                with self.DestinationSession() as dest_session:\n                    total_comments = source_session.query(PostComment).count()\n                    \n                    if total_comments == 0:\n                        print(\"ℹ️ No post comments to migrate\")\n                        return True\n                    \n                    offset = 0\n                    migrated = 0\n                    \n                    while offset < total_comments:\n                        comments = source_session.query(PostComment).offset(offset).limit(BATCH_SIZE).all()\n                        \n                        if not comments:\n                            break\n                        \n                        for comment in comments:\n                            new_comment = PostComment(\n                                id=comment.id,\n                                user_id=comment.user_id,\n                                post_id=comment.post_id,\n                                content=comment.content,\n                                created_at=comment.created_at\n                            )\n                            dest_session.add(new_comment)\n                        \n                        dest_session.commit()\n                        migrated += len(comments)\n                        offset += BATCH_SIZE\n                        \n                        print(f\"  ✅ Migrated {migrated}/{total_comments} post comments\")\n                    \n                    print(f\"✅ Post comments migration completed: {migrated} records\")\n                    return True\n                    \n        except Exception as e:\n            print(f\"❌ Post comments migration failed: {e}\")\n            return False\n    \n    def verify_migration(self) -> bool:\n        \"\"\"Verify migration by comparing record counts.\"\"\"\n        print(\"\\n🔍 Verifying migration...\")\n        \n        try:\n            source_counts = {}\n            dest_counts = {}\n            \n            tables = [\n                ('users', User),\n                ('problems', Problem),\n                ('submissions', Submission),\n                ('community_posts', CommunityPost),\n                ('post_likes', PostLike),\n                ('post_comments', PostComment)\n            ]\n            \n            # Get source counts\n            with self.SourceSession() as session:\n                for table_name, model_class in tables:\n                    source_counts[table_name] = session.query(model_class).count()\n            \n            # Get destination counts\n            with self.DestinationSession() as session:\n                for table_name, model_class in tables:\n                    dest_counts[table_name] = session.query(model_class).count()\n            \n            # Compare counts\n            all_match = True\n            print(\"\\n📊 Migration Verification:\")\n            print(\"=\" * 50)\n            print(f\"{'Table':<20} {'Source':<10} {'Dest':<10} {'Status':<10}\")\n            print(\"-\" * 50)\n            \n            for table_name in source_counts:\n                source_count = source_counts[table_name]\n                dest_count = dest_counts[table_name]\n                status = \"✅ OK\" if source_count == dest_count else \"❌ MISMATCH\"\n                \n                if source_count != dest_count:\n                    all_match = False\n                \n                print(f\"{table_name:<20} {source_count:<10} {dest_count:<10} {status:<10}\")\n            \n            print(\"-\" * 50)\n            \n            if all_match:\n                print(\"✅ Migration verification successful! All record counts match.\")\n                return True\n            else:\n                print(\"❌ Migration verification failed! Some record counts don't match.\")\n                return False\n                \n        except Exception as e:\n            print(f\"❌ Migration verification failed: {e}\")\n            return False\n    \n    def run_migration(self) -> bool:\n        \"\"\"Run the complete migration process.\"\"\"\n        print(\"🚀 SQLGym Database Migration\")\n        print(\"=\" * 50)\n        print(f\"Source: {self.source_url[:50]}...\")\n        print(f\"Destination: {self.destination_url[:50]}...\")\n        print()\n        \n        # Test connections\n        if not self.test_connections():\n            return False\n        \n        # Setup destination schema\n        if not self.setup_destination_schema():\n            return False\n        \n        # Show record counts\n        print(\"\\n📊 Source database record counts:\")\n        self.get_record_counts()\n        \n        # Migrate in dependency order\n        migration_steps = [\n            self.migrate_users,\n            self.migrate_problems,\n            self.migrate_submissions,\n            self.migrate_community_posts,\n            self.migrate_post_likes,\n            self.migrate_post_comments\n        ]\n        \n        for step in migration_steps:\n            if not step():\n                print(f\"\\n❌ Migration failed at step: {step.__name__}\")\n                return False\n        \n        # Verify migration\n        if not self.verify_migration():\n            return False\n        \n        print(\"\\n🎉 Database migration completed successfully!\")\n        print(\"\\nNext steps:\")\n        print(\"1. Update your DATABASE_URL environment variable to point to the local database\")\n        print(\"2. Restart your application\")\n        print(\"3. Test your application thoroughly\")\n        \n        return True\n\n\ndef main():\n    \"\"\"Main function to run the migration.\"\"\"\n    if not SOURCE_DATABASE_URL:\n        print(\"❌ SOURCE_DATABASE_URL not found. Make sure DATABASE_URL is set in your environment.\")\n        return False\n    \n    if LOCAL_DATABASE_URL == \"postgresql://username:password@localhost:5432/sqlgym\":\n        print(\"⚠️ Using default LOCAL_DATABASE_URL. Please set LOCAL_DATABASE_URL environment variable\")\n        print(\"   or update the LOCAL_DATABASE_URL in this script.\")\n        \n        response = input(\"Continue with default URL? (y/N): \")\n        if response.lower() != 'y':\n            print(\"Migration cancelled.\")\n            return False\n    \n    # Run migration\n    migrator = DatabaseMigrator(SOURCE_DATABASE_URL, LOCAL_DATABASE_URL)\n    return migrator.run_migration()\n\n\nif __name__ == \"__main__\":\n    success = main()\n    sys.exit(0 if success else 1)","size_bytes":21354},"client/src/components/AnimatedFields.css":{"content":"/* ===== CSS ANIMATIONS & STYLES ===== */\n\n/* Base animations and keyframes */\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes pulse {\n  0%,\n  100% {\n    transform: scale(1);\n    opacity: 0.8;\n  }\n  50% {\n    transform: scale(1.2);\n    opacity: 1;\n  }\n}\n\n@keyframes bounce {\n  0%,\n  100% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-2px);\n  }\n}\n\n@keyframes skillBarGrow {\n  from {\n    transform: scaleY(0);\n  }\n  to {\n    transform: scaleY(1);\n  }\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -200px 0;\n  }\n  100% {\n    background-position: 200px 0;\n  }\n}\n\n/* ===== COMPANY FIELD STYLES ===== */\n.company-field {\n  display: inline-flex;\n  align-items: center;\n  gap: 6px;\n  padding: 6px 10px;\n  font-size: 12px;\n  font-weight: 500;\n  border-radius: 6px;\n  background: white;\n  color: #374151;\n  border: none;\n  cursor: pointer;\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  position: relative;\n  overflow: hidden;\n  animation: fadeInUp 0.3s ease-out;\n}\n\n/* Dark mode */\n@media (prefers-color-scheme: dark) {\n  .company-field {\n    background: #1f2937;\n    color: #d1d5db;\n  }\n}\n\n/* Hover effects */\n.company-field:hover {\n  transform: translateY(-1px);\n  background: #f3f4f6;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n@media (prefers-color-scheme: dark) {\n  .company-field:hover {\n    background: #374151;\n  }\n}\n\n/* Selected state */\n.company-field.selected {\n  background: #dbeafe;\n  color: #1d4ed8;\n  box-shadow: 0 1px 3px rgba(59, 130, 246, 0.2);\n}\n\n@media (prefers-color-scheme: dark) {\n  .company-field.selected {\n    background: rgba(59, 130, 246, 0.2);\n    color: #93c5fd;\n  }\n}\n\n/* Hover on selected */\n.company-field.selected:hover {\n  background: #bfdbfe;\n  transform: translateY(-1px) scale(1.02);\n  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.25);\n}\n\n@media (prefers-color-scheme: dark) {\n  .company-field.selected:hover {\n    background: rgba(59, 130, 246, 0.3);\n  }\n}\n\n/* Active/pressed state */\n.company-field:active {\n  transform: translateY(0) scale(0.98);\n}\n\n/* Focus state */\n.company-field:focus {\n  outline: none;\n  box-shadow: 0 0 0 2px #3b82f6;\n}\n\n/* Disabled state */\n.company-field.disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n  pointer-events: none;\n}\n\n/* Company icon */\n.company-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.3s ease;\n}\n\n.company-field:hover .company-icon {\n  transform: rotate(180deg);\n  animation: bounce 0.6s ease-in-out;\n}\n\n.company-logo {\n  width: 14px;\n  height: 14px;\n  border-radius: 2px;\n  object-fit: contain;\n}\n\n/* Company name */\n.company-name {\n  white-space: nowrap;\n  transition: color 0.2s ease;\n}\n\n/* Selected dot indicator */\n.selected-dot {\n  width: 4px;\n  height: 4px;\n  border-radius: 50%;\n  background: #3b82f6;\n  opacity: 0;\n  transform: scale(0);\n  transition: all 0.2s ease;\n}\n\n.selected-dot.visible {\n  opacity: 1;\n  transform: scale(1);\n  animation: pulse 1.5s ease-in-out infinite;\n}\n\n/* ===== DIFFICULTY FIELD STYLES ===== */\n.difficulty-field {\n  display: inline-flex;\n  align-items: center;\n  gap: 6px;\n  padding: 6px 10px;\n  font-size: 12px;\n  font-weight: 500;\n  border-radius: 6px;\n  background: white;\n  color: #374151;\n  border: none;\n  cursor: pointer;\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  position: relative;\n  animation: fadeInUp 0.3s ease-out;\n}\n\n@media (prefers-color-scheme: dark) {\n  .difficulty-field {\n    background: #1f2937;\n    color: #d1d5db;\n  }\n}\n\n/* Difficulty-specific colors */\n.difficulty-field.easy.selected {\n  background: #f0fdf4;\n  color: #15803d;\n}\n\n.difficulty-field.medium.selected {\n  background: #fffbeb;\n  color: #d97706;\n}\n\n.difficulty-field.hard.selected {\n  background: #fef2f2;\n  color: #dc2626;\n}\n\n@media (prefers-color-scheme: dark) {\n  .difficulty-field.easy.selected {\n    background: rgba(34, 197, 94, 0.2);\n    color: #86efac;\n  }\n\n  .difficulty-field.medium.selected {\n    background: rgba(245, 158, 11, 0.2);\n    color: #fbbf24;\n  }\n\n  .difficulty-field.hard.selected {\n    background: rgba(239, 68, 68, 0.2);\n    color: #fca5a5;\n  }\n}\n\n/* Hover effects */\n.difficulty-field:hover {\n  transform: translateY(-1px) rotateY(2deg);\n  background: #f3f4f6;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n@media (prefers-color-scheme: dark) {\n  .difficulty-field:hover {\n    background: #374151;\n  }\n}\n\n/* Selected hover effects */\n.difficulty-field.easy.selected:hover {\n  background: #dcfce7;\n  box-shadow: 0 4px 12px rgba(34, 197, 94, 0.2);\n}\n\n.difficulty-field.medium.selected:hover {\n  background: #fef3c7;\n  box-shadow: 0 4px 12px rgba(245, 158, 11, 0.2);\n}\n\n.difficulty-field.hard.selected:hover {\n  background: #fee2e2;\n  box-shadow: 0 4px 12px rgba(239, 68, 68, 0.2);\n}\n\n/* Active state */\n.difficulty-field:active {\n  transform: translateY(0) scale(0.98);\n}\n\n/* Focus state */\n.difficulty-field:focus {\n  outline: none;\n  box-shadow: 0 0 0 2px currentColor;\n}\n\n/* Difficulty icon */\n.difficulty-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.3s ease;\n}\n\n.difficulty-field:hover .difficulty-icon {\n  transform: translateY(-2px) rotate(5deg);\n  animation: bounce 0.5s ease-in-out;\n}\n\n/* Difficulty name */\n.difficulty-name {\n  white-space: nowrap;\n  transition: color 0.2s ease;\n}\n\n/* Skill bars */\n.skill-bars {\n  display: flex;\n  align-items: end;\n  gap: 2px;\n}\n\n.skill-bar {\n  width: 2px;\n  height: 8px;\n  background: #d1d5db;\n  border-radius: 1px;\n  transition: all 0.3s ease;\n  transform-origin: bottom;\n  animation: skillBarGrow 0.3s ease-out;\n}\n\n@media (prefers-color-scheme: dark) {\n  .skill-bar {\n    background: #6b7280;\n  }\n}\n\n/* Skill bar colors when selected */\n.difficulty-field.easy.selected .skill-bar {\n  background: #22c55e;\n}\n\n.difficulty-field.medium.selected .skill-bar {\n  background: #f59e0b;\n}\n\n.difficulty-field.hard.selected .skill-bar {\n  background: #ef4444;\n}\n\n/* Hover effect on skill bars */\n.difficulty-field:hover .skill-bar {\n  height: 10px;\n  transform: scaleY(1.2);\n}\n\n/* Staggered animation for skill bars */\n.skill-bar:nth-child(1) {\n  animation-delay: 0.1s;\n}\n\n.skill-bar:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.skill-bar:nth-child(3) {\n  animation-delay: 0.3s;\n}\n\n/* ===== LAYOUT STYLES ===== */\n.filter-demo {\n  padding: 16px;\n  min-height: 100vh;\n  background: #f9fafb;\n}\n\n@media (prefers-color-scheme: dark) {\n  .filter-demo {\n    background: #111827;\n  }\n}\n\n.demo-container {\n  max-width: 1024px;\n  margin: 0 auto;\n  animation: fadeInUp 0.5s ease-out;\n}\n\n.demo-header {\n  text-align: center;\n  margin-bottom: 24px;\n}\n\n.demo-title {\n  font-size: 20px;\n  font-weight: bold;\n  color: #111827;\n  margin-bottom: 4px;\n}\n\n@media (prefers-color-scheme: dark) {\n  .demo-title {\n    color: white;\n  }\n}\n\n.demo-subtitle {\n  font-size: 14px;\n  color: #6b7280;\n}\n\n@media (prefers-color-scheme: dark) {\n  .demo-subtitle {\n    color: #9ca3af;\n  }\n}\n\n.filters-container {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.filter-section {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.filter-title {\n  font-size: 14px;\n  font-weight: 500;\n  color: #111827;\n}\n\n@media (prefers-color-scheme: dark) {\n  .filter-title {\n    color: white;\n  }\n}\n\n.filter-grid {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n}\n\n.active-filters {\n  padding: 8px 0;\n  animation: fadeInUp 0.3s ease-out;\n}\n\n.active-filters-text {\n  font-size: 14px;\n  color: #1e40af;\n}\n\n@media (prefers-color-scheme: dark) {\n  .active-filters-text {\n    color: #93c5fd;\n  }\n}\n\n.results-section {\n  margin-top: 24px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.result-card {\n  background: white;\n  border-radius: 8px;\n  padding: 16px;\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n  animation: fadeInUp 0.4s ease-out;\n}\n\n@media (prefers-color-scheme: dark) {\n  .result-card {\n    background: #1f2937;\n  }\n}\n\n.result-card:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.result-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 4px;\n}\n\n.result-title {\n  font-weight: 500;\n  color: #111827;\n}\n\n@media (prefers-color-scheme: dark) {\n  .result-title {\n    color: white;\n  }\n}\n\n.result-meta {\n  font-size: 12px;\n  color: #6b7280;\n}\n\n@media (prefers-color-scheme: dark) {\n  .result-meta {\n    color: #9ca3af;\n  }\n}\n\n.result-description {\n  font-size: 14px;\n  color: #6b7280;\n}\n\n@media (prefers-color-scheme: dark) {\n  .result-description {\n    color: #9ca3af;\n  }\n}\n\n/* ===== RESPONSIVE DESIGN ===== */\n@media (max-width: 768px) {\n  .filter-demo {\n    padding: 12px;\n  }\n\n  .demo-title {\n    font-size: 18px;\n  }\n\n  .filter-grid {\n    gap: 6px;\n  }\n\n  .company-field,\n  .difficulty-field {\n    font-size: 11px;\n    padding: 5px 8px;\n  }\n}\n\n/* ===== ACCESSIBILITY ===== */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  .company-field,\n  .difficulty-field {\n    border: 1px solid currentColor;\n  }\n\n  .company-field:focus,\n  .difficulty-field:focus {\n    outline: 2px solid currentColor;\n    outline-offset: 2px;\n  }\n}\n","size_bytes":9360},"client/src/components/CompanyLogo.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Building2 } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { getCompanyInfo, CompanyInfo } from \"@/data/companyLogos\";\n\ninterface CompanyLogoProps {\n  companyName: string | null | undefined;\n  variant?: \"badge\" | \"icon\" | \"full\" | \"minimal\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  showFallback?: boolean;\n  className?: string;\n  onClick?: () => void;\n  \"data-testid\"?: string;\n}\n\n/**\n * CompanyLogo component that displays SVG logos based on company names\n * with fallback support and multiple display variants\n */\nexport function CompanyLogo({\n  companyName,\n  variant = \"badge\",\n  size = \"md\",\n  showFallback = true,\n  className = \"\",\n  onClick,\n  \"data-testid\": testId,\n}: CompanyLogoProps) {\n  const [companyInfo, setCompanyInfo] = useState<CompanyInfo | null>(null);\n  const [logoSrc, setLogoSrc] = useState<string | null>(null);\n  const [logoError, setLogoError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!companyName) {\n      setCompanyInfo(null);\n      setLogoSrc(null);\n      setLogoError(false);\n      setIsLoading(false);\n      return;\n    }\n\n    setIsLoading(true);\n    setLogoError(false);\n    \n    try {\n      const info = getCompanyInfo(companyName);\n      setCompanyInfo(info);\n\n      if (info) {\n        setLogoSrc(info.logoPath);\n      } else {\n        setLogoSrc(null);\n      }\n    } catch (error) {\n      console.error('Error loading company info:', error);\n      setCompanyInfo(null);\n      setLogoSrc(null);\n      setLogoError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [companyName]);\n\n  // Size configurations\n  const sizeConfig = {\n    sm: {\n      logo: \"w-3 h-3\",\n      badge: \"text-xs px-2 py-1\",\n      icon: \"w-4 h-4\",\n      text: \"text-xs\",\n    },\n    md: {\n      logo: \"w-4 h-4\",\n      badge: \"text-xs px-2 py-1\",\n      icon: \"w-5 h-5\",\n      text: \"text-sm\",\n    },\n    lg: {\n      logo: \"w-6 h-6\",\n      badge: \"text-sm px-3 py-1.5\",\n      icon: \"w-6 h-6\",\n      text: \"text-base\",\n    },\n  };\n\n  const config = sizeConfig[size];\n\n  // Handle logo loading error\n  const handleLogoError = () => {\n    setLogoError(true);\n  };\n\n  // If no company name and no fallback, return null\n  if (!companyName && !showFallback) {\n    return null;\n  }\n\n  // If no company name but fallback is enabled\n  if (!companyName && showFallback) {\n    return (\n      <span className={`text-gray-400 ${config.text} ${className}`} data-testid={testId}>\n        -\n      </span>\n    );\n  }\n\n  // Render based on variant\n  switch (variant) {\n    case \"icon\":\n      return (\n        <div \n          className={`flex items-center justify-center ${config.icon} ${className}`}\n          onClick={onClick}\n          data-testid={testId}\n          style={{ \n            color: companyInfo?.primaryColor || \"#6B7280\",\n            cursor: onClick ? \"pointer\" : \"default\"\n          }}\n        >\n          {logoSrc && !logoError ? (\n            <img\n              src={logoSrc}\n              alt={`${companyName} logo`}\n              className={`${config.logo} object-contain`}\n              onError={handleLogoError}\n              style={{ \n                filter: companyInfo ? 'none' : 'grayscale(100%)',\n              }}\n            />\n          ) : (\n            <Building2 className={config.icon} />\n          )}\n        </div>\n      );\n\n    case \"minimal\":\n      return (\n        <div \n          className={`inline-flex items-center gap-1.5 ${className}`}\n          onClick={onClick}\n          data-testid={testId}\n          style={{ cursor: onClick ? \"pointer\" : \"default\" }}\n        >\n          {logoSrc && !logoError ? (\n            <img\n              src={logoSrc}\n              alt={`${companyName} logo`}\n              className={`${config.logo} object-contain`}\n              onError={handleLogoError}\n            />\n          ) : (\n            <Building2 className={config.logo} style={{ color: companyInfo?.primaryColor || \"#6B7280\" }} />\n          )}\n          <span className={`${config.text} font-medium`} style={{ color: companyInfo?.primaryColor || \"#374151\" }}>\n            {companyName}\n          </span>\n        </div>\n      );\n\n    case \"full\":\n      return (\n        <div\n          className={`company-field ${companyInfo ? \"selected\" : \"\"} ${className}`}\n          onClick={onClick}\n          data-testid={testId}\n          style={{\n            backgroundColor: companyInfo?.primaryColor ? `${companyInfo.primaryColor}10` : undefined,\n            borderColor: companyInfo?.primaryColor ? `${companyInfo.primaryColor}30` : undefined,\n          }}\n        >\n          <span className=\"company-icon\">\n            {logoSrc && !logoError ? (\n              <img\n                src={logoSrc}\n                alt={`${companyName} logo`}\n                className=\"company-logo\"\n                onError={handleLogoError}\n              />\n            ) : (\n              <Building2 className=\"w-3.5 h-3.5\" style={{ color: companyInfo?.primaryColor || \"#6B7280\" }} />\n            )}\n          </span>\n          <span className=\"company-name\" style={{ color: companyInfo?.primaryColor || \"#374151\" }}>\n            {companyInfo?.displayName || companyName}\n          </span>\n          <span className={`selected-dot ${companyInfo ? \"visible\" : \"\"}`} />\n        </div>\n      );\n\n    case \"badge\":\n    default:\n      return (\n        <Badge\n          variant=\"outline\"\n          className={`bg-blue-50 text-blue-700 border-blue-200 ${config.badge} flex items-center gap-1.5 ${className}`}\n          onClick={onClick}\n          data-testid={testId}\n          style={{\n            backgroundColor: companyInfo?.primaryColor ? `${companyInfo.primaryColor}15` : undefined,\n            borderColor: companyInfo?.primaryColor ? `${companyInfo.primaryColor}40` : undefined,\n            color: companyInfo?.primaryColor || \"#1D4ED8\",\n            cursor: onClick ? \"pointer\" : \"default\"\n          }}\n        >\n          {logoSrc && !logoError ? (\n            <img\n              src={logoSrc}\n              alt={`${companyName} logo`}\n              className={`${config.logo} object-contain`}\n              onError={handleLogoError}\n            />\n          ) : (\n            <Building2 className={config.logo} />\n          )}\n          {companyInfo?.displayName || companyName}\n        </Badge>\n      );\n  }\n}\n\n/**\n * Simplified component for backward compatibility\n */\nexport function CompanyBadge({ companyName, className, ...props }: Omit<CompanyLogoProps, \"variant\">) {\n  return (\n    <CompanyLogo\n      companyName={companyName}\n      variant=\"badge\"\n      className={className}\n      {...props}\n    />\n  );\n}\n\nexport default CompanyLogo;","size_bytes":6693},"client/src/components/DifficultyBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Target, Zap, Flame, Award } from \"lucide-react\";\n\ninterface DifficultyBadgeProps {\n  difficulty: string;\n  variant?: \"badge\" | \"full\" | \"minimal\" | \"skill\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  showIcon?: boolean;\n  showBars?: boolean;\n  className?: string;\n  onClick?: () => void;\n  \"data-testid\"?: string;\n}\n\ntype DifficultyLevel = \"Easy\" | \"Medium\" | \"Hard\" | \"Expert\" | (string & {});\n\ninterface DifficultyConfig {\n  level: DifficultyLevel;\n  colors: {\n    bg: string;\n    text: string;\n    border: string;\n    primary: string;\n    secondary: string;\n  };\n  icon: typeof Target;\n  bars: number;\n  label: string;\n  description: string;\n}\n\nconst DIFFICULTY_CONFIG: Record<string, DifficultyConfig> = {\n  easy: {\n    level: \"Easy\",\n    colors: {\n      bg: \"bg-green-50\",\n      text: \"text-green-700\",\n      border: \"border-green-200\", \n      primary: \"#15803d\",\n      secondary: \"#22c55e\",\n    },\n    icon: Target,\n    bars: 1,\n    label: \"Easy\",\n    description: \"Perfect for beginners\",\n  },\n  medium: {\n    level: \"Medium\",\n    colors: {\n      bg: \"bg-orange-50\",\n      text: \"text-orange-700\",\n      border: \"border-orange-200\",\n      primary: \"#ea580c\",\n      secondary: \"#f97316\",\n    },\n    icon: Zap,\n    bars: 2,\n    label: \"Medium\",\n    description: \"Requires some experience\",\n  },\n  hard: {\n    level: \"Hard\",\n    colors: {\n      bg: \"bg-red-50\",\n      text: \"text-red-700\",\n      border: \"border-red-200\",\n      primary: \"#dc2626\",\n      secondary: \"#ef4444\",\n    },\n    icon: Flame,\n    bars: 3,\n    label: \"Hard\",\n    description: \"For experienced developers\",\n  },\n  expert: {\n    level: \"Expert\",\n    colors: {\n      bg: \"bg-purple-50\",\n      text: \"text-purple-700\",\n      border: \"border-purple-200\",\n      primary: \"#7c3aed\",\n      secondary: \"#8b5cf6\",\n    },\n    icon: Award,\n    bars: 4,\n    label: \"Expert\",\n    description: \"Challenge for experts\",\n  },\n};\n\n/**\n * Generate dynamic difficulty configuration for unknown difficulty levels\n * Creates appropriate colors and styling based on difficulty name\n */\nfunction generateDynamicDifficultyConfig(difficulty: string): DifficultyConfig {\n  const normalizedDifficulty = difficulty.trim();\n  const hash = normalizedDifficulty.split('').reduce((a, b) => {\n    a = ((a << 5) - a) + b.charCodeAt(0);\n    return a & a;\n  }, 0);\n  \n  // Generate colors based on hash for consistency\n  const hue = Math.abs(hash) % 360;\n  const saturation = 70;\n  const lightness = 60;\n  \n  const primaryColor = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n  const secondaryColor = `hsl(${hue}, ${saturation - 10}%, ${lightness + 10}%)`;\n  const bgColor = `hsl(${hue}, ${saturation - 50}%, 97%)`;\n  const textColor = `hsl(${hue}, ${saturation}%, 30%)`;\n  const borderColor = `hsl(${hue}, ${saturation - 30}%, 85%)`;\n  \n  // Determine bars based on common difficulty patterns\n  let bars = 2; // default\n  const lowerDifficulty = normalizedDifficulty.toLowerCase();\n  if (lowerDifficulty.includes('easy') || lowerDifficulty.includes('beginner') || lowerDifficulty.includes('basic')) {\n    bars = 1;\n  } else if (lowerDifficulty.includes('expert') || lowerDifficulty.includes('master') || lowerDifficulty.includes('advanced')) {\n    bars = 4;\n  } else if (lowerDifficulty.includes('hard') || lowerDifficulty.includes('difficult') || lowerDifficulty.includes('complex')) {\n    bars = 3;\n  }\n  \n  return {\n    level: normalizedDifficulty,\n    colors: {\n      bg: `bg-gray-50`, // Use neutral background for better control\n      text: `text-gray-700`, // Use neutral text for better control  \n      border: `border-gray-200`, // Use neutral border for better control\n      primary: primaryColor,\n      secondary: secondaryColor,\n    },\n    icon: Target, // Default icon for unknown difficulties\n    bars,\n    label: normalizedDifficulty,\n    description: `${normalizedDifficulty} level challenge`,\n  };\n}\n\n/**\n * Enhanced difficulty badge component with multiple variants and improved styling\n * Now supports dynamic difficulty levels from the database with automatic color generation\n */\nexport function DifficultyBadge({\n  difficulty,\n  variant = \"badge\",\n  size = \"md\",\n  showIcon = true,\n  showBars = false,\n  className = \"\",\n  onClick,\n  \"data-testid\": testId,\n}: DifficultyBadgeProps) {\n  const difficultyKey = difficulty?.toLowerCase() || \"easy\";\n  \n  // Get config from predefined list or generate dynamic config for unknown difficulties\n  const config = DIFFICULTY_CONFIG[difficultyKey] || generateDynamicDifficultyConfig(difficulty || \"easy\");\n  const IconComponent = config.icon;\n\n  // Size configurations\n  const sizeConfig = {\n    sm: {\n      badge: \"text-xs px-2 py-0.5\",\n      icon: \"w-3 h-3\",\n      text: \"text-xs\",\n      bar: \"w-1 h-2\",\n      gap: \"gap-1\",\n    },\n    md: {\n      badge: \"text-xs px-2 py-1\",\n      icon: \"w-3.5 h-3.5\",\n      text: \"text-sm\",\n      bar: \"w-1.5 h-3\",\n      gap: \"gap-1.5\",\n    },\n    lg: {\n      badge: \"text-sm px-3 py-1.5\",\n      icon: \"w-4 h-4\",\n      text: \"text-base\",\n      bar: \"w-2 h-4\",\n      gap: \"gap-2\",\n    },\n  };\n\n  const sizeConf = sizeConfig[size];\n\n  // Skill bars component\n  const SkillBars = ({ count }: { count: number }) => (\n    <div className={`flex items-end ${sizeConf.gap}`}>\n      {Array.from({ length: 4 }, (_, i) => (\n        <div\n          key={i}\n          className={`${sizeConf.bar} rounded-sm transition-all duration-300 ease-out`}\n          style={{\n            backgroundColor: i < count ? config.colors.primary : \"#d1d5db\",\n            animationDelay: `${i * 100}ms`,\n          }}\n        />\n      ))}\n    </div>\n  );\n\n  // Render based on variant\n  switch (variant) {\n    case \"minimal\":\n      return (\n        <span\n          className={`inline-flex items-center ${sizeConf.gap} ${sizeConf.text} font-medium ${className}`}\n          onClick={onClick}\n          data-testid={testId}\n          style={{ \n            color: config.colors.primary,\n            cursor: onClick ? \"pointer\" : \"default\"\n          }}\n        >\n          {showIcon && <IconComponent className={sizeConf.icon} />}\n          {config.label}\n        </span>\n      );\n\n    case \"skill\":\n      return (\n        <div\n          className={`inline-flex items-center ${sizeConf.gap} ${className}`}\n          onClick={onClick}\n          data-testid={testId}\n          style={{ cursor: onClick ? \"pointer\" : \"default\" }}\n        >\n          {showIcon && (\n            <IconComponent \n              className={sizeConf.icon} \n              style={{ color: config.colors.primary }}\n            />\n          )}\n          <span \n            className={`${sizeConf.text} font-medium`}\n            style={{ color: config.colors.primary }}\n          >\n            {config.label}\n          </span>\n          <SkillBars count={config.bars} />\n        </div>\n      );\n\n    case \"full\":\n      // Check if this is a custom (dynamic) configuration\n      const isCustomConfigFull = !DIFFICULTY_CONFIG[difficultyKey];\n      \n      return (\n        <div\n          className={`difficulty-field ${difficultyKey} selected ${className}`}\n          onClick={onClick}\n          data-testid={testId}\n          style={{\n            ...(isCustomConfigFull && {\n              backgroundColor: config.colors.primary + '15', // 15% opacity\n              borderColor: config.colors.primary + '40', // 40% opacity\n            })\n          }}\n        >\n          <span className=\"difficulty-icon\">\n            {showIcon ? (\n              <IconComponent className=\"w-3.5 h-3.5\" style={{ color: config.colors.primary }} />\n            ) : (\n              \"🎯\"\n            )}\n          </span>\n          <span \n            className=\"difficulty-name\"\n            style={{\n              ...(isCustomConfigFull && {\n                color: config.colors.primary\n              })\n            }}\n          >\n            {config.label}\n          </span>\n          {showBars && (\n            <div className=\"skill-bars\">\n              {Array.from({ length: 3 }, (_, i) => (\n                <div\n                  key={i}\n                  className=\"skill-bar\"\n                  style={{\n                    background: i < config.bars ? config.colors.secondary : \"#d1d5db\",\n                  }}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      );\n\n    case \"badge\":\n    default:\n      // Check if this is a custom (dynamic) configuration\n      const isCustomConfig = !DIFFICULTY_CONFIG[difficultyKey];\n      \n      return (\n        <Badge\n          className={`${config.colors.bg} ${config.colors.text} ${config.colors.border} border font-medium inline-flex items-center ${sizeConf.gap} ${sizeConf.badge} ${className}`}\n          onClick={onClick}\n          data-testid={testId}\n          style={{ \n            cursor: onClick ? \"pointer\" : \"default\",\n            // Apply custom colors for dynamic configurations\n            ...(isCustomConfig && {\n              backgroundColor: config.colors.primary + '20', // 20% opacity\n              borderColor: config.colors.primary + '50', // 50% opacity\n              color: config.colors.primary,\n            })\n          }}\n        >\n          {showIcon && <IconComponent className={sizeConf.icon} />}\n          {config.label}\n          {showBars && (\n            <div className={`flex items-end ${sizeConf.gap} ml-1`}>\n              {Array.from({ length: 3 }, (_, i) => (\n                <div\n                  key={i}\n                  className={`${sizeConf.bar} rounded-sm`}\n                  style={{\n                    backgroundColor: i < config.bars ? config.colors.primary : \"#d1d5db\",\n                  }}\n                />\n              ))}\n            </div>\n          )}\n        </Badge>\n      );\n  }\n}\n\n/**\n * Get difficulty color classes for legacy compatibility\n * Now supports dynamic difficulties with custom colors\n */\nexport function getDifficultyColor(difficulty: string): string {\n  const difficultyKey = difficulty?.toLowerCase() || \"easy\";\n  const config = DIFFICULTY_CONFIG[difficultyKey] || generateDynamicDifficultyConfig(difficulty || \"easy\");\n  \n  // For custom configurations, return inline styles via CSS classes\n  const isCustomConfig = !DIFFICULTY_CONFIG[difficultyKey];\n  if (isCustomConfig) {\n    return `text-gray-700 bg-gray-50 border-gray-200`; // Neutral classes for custom colors\n  }\n  \n  return `${config.colors.text} ${config.colors.bg} ${config.colors.border}`;\n}\n\n/**\n * Get difficulty configuration\n * Now supports dynamic difficulties\n */\nexport function getDifficultyConfig(difficulty: string): DifficultyConfig {\n  const difficultyKey = difficulty?.toLowerCase() || \"easy\";\n  return DIFFICULTY_CONFIG[difficultyKey] || generateDynamicDifficultyConfig(difficulty || \"easy\");\n}\n\n/**\n * Simplified component for backward compatibility\n */\nexport function DifficultyTag({ difficulty, className, ...props }: Omit<DifficultyBadgeProps, \"variant\">) {\n  return (\n    <DifficultyBadge\n      difficulty={difficulty}\n      variant=\"badge\"\n      className={className}\n      {...props}\n    />\n  );\n}\n\nexport default DifficultyBadge;","size_bytes":11066},"client/src/data/companyLogos.ts":{"content":"/**\n * AUTO-GENERATED FILE - DO NOT EDIT MANUALLY\n * Generated by scripts/generate-logos.js\n * Run 'npm run generate:logos' to regenerate\n */\n\nimport airbnbLogo from '@assets/logos/airbnb.svg';\nimport amazonLogo from '@assets/logos/amazon.svg';\nimport appleLogo from '@assets/logos/apple.svg';\nimport googleLogo from '@assets/logos/google.svg';\nimport mcdonaldLogo from '@assets/logos/mcdonald.svg';\nimport metaLogo from '@assets/logos/meta.svg';\nimport microsoftLogo from '@assets/logos/microsoft.svg';\nimport netflixLogo from '@assets/logos/netflix.svg';\nimport snapchatLogo from '@assets/logos/snapchat.svg';\nimport stripeLogo from '@assets/logos/stripe.svg';\n\nexport interface CompanyInfo {\n  id: string;\n  name: string;\n  displayName: string;\n  logoPath: string;\n  primaryColor: string;\n  secondaryColor?: string;\n}\n\n// Auto-generated logo registry\nconst LOGO_REGISTRY: Record<string, string> = {\n  airbnb: airbnbLogo,\n  amazon: amazonLogo,\n  apple: appleLogo,\n  google: googleLogo,\n  mcdonald: mcdonaldLogo,\n  meta: metaLogo,\n  microsoft: microsoftLogo,\n  netflix: netflixLogo,\n  snapchat: snapchatLogo,\n  stripe: stripeLogo,\n};\n\n// Default color configurations for known companies\nconst COMPANY_COLORS: Record<string, Pick<CompanyInfo, 'primaryColor' | 'secondaryColor'>> = {\n  microsoft: {\n    primaryColor: '#00BCF2',\n    secondaryColor: '#0078D4',\n  },\n  google: {\n    primaryColor: '#4285F4',\n    secondaryColor: '#DB4437',\n  },\n  apple: {\n    primaryColor: '#000000',\n    secondaryColor: '#A8A8A8',\n  },\n  amazon: {\n    primaryColor: '#FF9900',\n    secondaryColor: '#232F3E',\n  },\n  meta: {\n    primaryColor: '#1877F2',\n    secondaryColor: '#42B883',\n  },\n  netflix: {\n    primaryColor: '#E50914',\n    secondaryColor: '#221F1F',\n  },\n  stripe: {\n    primaryColor: '#635BFF',\n    secondaryColor: '#0A2540',\n  },\n  airbnb: {\n    primaryColor: '#FF5A5F',\n    secondaryColor: '#FF385C',\n  },\n  tesla: {\n    primaryColor: '#CC0000',\n    secondaryColor: '#000000',\n  },\n  uber: {\n    primaryColor: '#000000',\n    secondaryColor: '#1FBAD6',\n  },\n  shopify: {\n    primaryColor: '#7AB55C',\n    secondaryColor: '#95BF47',\n  },\n  discord: {\n    primaryColor: '#5865F2',\n    secondaryColor: '#7289DA',\n  },\n  slack: {\n    primaryColor: '#4A154B',\n    secondaryColor: '#36C5F0',\n  },\n};\n\n/**\n * Normalizes company name to match expected filename format\n */\nfunction normalizeCompanyName(companyName: string): string {\n  return companyName.toLowerCase()\n    .trim()\n    .replace(/\\s+/g, '')\n    .replace(/[^a-z0-9]/g, '');\n}\n\n/**\n * Gets company info by name using auto-generated logo registry\n */\nexport function getCompanyInfo(companyName: string): CompanyInfo | null {\n  if (!companyName) return null;\n  \n  const normalizedName = normalizeCompanyName(companyName);\n  const logoPath = LOGO_REGISTRY[normalizedName];\n  \n  // If no logo found, return null\n  if (!logoPath) return null;\n  \n  // Get colors from config or use defaults\n  const colors = COMPANY_COLORS[normalizedName] || {\n    primaryColor: '#6366F1', // Default indigo\n    secondaryColor: '#4F46E5',\n  };\n  \n  // Create display name (capitalize first letter of each word)\n  const displayName = companyName\n    .toLowerCase()\n    .split(/\\s+/)\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n  \n  return {\n    id: normalizedName,\n    name: displayName,\n    displayName: displayName,\n    logoPath: logoPath,\n    primaryColor: colors.primaryColor,\n    secondaryColor: colors.secondaryColor,\n  };\n}\n\n/**\n * Gets company info by ID\n */\nexport function getCompanyById(id: string): CompanyInfo | null {\n  return getCompanyInfo(id);\n}\n\n/**\n * Generates a company ID from a company name\n */\nexport function generateCompanyId(companyName: string): string {\n  return normalizeCompanyName(companyName);\n}\n\n/**\n * Gets all available companies (those in the logo registry)\n */\nexport function getAllCompanies(): CompanyInfo[] {\n  const companies: CompanyInfo[] = [];\n  \n  for (const [normalizedName, logoPath] of Object.entries(LOGO_REGISTRY)) {\n    const colors = COMPANY_COLORS[normalizedName] || {\n      primaryColor: '#6366F1',\n      secondaryColor: '#4F46E5',\n    };\n    \n    const displayName = normalizedName.charAt(0).toUpperCase() + normalizedName.slice(1);\n    \n    companies.push({\n      id: normalizedName,\n      name: displayName,\n      displayName: displayName,\n      logoPath: logoPath,\n      primaryColor: colors.primaryColor,\n      secondaryColor: colors.secondaryColor,\n    });\n  }\n  \n  return companies;\n}\n\n/**\n * Checks if a company logo exists\n */\nexport function hasCompanyLogo(companyName: string): boolean {\n  const info = getCompanyInfo(companyName);\n  return info !== null;\n}\n","size_bytes":4681},"scripts/generate-logos.js":{"content":"#!/usr/bin/env node\n/**\n * Auto-generates companyLogos.ts based on SVG files in attached_assets/logos/\n * Run this script before building or in CI/CD pipeline\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst LOGOS_DIR = path.join(__dirname, '..', 'attached_assets', 'logos');\nconst OUTPUT_FILE = path.join(__dirname, '..', 'client', 'src', 'data', 'companyLogos.ts');\n\n// Default colors for companies\nconst COMPANY_COLORS = {\n  microsoft: { primaryColor: '#00BCF2', secondaryColor: '#0078D4' },\n  google: { primaryColor: '#4285F4', secondaryColor: '#DB4437' },\n  apple: { primaryColor: '#000000', secondaryColor: '#A8A8A8' },\n  amazon: { primaryColor: '#FF9900', secondaryColor: '#232F3E' },\n  meta: { primaryColor: '#1877F2', secondaryColor: '#42B883' },\n  netflix: { primaryColor: '#E50914', secondaryColor: '#221F1F' },\n  stripe: { primaryColor: '#635BFF', secondaryColor: '#0A2540' },\n  airbnb: { primaryColor: '#FF5A5F', secondaryColor: '#FF385C' },\n  tesla: { primaryColor: '#CC0000', secondaryColor: '#000000' },\n  uber: { primaryColor: '#000000', secondaryColor: '#1FBAD6' },\n  shopify: { primaryColor: '#7AB55C', secondaryColor: '#95BF47' },\n  discord: { primaryColor: '#5865F2', secondaryColor: '#7289DA' },\n  slack: { primaryColor: '#4A154B', secondaryColor: '#36C5F0' },\n};\n\nfunction normalizeCompanyName(filename) {\n  return path.basename(filename, '.svg').toLowerCase().replace(/[^a-z0-9]/g, '');\n}\n\nfunction generateCompanyLogos() {\n  console.log('🚀 Generating company logos...');\n  \n  if (!fs.existsSync(LOGOS_DIR)) {\n    console.error(`❌ Logos directory not found: ${LOGOS_DIR}`);\n    process.exit(1);\n  }\n\n  // Get all SVG files\n  const svgFiles = fs.readdirSync(LOGOS_DIR)\n    .filter(file => file.endsWith('.svg'))\n    .sort();\n\n  if (svgFiles.length === 0) {\n    console.warn('⚠️ No SVG files found in logos directory');\n    return;\n  }\n\n  console.log(`📁 Found ${svgFiles.length} logo files:`, svgFiles.map(f => f.replace('.svg', '')).join(', '));\n\n  // Generate imports\n  const imports = svgFiles.map(file => {\n    const normalizedName = normalizeCompanyName(file);\n    const varName = `${normalizedName}Logo`;\n    return `import ${varName} from '@assets/logos/${file}';`;\n  }).join('\\n');\n\n  // Generate registry\n  const registryEntries = svgFiles.map(file => {\n    const normalizedName = normalizeCompanyName(file);\n    const varName = `${normalizedName}Logo`;\n    return `  ${normalizedName}: ${varName},`;\n  }).join('\\n');\n\n  // Generate colors object\n  const colorsEntries = Object.entries(COMPANY_COLORS)\n    .map(([company, colors]) => \n      `  ${company}: {\\n    primaryColor: '${colors.primaryColor}',\\n    secondaryColor: '${colors.secondaryColor}',\\n  },`\n    ).join('\\n');\n\n  const fileContent = `/**\n * AUTO-GENERATED FILE - DO NOT EDIT MANUALLY\n * Generated by scripts/generate-logos.js\n * Run 'npm run generate:logos' to regenerate\n */\n\n${imports}\n\nexport interface CompanyInfo {\n  id: string;\n  name: string;\n  displayName: string;\n  logoPath: string;\n  primaryColor: string;\n  secondaryColor?: string;\n}\n\n// Auto-generated logo registry\nconst LOGO_REGISTRY: Record<string, string> = {\n${registryEntries}\n};\n\n// Default color configurations for known companies\nconst COMPANY_COLORS: Record<string, Pick<CompanyInfo, 'primaryColor' | 'secondaryColor'>> = {\n${colorsEntries}\n};\n\n/**\n * Normalizes company name to match expected filename format\n */\nfunction normalizeCompanyName(companyName: string): string {\n  return companyName.toLowerCase()\n    .trim()\n    .replace(/\\\\s+/g, '')\n    .replace(/[^a-z0-9]/g, '');\n}\n\n/**\n * Gets company info by name using auto-generated logo registry\n */\nexport function getCompanyInfo(companyName: string): CompanyInfo | null {\n  if (!companyName) return null;\n  \n  const normalizedName = normalizeCompanyName(companyName);\n  const logoPath = LOGO_REGISTRY[normalizedName];\n  \n  // If no logo found, return null\n  if (!logoPath) return null;\n  \n  // Get colors from config or use defaults\n  const colors = COMPANY_COLORS[normalizedName] || {\n    primaryColor: '#6366F1', // Default indigo\n    secondaryColor: '#4F46E5',\n  };\n  \n  // Create display name (capitalize first letter of each word)\n  const displayName = companyName\n    .toLowerCase()\n    .split(/\\\\s+/)\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n  \n  return {\n    id: normalizedName,\n    name: displayName,\n    displayName: displayName,\n    logoPath: logoPath,\n    primaryColor: colors.primaryColor,\n    secondaryColor: colors.secondaryColor,\n  };\n}\n\n/**\n * Gets company info by ID\n */\nexport function getCompanyById(id: string): CompanyInfo | null {\n  return getCompanyInfo(id);\n}\n\n/**\n * Generates a company ID from a company name\n */\nexport function generateCompanyId(companyName: string): string {\n  return normalizeCompanyName(companyName);\n}\n\n/**\n * Gets all available companies (those in the logo registry)\n */\nexport function getAllCompanies(): CompanyInfo[] {\n  const companies: CompanyInfo[] = [];\n  \n  for (const [normalizedName, logoPath] of Object.entries(LOGO_REGISTRY)) {\n    const colors = COMPANY_COLORS[normalizedName] || {\n      primaryColor: '#6366F1',\n      secondaryColor: '#4F46E5',\n    };\n    \n    const displayName = normalizedName.charAt(0).toUpperCase() + normalizedName.slice(1);\n    \n    companies.push({\n      id: normalizedName,\n      name: displayName,\n      displayName: displayName,\n      logoPath: logoPath,\n      primaryColor: colors.primaryColor,\n      secondaryColor: colors.secondaryColor,\n    });\n  }\n  \n  return companies;\n}\n\n/**\n * Checks if a company logo exists\n */\nexport function hasCompanyLogo(companyName: string): boolean {\n  const info = getCompanyInfo(companyName);\n  return info !== null;\n}\n`;\n\n  fs.writeFileSync(OUTPUT_FILE, fileContent);\n  console.log(`✅ Generated ${OUTPUT_FILE} with ${svgFiles.length} company logos`);\n}\n\n// Run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  generateCompanyLogos();\n}\n\nexport { generateCompanyLogos };","size_bytes":6146},"client/src/components/CodeEditor.tsx":{"content":"import { memo, useState, useCallback, useEffect } from 'react';\nimport { Play, Save } from 'lucide-react';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useTheme } from '@/hooks/use-theme';\nimport { useCodeMirrorConfig } from '@/hooks/use-codemirror-config';\n\ninterface Problem {\n  question?: {\n    starterQuery?: string;\n    tables?: Array<{ name: string }>;\n  };\n}\n\ninterface CodeEditorProps {\n  problem?: Problem;\n  onRunQuery: (query: string) => Promise<any>;\n  onSubmitSolution: (query: string) => Promise<any>;\n  isRunning?: boolean;\n  isSubmitting?: boolean;\n  className?: string;\n}\n\nconst CodeEditor = memo(function CodeEditor({\n  problem,\n  onRunQuery,\n  onSubmitSolution,\n  isRunning = false,\n  isSubmitting = false,\n  className,\n}: CodeEditorProps) {\n  const [query, setQuery] = useState('');\n  const isDarkMode = useTheme();\n\n  // Initialize query when problem loads\n  useEffect(() => {\n    if (problem?.question?.starterQuery) {\n      setQuery(problem.question.starterQuery);\n    } else if (problem?.question?.tables && problem.question.tables.length > 0) {\n      const firstTable = problem.question.tables[0];\n      const tableName = firstTable.name;\n      setQuery(`SELECT * FROM \"${tableName}\";`);\n    }\n  }, [problem]);\n\n  // Memoized handlers to prevent recreation\n  const handleRun = useCallback(async () => {\n    if (!query.trim()) return;\n    await onRunQuery(query);\n  }, [query, onRunQuery]);\n\n  const handleSubmit = useCallback(async () => {\n    if (!query.trim()) return;\n    await onSubmitSolution(query);\n    localStorage.setItem(\"sqlgym_last_query\", query);\n  }, [query, onSubmitSolution]);\n\n  // Get optimized CodeMirror configuration\n  const { extensions, theme } = useCodeMirrorConfig({\n    problem,\n    isDarkMode,\n    onRunQuery: handleRun,\n  });\n\n  return (\n    <div className={`h-full flex flex-col ${className || ''}`}>\n      <div className=\"flex-1 flex flex-col min-h-0\">\n        <Card className=\"flex-1 flex flex-col overflow-hidden rounded-none border-0\">\n          <CardContent className=\"p-0 flex-1 min-h-0 overflow-hidden\">\n            <CodeMirror\n              value={query}\n              onChange={(value) => setQuery(value)}\n              height=\"calc(100vh - 200px)\"\n              theme={theme}\n              extensions={extensions}\n              basicSetup={{\n                lineNumbers: true,\n                foldGutter: true,\n                dropCursor: false,\n                allowMultipleSelections: false,\n                indentOnInput: true,\n                bracketMatching: true,\n                closeBrackets: true,\n                autocompletion: false,\n                highlightSelectionMatches: false,\n                searchKeymap: true,\n                tabSize: 2,\n              }}\n              data-testid=\"editor-sql\"\n              className=\"sqlgym-editor\"\n            />\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex-shrink-0 p-2 bg-muted/30\">\n        <div className=\"flex justify-end gap-3\">\n          <Button\n            onClick={handleRun}\n            disabled={isRunning || !query.trim()}\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90 font-semibold h-8\"\n            data-testid=\"button-run-query\"\n          >\n            <Play className=\"mr-2 h-4 w-4\" />\n            {isRunning ? \"Running...\" : \"Run Code\"}\n          </Button>\n\n          <Button\n            onClick={handleSubmit}\n            disabled={isSubmitting || !query.trim()}\n            className=\"bg-green-600 hover:bg-green-700 text-white font-semibold h-8\"\n            data-testid=\"button-submit\"\n          >\n            <Save className=\"mr-2 h-4 w-4\" />\n            {isSubmitting ? \"Submitting...\" : \"Check Solution\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default CodeEditor;","size_bytes":3960},"client/src/components/DatabaseSelector.tsx":{"content":"import { memo, useState } from 'react';\nimport { ChevronDown } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\ninterface DatabaseSelectorProps {\n  className?: string;\n}\n\nconst DatabaseSelector = memo(function DatabaseSelector({ className }: DatabaseSelectorProps) {\n  const [selectedDatabase, setSelectedDatabase] = useState(\"PostgreSQL 14\");\n\n  const databases = [\n    \"PostgreSQL 14\",\n    \"PostgreSQL 15\", \n    \"PostgreSQL 16\",\n    \"MySQL 8.0\",\n    \"SQLite\"\n  ];\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className={`h-7 px-2 text-xs text-muted-foreground hover:text-foreground border border-border bg-muted ${className || ''}`}\n          data-testid=\"button-db-selector\"\n        >\n          <span>{selectedDatabase}</span>\n          <ChevronDown className=\"h-3 w-3 ml-1\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-48\">\n        {databases.map((db) => (\n          <DropdownMenuItem\n            key={db}\n            onClick={() => setSelectedDatabase(db)}\n            className={selectedDatabase === db ? \"bg-accent\" : \"\"}\n          >\n            {db}\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n});\n\nexport default DatabaseSelector;","size_bytes":1495},"client/src/components/EditorHeader.tsx":{"content":"import { memo } from 'react';\nimport { CardHeader } from '@/components/ui/card';\nimport { CompanyLogo } from '@/components/CompanyLogo';\nimport { DifficultyBadge } from '@/components/DifficultyBadge';\nimport TimerControls from '@/components/TimerControls';\nimport DatabaseSelector from '@/components/DatabaseSelector';\n\ninterface EditorHeaderProps {\n  company: string;\n  difficulty: string;\n  onCompanyClick: (company: string) => void;\n  onDifficultyClick: (difficulty: string) => void;\n  className?: string;\n}\n\nconst EditorHeader = memo(function EditorHeader({\n  company,\n  difficulty,\n  onCompanyClick,\n  onDifficultyClick,\n  className,\n}: EditorHeaderProps) {\n  return (\n    <CardHeader className={`bg-muted/50 px-4 py-2 flex-shrink-0 ${className || ''}`}>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          {/* Company field */}\n          <CompanyLogo\n            companyName={company}\n            variant=\"full\"\n            size=\"md\"\n            onClick={() => onCompanyClick(company)}\n            data-testid=\"company-selector\"\n          />\n\n          {/* Difficulty field */}\n          <DifficultyBadge\n            difficulty={difficulty}\n            variant=\"full\"\n            size=\"md\"\n            showIcon={true}\n            showBars={true}\n            onClick={() => onDifficultyClick(difficulty)}\n            data-testid=\"difficulty-selector\"\n          />\n        </div>\n\n        <div className=\"flex items-center space-x-3\">\n          {/* Timer Controls */}\n          <TimerControls />\n\n          {/* Database Selector */}\n          <DatabaseSelector />\n        </div>\n      </div>\n    </CardHeader>\n  );\n});\n\nexport default EditorHeader;","size_bytes":1722},"client/src/components/OptimizedEditorOutputSplit.tsx":{"content":"import { memo, useState, useCallback } from \"react\";\nimport EditorHeader from \"@/components/EditorHeader\";\nimport CodeEditor from \"@/components/CodeEditor\";\nimport OutputPanel from \"@/components/OutputPanel\";\nimport VerticalResizableSplitter from \"@/components/vertical-resizable-splitter\";\n\ninterface Problem {\n  company?: string;\n  difficulty?: string;\n  question?: {\n    starterQuery?: string;\n    tables?: Array<{ name: string }>;\n  };\n}\n\ninterface QueryResult {\n  error?: boolean;\n  message?: string;\n  isCorrect?: boolean;\n  executionTime?: number;\n}\n\ninterface OptimizedEditorOutputSplitProps {\n  problem?: Problem;\n  handleRunQuery: (query: string) => Promise<any>;\n  handleSubmitSolution: (query: string) => Promise<any>;\n  onDifficultyClick: (difficulty: string) => void;\n  onCompanyClick: (company: string) => void;\n  className?: string;\n}\n\nconst OptimizedEditorOutputSplit = memo(function OptimizedEditorOutputSplit({\n  problem,\n  handleRunQuery,\n  handleSubmitSolution,\n  onDifficultyClick,\n  onCompanyClick,\n  className,\n}: OptimizedEditorOutputSplitProps) {\n  const [result, setResult] = useState<QueryResult | null>(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showOutput, setShowOutput] = useState(false);\n\n  const selectedCompany = problem?.company || \"NY Times\";\n  const selectedDifficulty = problem?.difficulty || \"Medium\";\n\n  // Optimized run query handler\n  const optimizedRunQuery = useCallback(\n    async (query: string) => {\n      setIsRunning(true);\n      setShowOutput(true);\n      try {\n        const runResult = await handleRunQuery(query);\n        setResult(runResult);\n        return runResult;\n      } catch (error) {\n        const errorResult = {\n          error: true,\n          message:\n            error instanceof Error ? error.message : \"Query execution failed\",\n        };\n        setResult(errorResult);\n        return errorResult;\n      } finally {\n        setIsRunning(false);\n      }\n    },\n    [handleRunQuery],\n  );\n\n  // Optimized submit solution handler\n  const optimizedSubmitSolution = useCallback(\n    async (query: string) => {\n      setIsSubmitting(true);\n      setShowOutput(true);\n      try {\n        const submitResult = await handleSubmitSolution(query);\n        setResult(submitResult);\n        return submitResult;\n      } catch (error) {\n        const errorResult = {\n          error: true,\n          message: error instanceof Error ? error.message : \"Submission failed\",\n        };\n        setResult(errorResult);\n        return errorResult;\n      } finally {\n        setIsSubmitting(false);\n      }\n    },\n    [handleSubmitSolution],\n  );\n\n  // Editor panel with header\n  const editorPanel = (\n    <div className=\"h-full flex flex-col\">\n      <EditorHeader\n        company={selectedCompany}\n        difficulty={selectedDifficulty}\n        onCompanyClick={onCompanyClick}\n        onDifficultyClick={onDifficultyClick}\n      />\n      <div className=\"flex-1 min-h-0\">\n        <CodeEditor\n          problem={problem}\n          onRunQuery={optimizedRunQuery}\n          onSubmitSolution={optimizedSubmitSolution}\n          isRunning={isRunning}\n          isSubmitting={isSubmitting}\n        />\n      </div>\n    </div>\n  );\n\n  // Output panel\n  const outputPanel = (\n    <OutputPanel result={result} isLoading={isRunning || isSubmitting} />\n  );\n\n  // Show resizable layout when output is visible, otherwise show just the editor\n  if (showOutput) {\n    return (\n      <VerticalResizableSplitter\n        topPanel={editorPanel}\n        bottomPanel={outputPanel}\n        defaultTopHeight={60}\n        minTopHeight={35}\n        minBottomHeight={25}\n        className={`h-full ${className || \"\"}`}\n      />\n    );\n  }\n\n  // Show just the editor when no output\n  return <div className={`h-full ${className || \"\"}`}>{editorPanel}</div>;\n});\n\nexport default OptimizedEditorOutputSplit;\n","size_bytes":3915},"client/src/components/OutputPanel.tsx":{"content":"import React, { useMemo } from 'react';\n\ninterface OutputPanelProps {\n  result: {\n    success: boolean;\n    results?: any[];\n    execution_time_ms?: number;\n    rows_affected?: number;\n    console_info?: string;\n    error?: string;\n    feedback?: string[];\n    test_results?: any[];\n  } | null;\n  isLoading: boolean;\n}\n\nconst OptimizedTable = ({ data }: { data: any[] }) => {\n  const { headers, rows } = useMemo(() => {\n    if (!data || data.length === 0) return { headers: [], rows: [] };\n    \n    const headers = Object.keys(data[0]);\n    const rows = data.map(row => headers.map(header => row[header]));\n    \n    return { headers, rows };\n  }, [data]);\n\n  if (headers.length === 0) {\n    return <div className=\"text-gray-500 italic p-4\">No data to display</div>;\n  }\n\n  return (\n    <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead>\n            <tr className=\"bg-gray-50 border-b border-gray-200\">\n              {headers.map((header, i) => (\n                <th \n                  key={i} \n                  className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                >\n                  {header}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {rows.map((row, i) => (\n              <tr key={i} className=\"hover:bg-gray-50\">\n                {row.map((cell, j) => (\n                  <td key={j} className=\"px-4 py-3 text-sm text-gray-900\">\n                    {String(cell ?? '')}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default function OutputPanel({ result, isLoading }: OutputPanelProps) {\n  if (isLoading) {\n    return (\n      <div className=\"h-full bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-gray-600\">Executing query...</div>\n      </div>\n    );\n  }\n\n  if (!result) {\n    return (\n      <div className=\"h-full bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-gray-500\">Ready to execute queries...</div>\n      </div>\n    );\n  }\n\n  const executionTimeSeconds = result.execution_time_ms ? (result.execution_time_ms / 1000).toFixed(5) : '0.00000';\n\n  // Add this handler for the \"View in new tab\" functionality\n  const handleViewInNewTab = () => {\n    if (!result?.results || result.results.length === 0) return;\n    \n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Query Results</title>\n        <style>\n          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 20px; }\n          table { width: 100%; border-collapse: collapse; border: 1px solid #e5e5e5; }\n          th { background: #f9f9f9; padding: 12px; text-align: left; border-bottom: 1px solid #e5e5e5; font-weight: 600; }\n          td { padding: 12px; border-bottom: 1px solid #f0f0f0; }\n          tr:hover { background: #f9f9f9; }\n        </style>\n      </head>\n      <body>\n        <h2>Query Results</h2>\n        <p>Execution time: ${executionTimeSeconds} seconds | ${result.results.length} rows</p>\n        <table>\n          <thead>\n            <tr>\n              ${Object.keys(result.results[0]).map(header => `<th>${header}</th>`).join('')}\n            </tr>\n          </thead>\n          <tbody>\n            ${result.results.map(row => \n              `<tr>${Object.values(row).map(cell => `<td>${String(cell ?? '')}</td>`).join('')}</tr>`\n            ).join('')}\n          </tbody>\n        </table>\n      </body>\n      </html>\n    `;\n    \n    const blob = new Blob([htmlContent], { type: 'text/html' });\n    const url = URL.createObjectURL(blob);\n    window.open(url, '_blank');\n    \n    // Clean up the URL object after a delay\n    setTimeout(() => URL.revokeObjectURL(url), 1000);\n  };\n\n  return (\n    <div className=\"h-full bg-gray-50 flex flex-col\">\n      {/* Header with execution info */}\n      <div className=\"flex-shrink-0 px-4 py-3 bg-white border-b border-gray-200 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <span className=\"text-sm text-gray-700\">\n            Execution time: {executionTimeSeconds} seconds\n          </span>\n          {result.rows_affected !== undefined && (\n            <span className=\"text-sm text-gray-500\">\n              {result.rows_affected} rows\n            </span>\n          )}\n        </div>\n        <button \n          onClick={handleViewInNewTab}\n          className=\"px-3 py-1 text-sm text-blue-600 border border-blue-300 rounded hover:bg-blue-50\"\n          disabled={!result?.results || result.results.length === 0}\n          data-testid=\"button-view-new-tab\"\n        >\n          View the output in a new tab\n        </button>\n      </div>\n\n      {/* Results area */}\n      <div className=\"flex-1 p-4 overflow-auto\">\n        {result.success && result.results && result.results.length > 0 ? (\n          <OptimizedTable data={result.results} />\n        ) : !result.success ? (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"text-red-800 font-medium\">Query Error</div>\n            <div className=\"text-red-700 mt-1 whitespace-pre-wrap\">\n              {result.error || 'Query failed'}\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center text-gray-500 py-8\">\n            Query executed successfully - no rows returned\n          </div>\n        )}\n      </div>\n\n      {/* Test results section */}\n      {result.test_results && result.test_results.length > 0 && (\n        <div className=\"flex-shrink-0 border-t border-gray-200 p-4 bg-white\">\n          <h3 className=\"text-gray-900 font-medium mb-2\">Test Results:</h3>\n          <div className=\"space-y-1\">\n            {result.test_results.map((test, index) => (\n              <div key={index} className={`text-sm flex items-center space-x-2`}>\n                <span className={test.passed ? 'text-green-600' : 'text-red-600'}>\n                  {test.passed ? '✓' : '✗'}\n                </span>\n                <span className=\"text-gray-700\">{test.name}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":6387},"client/src/components/ProblemDescriptionTab.tsx":{"content":"import { memo, useState, useCallback } from \"react\";\nimport { Lightbulb } from \"lucide-react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport TableDisplay from \"@/components/table-display\";\n\ninterface Problem {\n  question?: {\n    description?: string;\n    tables?: any[];\n    expectedOutput?: any[];\n  };\n  hints?: string[];\n  tags?: string[];\n}\n\ninterface ProblemDescriptionTabProps {\n  problem?: Problem;\n  className?: string;\n}\n\nconst ProblemDescriptionTab = memo(function ProblemDescriptionTab({\n  problem,\n  className,\n}: ProblemDescriptionTabProps) {\n  const [showHint, setShowHint] = useState(false);\n  const [hintIndex, setHintIndex] = useState(0);\n\n  const handleHintClick = useCallback(() => {\n    if (!showHint) {\n      setShowHint(true);\n    } else if (hintIndex < (problem?.hints?.length || 0) - 1) {\n      setHintIndex((prev) => prev + 1);\n    }\n  }, [showHint, hintIndex, problem?.hints?.length]);\n\n  // Parse hint content and extract code blocks\n  const parseHintContent = useCallback((content: string) => {\n    const parts = content.split(/(\\*\\/\\*[\\s\\S]*?\\*\\/\\*)/);\n    return parts.map((part, partIndex) => {\n      if (part.startsWith(\"*/*\") && part.endsWith(\"*/*\")) {\n        const codeContent = part.slice(3, -3);\n        return (\n          <code\n            key={partIndex}\n            className=\"block bg-gray-100 dark:bg-gray-800 p-3 rounded-md text-sm font-mono my-2 whitespace-pre-wrap\"\n          >\n            {codeContent}\n          </code>\n        );\n      } else {\n        return part;\n      }\n    });\n  }, []);\n\n  return (\n    <div className={`space-y-6 ${className || \"\"}`}>\n      {/* Problem Description */}\n      <div className=\"space-y-4\">\n        <div className=\"text-foreground prose prose-sm max-w-none dark:prose-invert\">\n          <ReactMarkdown\n            remarkPlugins={[remarkGfm]}\n            components={{\n              p: ({ children }) => (\n                <p className=\"mb-3 text-foreground leading-relaxed\">\n                  {children}\n                </p>\n              ),\n              h1: ({ children }) => (\n                <h1 className=\"text-xl font-bold mb-4 text-foreground\">\n                  {children}\n                </h1>\n              ),\n              h2: ({ children }) => (\n                <h2 className=\"text-lg font-semibold mb-3 text-foreground\">\n                  {children}\n                </h2>\n              ),\n              h3: ({ children }) => (\n                <h3 className=\"text-base font-semibold mb-2 text-foreground\">\n                  {children}\n                </h3>\n              ),\n              ul: ({ children }) => (\n                <ul className=\"list-disc list-inside mb-3 space-y-1 text-foreground\">\n                  {children}\n                </ul>\n              ),\n              ol: ({ children }) => (\n                <ol className=\"list-decimal list-inside mb-3 space-y-1 text-foreground\">\n                  {children}\n                </ol>\n              ),\n              li: ({ children }) => (\n                <li className=\"text-foreground\">{children}</li>\n              ),\n              strong: ({ children }) => (\n                <strong className=\"font-semibold text-foreground\">\n                  {children}\n                </strong>\n              ),\n              em: ({ children }) => (\n                <em className=\"italic text-foreground\">{children}</em>\n              ),\n              code: ({ children }) => (\n                <code className=\"bg-muted px-1.5 py-0.5 rounded text-sm font-mono text-foreground\">\n                  {children}\n                </code>\n              ),\n              pre: ({ children }) => (\n                <pre className=\"bg-muted p-4 rounded-lg overflow-x-auto text-sm font-mono text-foreground mb-4\">\n                  {children}\n                </pre>\n              ),\n              blockquote: ({ children }) => (\n                <blockquote className=\"border-l-4 border-primary pl-4 italic text-muted-foreground mb-4\">\n                  {children}\n                </blockquote>\n              ),\n              table: ({ children }) => (\n                <div className=\"overflow-x-auto mb-4\">\n                  <table className=\"min-w-full border border-muted rounded-lg\">\n                    {children}\n                  </table>\n                </div>\n              ),\n              thead: ({ children }) => (\n                <thead className=\"bg-muted/50\">{children}</thead>\n              ),\n              tbody: ({ children }) => <tbody>{children}</tbody>,\n              tr: ({ children }) => (\n                <tr className=\"border-b border-muted\">{children}</tr>\n              ),\n              th: ({ children }) => (\n                <th className=\"border border-muted px-3 py-2 text-left font-semibold\">\n                  {children}\n                </th>\n              ),\n              td: ({ children }) => (\n                <td className=\"border border-muted px-3 py-2\">{children}</td>\n              ),\n            }}\n          >\n            {problem?.question?.description || \"\"}\n          </ReactMarkdown>\n        </div>\n      </div>\n\n      {/* Structured Table Display */}\n      <TableDisplay\n        tables={problem?.question?.tables || []}\n        expectedOutput={problem?.question?.expectedOutput || []}\n      />\n\n      {/* Hints Section */}\n      {problem?.hints && problem.hints.length > 0 && (\n        <div className=\"space-y-3\">\n          {!showHint ? (\n            <Button\n              onClick={handleHintClick}\n              variant=\"outline\"\n              className=\"w-full text-primary hover:bg-primary/10\"\n              data-testid=\"button-hint\"\n            >\n              <Lightbulb className=\"mr-2 h-4 w-4\" />\n              HINT\n            </Button>\n          ) : (\n            <>\n              <div className=\"space-y-4\">\n                {problem.hints\n                  .slice(0, hintIndex + 1)\n                  .map((hint: string, index: number) => (\n                    <div key={index} className=\"text-foreground\">\n                      <h3 className=\"text-center font-bold text-lg mb-2 text-foreground\">\n                        HINT {index + 1}\n                      </h3>\n                      <p className=\"text-foreground leading-relaxed\">\n                        {parseHintContent(hint)}\n                      </p>\n                    </div>\n                  ))}\n              </div>\n\n              {hintIndex < (problem?.hints?.length || 0) - 1 && (\n                <Button\n                  onClick={handleHintClick}\n                  variant=\"outline\"\n                  className=\"w-full text-primary hover:bg-primary/10 mt-3\"\n                  data-testid=\"button-hint\"\n                >\n                  <Lightbulb className=\"mr-2 h-4 w-4\" />\n                  HINT\n                </Button>\n              )}\n            </>\n          )}\n        </div>\n      )}\n\n      {/* Tags */}\n      {problem?.tags && problem.tags.length > 0 && (\n        <div>\n          <h4 className=\"text-sm font-medium text-foreground mb-2\">Tags</h4>\n          <div className=\"flex flex-wrap gap-2\">\n            {problem.tags.map((tag: string, index: number) => (\n              <Badge key={index} variant=\"outline\" data-testid={`tag-${tag}`}>\n                {tag}\n              </Badge>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nconst executeQuery = async (query: string) => {\n  setIsLoading(true);\n\n  try {\n    const response = await fetch(`/api/problems/${problemId}/test`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({ query }),\n    });\n\n    const data = await response.json();\n\n    // Set the result - OutputPanel will handle console display\n    setQueryResult(data);\n  } catch (error) {\n    console.error(\"Query execution failed:\", error);\n    setQueryResult({\n      success: false,\n      console_output: `ERROR: ${error.message}`,\n      error: error.message,\n    });\n  } finally {\n    setIsLoading(false);\n  }\n};\n\nexport default ProblemDescriptionTab;\n","size_bytes":8215},"client/src/components/ProblemNavigation.tsx":{"content":"import { memo, useCallback } from 'react';\nimport { ArrowLeft, ChevronLeft, ChevronRight, Users, Star } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n\ninterface Problem {\n  id?: string;\n  title?: string;\n  likes?: number;\n  company?: string;\n  difficulty?: string;\n}\n\ninterface ProblemNavigationProps {\n  problem?: Problem;\n  userSubmissions?: any[];\n  onPrevious?: () => void;\n  onNext?: () => void;\n  hasPrevious?: boolean;\n  hasNext?: boolean;\n  className?: string;\n}\n\nconst ProblemNavigation = memo(function ProblemNavigation({\n  problem,\n  userSubmissions = [],\n  onPrevious,\n  onNext,\n  hasPrevious = false,\n  hasNext = false,\n  className,\n}: ProblemNavigationProps) {\n  // Memoized calculation for solved status\n  const isSolved = useCallback(() => {\n    return userSubmissions?.some((sub) => sub.isCorrect) || false;\n  }, [userSubmissions]);\n\n  const handlePrevious = useCallback(() => {\n    if (hasPrevious && onPrevious) {\n      onPrevious();\n    }\n  }, [hasPrevious, onPrevious]);\n\n  const handleNext = useCallback(() => {\n    if (hasNext && onNext) {\n      onNext();\n    }\n  }, [hasNext, onNext]);\n\n  return (\n    <div className={`flex items-center justify-between py-4 px-6 border-b ${className || ''}`}>\n      {/* Left: Back to Problems + Title */}\n      <div className=\"flex items-center space-x-4\">\n        <Link to=\"/problems\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-back-to-problems\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Problems\n          </Button>\n        </Link>\n\n        {problem && (\n          <>\n            <div className=\"h-4 w-px bg-border\"></div>\n            <div className=\"flex items-center space-x-3\">\n              <h1 className=\"text-lg font-semibold\" data-testid=\"text-problem-title\">\n                {problem.title || 'Untitled Problem'}\n              </h1>\n              {isSolved() && (\n                <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                  ✓ Solved\n                </Badge>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Right: Problem Stats + Navigation */}\n      <div className=\"flex items-center space-x-4\">\n        {problem && (\n          <>\n            {/* Problem Stats */}\n            <div className=\"flex items-center space-x-3 text-sm text-muted-foreground\">\n              <div className=\"flex items-center space-x-1\">\n                <Users className=\"h-3 w-3\" />\n                <span>2.1k</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <Star className=\"h-3 w-3\" />\n                <span>{problem.likes || 0}</span>\n              </div>\n            </div>\n\n            <div className=\"h-4 w-px bg-border\"></div>\n          </>\n        )}\n\n        {/* Navigation Controls */}\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            onClick={handlePrevious}\n            disabled={!hasPrevious}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"h-8 w-8 p-0\"\n            data-testid=\"button-previous-problem\"\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            onClick={handleNext}\n            disabled={!hasNext}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"h-8 w-8 p-0\"\n            data-testid=\"button-next-problem\"\n          >\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default ProblemNavigation;","size_bytes":3818},"client/src/components/ProblemTabsContent.tsx":{"content":"import { memo } from 'react';\nimport { Code2, MessageSquare, CheckCircle } from 'lucide-react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport ProblemDescriptionTab from '@/components/ProblemDescriptionTab';\n\ninterface Problem {\n  question?: {\n    description?: string;\n    tables?: any[];\n    expectedOutput?: any[];\n  };\n  hints?: string[];\n  tags?: string[];\n}\n\ninterface Submission {\n  id: string;\n  isCorrect: boolean;\n  submittedAt: string;\n  executionTime?: number;\n}\n\ninterface ProblemTabsContentProps {\n  problem?: Problem;\n  userSubmissions?: Submission[];\n  className?: string;\n}\n\nconst ProblemTabsContent = memo(function ProblemTabsContent({\n  problem,\n  userSubmissions = [],\n  className,\n}: ProblemTabsContentProps) {\n  const hasCorrectSubmission = userSubmissions.some((sub) => sub.isCorrect);\n\n  return (\n    <div className={`h-full flex flex-col ${className || ''}`}>\n      <Tabs defaultValue=\"problem\" className=\"flex flex-col h-full\">\n        <TabsList className=\"w-full justify-start border-b bg-transparent p-0 h-auto rounded-none\">\n          <TabsTrigger\n            value=\"problem\"\n            className=\"data-[state=active]:bg-transparent data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none\"\n            data-testid=\"tab-problem\"\n          >\n            Problem\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"solution\"\n            className=\"data-[state=active]:bg-transparent data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none\"\n            data-testid=\"tab-solution\"\n          >\n            Solution\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"discussion\"\n            className=\"data-[state=active]:bg-transparent data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none\"\n            data-testid=\"tab-discussion\"\n          >\n            Discussion\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"submission\"\n            className=\"data-[state=active]:bg-transparent data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none\"\n            data-testid=\"tab-submission\"\n          >\n            Submissions\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent\n          value=\"problem\"\n          className=\"flex-1 overflow-auto p-6 pt-0 mt-0\"\n          data-testid=\"content-problem\"\n        >\n          <ProblemDescriptionTab problem={problem} />\n        </TabsContent>\n\n        <TabsContent\n          value=\"solution\"\n          className=\"flex-1 overflow-auto p-6 pt-0 mt-0\"\n          data-testid=\"content-solution\"\n        >\n          <div className=\"space-y-6\">\n            <div className=\"text-center py-8\">\n              <Code2 className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                Solution\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Complete this problem to view the official solution and\n                explanations.\n              </p>\n              {!hasCorrectSubmission && (\n                <Alert className=\"border-yellow-200 bg-yellow-50 dark:bg-yellow-950/30\">\n                  <AlertDescription className=\"text-yellow-800 dark:text-yellow-200\">\n                    💡 Solve the problem first to unlock the detailed\n                    solution walkthrough!\n                  </AlertDescription>\n                </Alert>\n              )}\n              {hasCorrectSubmission && (\n                <div className=\"mt-6 p-6 bg-muted/50 rounded-lg\">\n                  <h4 className=\"font-semibold mb-4\">Official Solution:</h4>\n                  <div className=\"text-left font-mono text-sm bg-background rounded border p-4\">\n                    <p className=\"text-muted-foreground\">\n                      [Solution code would be displayed here]\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent\n          value=\"discussion\"\n          className=\"flex-1 overflow-auto p-6 pt-0 mt-0\"\n          data-testid=\"content-discussion\"\n        >\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold text-foreground\">\n                Discussion\n              </h3>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-new-discussion\"\n              >\n                <MessageSquare className=\"h-4 w-4 mr-2\" />\n                New Discussion\n              </Button>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"text-center py-8\">\n                <MessageSquare className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h4 className=\"text-base font-semibold text-foreground mb-2\">\n                  No discussions yet\n                </h4>\n                <p className=\"text-muted-foreground mb-4\">\n                  Be the first to start a discussion about this problem!\n                </p>\n              </div>\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent\n          value=\"submission\"\n          className=\"flex-1 overflow-auto p-6 pt-0 mt-0\"\n          data-testid=\"content-submission\"\n        >\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold text-foreground\">\n                My Submissions\n              </h3>\n              <div className=\"text-sm text-muted-foreground\">\n                {userSubmissions.length} submissions\n              </div>\n            </div>\n\n            {userSubmissions.length > 0 ? (\n              <div className=\"space-y-3\">\n                {userSubmissions.map((submission, index) => (\n                  <Card key={submission.id} className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div\n                          className={`w-3 h-3 rounded-full ${\n                            submission.isCorrect ? \"bg-green-500\" : \"bg-red-500\"\n                          }`}\n                        />\n                        <span className=\"text-sm font-mono\">\n                          Submission {index + 1}\n                        </span>\n                        {submission.isCorrect && (\n                          <Badge className=\"bg-green-100 text-green-800 text-xs\">\n                            ✓ Accepted\n                          </Badge>\n                        )}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {new Date(submission.submittedAt).toLocaleDateString()}\n                      </div>\n                    </div>\n                    <div className=\"mt-3 text-sm text-muted-foreground\">\n                      Runtime: {submission.executionTime || \"N/A\"}ms\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <CheckCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h4 className=\"text-base font-semibold text-foreground mb-2\">\n                  No submissions yet\n                </h4>\n                <p className=\"text-muted-foreground mb-4\">\n                  Submit your first solution to see it here!\n                </p>\n              </div>\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n});\n\nexport default ProblemTabsContent;","size_bytes":8050},"client/src/components/TimerControls.tsx":{"content":"import { memo } from 'react';\nimport { Timer, Play, Pause, Square } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useTimer } from '@/hooks/use-timer';\n\ninterface TimerControlsProps {\n  className?: string;\n}\n\nconst TimerControls = memo(function TimerControls({ className }: TimerControlsProps) {\n  const { formattedTime, isRunning, start, pause, reset } = useTimer();\n\n  return (\n    <div className={`flex items-center space-x-1 px-2 py-1 rounded border bg-muted text-muted-foreground border-border ${className || ''}`}>\n      {/* Play/Pause Toggle button */}\n      <Button\n        onClick={isRunning ? pause : start}\n        variant=\"ghost\"\n        size=\"sm\"\n        className={`h-5 w-5 p-0 hover:bg-transparent ${\n          isRunning\n            ? \"text-orange-600 dark:text-orange-400\"\n            : \"text-muted-foreground\"\n        }`}\n        data-testid={\n          isRunning\n            ? \"button-pause-timer\"\n            : \"button-start-timer\"\n        }\n        aria-label={isRunning ? \"Pause timer\" : \"Start timer\"}\n      >\n        {isRunning ? (\n          <Pause className=\"h-3 w-3\" />\n        ) : (\n          <Play className=\"h-3 w-3\" />\n        )}\n      </Button>\n\n      {/* Timer Display */}\n      <div className=\"flex items-center space-x-1\">\n        <Timer\n          className={`h-3 w-3 ${\n            isRunning\n              ? \"text-orange-600 dark:text-orange-400\"\n              : \"text-muted-foreground\"\n          }`}\n        />\n        <span\n          className={`font-mono text-xs ${\n            isRunning\n              ? \"text-orange-600 dark:text-orange-400 font-medium\"\n              : \"text-muted-foreground\"\n          }`}\n          data-testid=\"text-timer\"\n        >\n          {formattedTime}\n        </span>\n      </div>\n\n      {/* Reset button */}\n      <Button\n        onClick={reset}\n        variant=\"ghost\"\n        size=\"sm\"\n        className={`h-5 w-5 p-0 hover:bg-transparent ${\n          isRunning\n            ? \"text-orange-600 dark:text-orange-400\"\n            : \"text-muted-foreground\"\n        }`}\n        data-testid=\"button-reset-timer\"\n        aria-label=\"Reset timer\"\n      >\n        <Square className=\"h-3 w-3\" />\n      </Button>\n    </div>\n  );\n});\n\nexport default TimerControls;","size_bytes":2252},"client/src/hooks/use-codemirror-config.tsx":{"content":"import { useMemo } from 'react';\nimport { sql, PostgreSQL } from '@codemirror/lang-sql';\nimport { autocompletion } from '@codemirror/autocomplete';\nimport { EditorView, keymap, placeholder } from '@codemirror/view';\nimport { defaultKeymap, indentWithTab } from '@codemirror/commands';\nimport { oneDark } from '@codemirror/theme-one-dark';\n\ninterface Problem {\n  question?: {\n    tables?: Array<{ name: string }>;\n  };\n}\n\ninterface UseCodeMirrorConfigOptions {\n  problem?: Problem;\n  isDarkMode: boolean;\n  onRunQuery: () => void;\n}\n\nexport function useCodeMirrorConfig({ problem, isDarkMode, onRunQuery }: UseCodeMirrorConfigOptions) {\n  // Generate dynamic placeholder based on first table in problem\n  const placeholderText = useMemo(() => {\n    if (problem?.question?.tables && problem.question.tables.length > 0) {\n      const firstTable = problem.question.tables[0];\n      const tableName = firstTable.name;\n      return `-- Write your SQL query here\\nSELECT * FROM \"${tableName}\";`;\n    }\n    return \"-- Write your SQL query here\\nSELECT \\n    column1,\\n    column2\\nFROM table_name\\nWHERE condition;\";\n  }, [problem?.question?.tables]);\n\n  // Memoize extensions to prevent recreation on every render\n  const extensions = useMemo(() => [\n    sql({\n      dialect: PostgreSQL,\n      upperCaseKeywords: true,\n      schema: {\n        customers: [\"id\", \"name\", \"email\"],\n        employees: [\"id\", \"name\", \"department\"],\n        orders: [\"id\", \"customer_id\", \"total\"],\n        order_items: [\"id\", \"order_id\", \"price\", \"quantity\"],\n      },\n    }),\n    autocompletion(),\n    EditorView.lineWrapping,\n    placeholder(placeholderText),\n    keymap.of([\n      ...defaultKeymap,\n      indentWithTab,\n      {\n        key: \"Mod-Enter\",\n        run: () => {\n          onRunQuery();\n          return true;\n        },\n      },\n    ]),\n  ], [placeholderText, onRunQuery]);\n\n  // Memoize theme configuration\n  const theme = useMemo(() => {\n    if (isDarkMode) {\n      return [oneDark];\n    }\n    return [\n      EditorView.theme({\n        \"&\": {\n          color: \"hsl(var(--foreground))\",\n          backgroundColor: \"hsl(var(--background))\",\n        },\n        \".cm-content\": {\n          padding: \"16px\",\n          fontSize: \"14px\",\n          fontFamily: \"var(--font-mono)\",\n          minHeight: \"200px\",\n        },\n        \".cm-focused\": {\n          outline: \"none\",\n        },\n        \".cm-editor\": {\n          borderRadius: \"0\",\n        },\n        \".cm-scroller\": {\n          fontFamily: \"var(--font-mono)\",\n        },\n        \".cm-line\": {\n          lineHeight: \"1.5\",\n        },\n        \"&.cm-focused .cm-cursor\": {\n          borderLeftColor: \"hsl(var(--primary))\",\n        },\n        \"&.cm-focused .cm-selectionBackground, .cm-selectionBackground\": {\n          backgroundColor: \"hsl(var(--primary) / 0.2)\",\n        },\n      }),\n    ];\n  }, [isDarkMode]);\n\n  return {\n    extensions,\n    theme,\n    placeholderText,\n  };\n}","size_bytes":2913},"client/src/hooks/use-theme.tsx":{"content":"import { useState, useEffect } from 'react';\n\nexport function useTheme() {\n  // Initialize state only once\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    if (typeof window !== 'undefined') {\n      return document.documentElement.classList.contains('dark');\n    }\n    return false;\n  });\n\n  useEffect(() => {\n    // Optimized observer with throttling to prevent excessive re-renders\n    let timeoutId: number | null = null;\n    \n    const observer = new MutationObserver(() => {\n      // Throttle updates to prevent rapid re-renders\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n      \n      timeoutId = window.setTimeout(() => {\n        const newIsDarkMode = document.documentElement.classList.contains('dark');\n        setIsDarkMode((prevMode) => {\n          // Only update if the value has actually changed\n          return prevMode !== newIsDarkMode ? newIsDarkMode : prevMode;\n        });\n      }, 50); // Small delay to batch multiple changes\n    });\n\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['class'],\n    });\n\n    return () => {\n      observer.disconnect();\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, []);\n\n  return isDarkMode;\n}","size_bytes":1269},"client/src/hooks/use-timer.tsx":{"content":"import { useState, useRef, useEffect, useCallback } from 'react';\n\nexport interface UseTimerReturn {\n  seconds: number;\n  isRunning: boolean;\n  formattedTime: string;\n  start: () => void;\n  pause: () => void;\n  reset: () => void;\n  toggle: () => void;\n}\n\nexport function useTimer(): UseTimerReturn {\n  const [seconds, setSeconds] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const timerRef = useRef<number | null>(null);\n\n  // Timer effect - optimized to only run when isRunning changes\n  useEffect(() => {\n    if (isRunning) {\n      timerRef.current = window.setInterval(() => {\n        setSeconds((prev) => prev + 1);\n      }, 1000);\n    } else {\n      if (timerRef.current) {\n        window.clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n    }\n\n    return () => {\n      if (timerRef.current) {\n        window.clearInterval(timerRef.current);\n      }\n    };\n  }, [isRunning]);\n\n  // Memoized format function\n  const formattedTime = useCallback(() => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes.toString().padStart(2, \"0\")}:${remainingSeconds\n      .toString()\n      .padStart(2, \"0\")}`;\n  }, [seconds])();\n\n  // Timer controls - memoized to prevent recreation\n  const start = useCallback(() => {\n    setIsRunning(true);\n  }, []);\n\n  const pause = useCallback(() => {\n    setIsRunning(false);\n  }, []);\n\n  const reset = useCallback(() => {\n    setIsRunning(false);\n    setSeconds(0);\n  }, []);\n\n  const toggle = useCallback(() => {\n    setIsRunning((prev) => !prev);\n  }, []);\n\n  return {\n    seconds,\n    isRunning,\n    formattedTime,\n    start,\n    pause,\n    reset,\n    toggle,\n  };\n}","size_bytes":1709},"test_sandbox.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nTest script for sandbox database functionality\n\"\"\"\nimport asyncio\nimport sys\nimport os\n\n# Add the current directory to Python path to import api modules\nsys.path.append(os.getcwd())\n\nfrom api.sandbox_manager import sandbox_manager, create_user_sandbox, execute_sandbox_query\nfrom api.database import SessionLocal\n\nasync def test_sandbox_functionality():\n    \"\"\"Test the sandbox database creation and query execution\"\"\"\n    \n    # Test data\n    user_id = \"880be3c3-e093-4274-9294-d20c5f08c583\"  # demo12s user\n    problem_id = \"28640a47-e0c3-4330-86bb-98f21cb6950f\"  # Select All Customers problem\n    \n    print(\"🧪 Testing Sandbox Database System\")\n    print(\"=\" * 50)\n    \n    try:\n        # Step 1: Create a sandbox\n        print(\"1️⃣  Creating sandbox database...\")\n        sandbox = await create_user_sandbox(user_id, problem_id)\n        print(f\"✅ Sandbox created successfully!\")\n        \n        # Capture attributes before session closes\n        database_name = sandbox.database_name\n        sandbox_id = sandbox.id\n        status = sandbox.status\n        expires_at = sandbox.expires_at\n        \n        print(f\"   - Database Name: {database_name}\")\n        print(f\"   - Status: {status}\")\n        print(f\"   - Expires At: {expires_at}\")\n        \n        # Step 2: Test basic query execution\n        print(\"\\n2️⃣  Testing query execution...\")\n        test_query = \"SELECT * FROM customers\"\n        \n        result, status = await execute_sandbox_query(\n            sandbox_id, \n            test_query, \n            timeout_seconds=10\n        )\n        \n        print(f\"✅ Query executed successfully!\")\n        print(f\"   - Status: {status}\")\n        print(f\"   - Execution Time: {result.get('execution_time_ms', 0)}ms\")\n        print(f\"   - Rows Returned: {result.get('rows_affected', 0)}\")\n        \n        if result.get('result'):\n            print(f\"   - Sample Data: {result['result'][:2]}...\")  # Show first 2 rows\n        \n        # Step 3: Test a more complex query\n        print(\"\\n3️⃣  Testing complex query...\")\n        complex_query = \"SELECT name, city FROM customers WHERE city = 'New York'\"\n        \n        result2, status2 = await execute_sandbox_query(\n            sandbox_id, \n            complex_query, \n            timeout_seconds=10\n        )\n        \n        print(f\"✅ Complex query executed successfully!\")\n        print(f\"   - Status: {status2}\")\n        print(f\"   - Execution Time: {result2.get('execution_time_ms', 0)}ms\")\n        print(f\"   - Filtered Results: {result2.get('result', [])}\")\n        \n        # Step 4: Test query validation\n        print(\"\\n4️⃣  Testing query validation...\")\n        validation_query = \"SELECT * FROM customers ORDER BY id\"\n        \n        # This would typically be done through the validation endpoint\n        result3, status3 = await execute_sandbox_query(\n            sandbox_id, \n            validation_query, \n            timeout_seconds=10\n        )\n        \n        print(f\"✅ Validation query executed successfully!\")\n        print(f\"   - Status: {status3}\")\n        print(f\"   - Data matches expected format: {len(result3.get('result', [])) == 3}\")\n        \n        print(f\"\\n🎉 All sandbox tests passed successfully!\")\n        print(f\"📊 Summary:\")\n        print(f\"   - Sandbox Database: {database_name}\")\n        print(f\"   - Total Queries Executed: 3\")\n        print(f\"   - All Tests: ✅ PASSED\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error during sandbox testing: {e}\")\n        import traceback\n        traceback.print_exc()\n        return False\n\nif __name__ == \"__main__\":\n    success = asyncio.run(test_sandbox_functionality())\n    if success:\n        print(\"\\n✅ Sandbox system is working correctly!\")\n        sys.exit(0)\n    else:\n        print(\"\\n❌ Sandbox system has issues!\")\n        sys.exit(1)","size_bytes":3892},"api/sandbox_manager.py":{"content":"\"\"\"\nSandbox Database System for SQL Learning Platform\n================================================\nThis module provides dynamic database creation, data population,\nresource management, and cleanup for user sandbox environments.\n\"\"\"\n\nimport os\nimport asyncio\nimport uuid\nimport time\nimport logging\nfrom datetime import datetime, timedelta\nfrom typing import Optional, Dict, List, Any, Tuple\nfrom contextlib import asynccontextmanager\nimport psycopg2\nfrom psycopg2 import sql\nimport asyncpg\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.pool import QueuePool\nfrom sqlalchemy.engine.url import make_url\n\nfrom .database import DATABASE_URL, SessionLocal\nfrom .models import UserSandbox, TestCase, ProblemSchema, SandboxStatus, ExecutionStatus\nfrom .schemas import UserSandboxCreate, ExecutionResultCreate\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass SandboxConnectionPool:\n    \"\"\"Manages database connections for sandbox environments\"\"\"\n    \n    def __init__(self, max_connections: int = 50):\n        self.max_connections = max_connections\n        self.connection_pools: Dict[str, asyncpg.Pool] = {}\n        self._cleanup_lock = asyncio.Lock()\n    \n    async def get_pool(self, connection_string: str) -> asyncpg.Pool:\n        \"\"\"Get or create a connection pool for a sandbox database\"\"\"\n        if connection_string not in self.connection_pools:\n            try:\n                pool = await asyncpg.create_pool(\n                    connection_string,\n                    min_size=1,\n                    max_size=5,\n                    command_timeout=30,\n                    server_settings={\n                        'statement_timeout': '30000',  # 30 seconds\n                        'lock_timeout': '10000',       # 10 seconds\n                        'idle_in_transaction_session_timeout': '30000'  # 30 seconds\n                    }\n                )\n                self.connection_pools[connection_string] = pool\n                logger.info(f\"Created connection pool for sandbox database\")\n            except Exception as e:\n                logger.error(f\"Failed to create connection pool: {e}\")\n                raise\n        \n        return self.connection_pools[connection_string]\n    \n    async def close_pool(self, connection_string: str):\n        \"\"\"Close and remove a connection pool\"\"\"\n        if connection_string in self.connection_pools:\n            pool = self.connection_pools.pop(connection_string)\n            await pool.close()\n            logger.info(f\"Closed connection pool for sandbox database\")\n    \n    async def cleanup_all(self):\n        \"\"\"Close all connection pools\"\"\"\n        async with self._cleanup_lock:\n            for connection_string, pool in self.connection_pools.items():\n                await pool.close()\n            self.connection_pools.clear()\n            logger.info(\"Closed all sandbox connection pools\")\n\n# Global connection pool manager\nsandbox_pool_manager = SandboxConnectionPool()\n\nclass SandboxManager:\n    \"\"\"Manages sandbox database lifecycle and operations\"\"\"\n    \n    def __init__(self):\n        self.base_db_url = DATABASE_URL\n        self._parse_database_url()\n    \n    def _parse_database_url(self):\n        \"\"\"Parse the main database URL to extract connection details using sqlalchemy\"\"\"\n        try:\n            url = make_url(self.base_db_url)\n            self.db_user = url.username or 'postgres'\n            self.db_password = url.password or ''\n            self.db_host = url.host or 'localhost'\n            self.db_port = url.port or 5432\n            self.db_name = url.database or 'postgres'\n        except Exception as e:\n            logger.error(f\"Failed to parse DATABASE_URL: {e}\")\n            # Fallback to defaults\n            self.db_user = 'postgres'\n            self.db_password = ''\n            self.db_host = 'localhost'\n            self.db_port = 5432\n            self.db_name = 'postgres'\n    \n    def _generate_sandbox_name(self, user_id: str, problem_id: str) -> str:\n        \"\"\"Generate a unique sandbox database name\"\"\"\n        # Create a safe database name with timestamp\n        timestamp = int(time.time())\n        short_user_id = user_id[:8]\n        short_problem_id = problem_id[:8]\n        return f\"sandbox_{short_user_id}_{short_problem_id}_{timestamp}\"\n    \n    def _build_connection_string(self, database_name: str) -> str:\n        \"\"\"Build connection string for a sandbox database\"\"\"\n        return f\"postgresql://{self.db_user}:{self.db_password}@{self.db_host}:{self.db_port}/{database_name}\"\n    \n    async def create_sandbox(self, user_id: str, problem_id: str, expires_in_hours: int = 2) -> UserSandbox:\n        \"\"\"Create a new sandbox database for a user and problem\"\"\"\n        db = SessionLocal()\n        \n        try:\n            # Check if user already has an active sandbox for this problem\n            existing_sandbox = db.query(UserSandbox).filter(\n                UserSandbox.user_id == user_id,\n                UserSandbox.problem_id == problem_id,\n                UserSandbox.status == SandboxStatus.ACTIVE.value\n            ).first()\n            \n            if existing_sandbox:\n                # Extend expiry of existing sandbox\n                existing_sandbox.expires_at = datetime.utcnow() + timedelta(hours=expires_in_hours)\n                existing_sandbox.last_accessed_at = datetime.utcnow()\n                db.commit()\n                return existing_sandbox\n            \n            # Generate unique database name\n            sandbox_db_name = self._generate_sandbox_name(user_id, problem_id)\n            connection_string = self._build_connection_string(sandbox_db_name)\n            \n            # Create the sandbox database\n            await self._create_database(sandbox_db_name)\n            \n            # Create UserSandbox record\n            sandbox = UserSandbox(\n                user_id=user_id,\n                problem_id=problem_id,\n                database_name=sandbox_db_name,\n                status=SandboxStatus.ACTIVE.value,\n                expires_at=datetime.utcnow() + timedelta(hours=expires_in_hours),\n                last_accessed_at=datetime.utcnow()\n            )\n            \n            db.add(sandbox)\n            db.commit()\n            db.refresh(sandbox)\n            \n            # Populate sandbox with test data\n            await self._populate_sandbox_data(sandbox_db_name, problem_id, db)\n            \n            logger.info(f\"Created sandbox {sandbox_db_name} for user {user_id}, problem {problem_id}\")\n            return sandbox\n            \n        except Exception as e:\n            db.rollback()\n            logger.error(f\"Failed to create sandbox: {e}\")\n            raise\n        finally:\n            db.close()\n    \n    async def _create_database(self, database_name: str):\n        \"\"\"Create a new PostgreSQL database\"\"\"\n        # Connect to the main database to create new one\n        admin_connection_string = f\"postgresql://{self.db_user}:{self.db_password}@{self.db_host}:{self.db_port}/postgres\"\n        \n        try:\n            conn = await asyncpg.connect(admin_connection_string)\n            \n            # Create the database\n            await conn.execute(f'CREATE DATABASE \"{database_name}\"')\n            \n            await conn.close()\n            \n            logger.info(f\"Created database: {database_name}\")\n            \n        except asyncpg.DuplicateDatabaseError:\n            logger.warning(f\"Database {database_name} already exists\")\n        except Exception as e:\n            logger.error(f\"Failed to create database {database_name}: {e}\")\n            raise\n    \n    async def _populate_sandbox_data(self, sandbox_db_name: str, problem_id: str, db):\n        \"\"\"Populate sandbox database with problem schema and test data\"\"\"\n        connection_string = self._build_connection_string(sandbox_db_name)\n        \n        try:\n            # Get problem schemas and test cases\n            problem_schemas = db.query(ProblemSchema).filter(\n                ProblemSchema.problem_id == problem_id\n            ).all()\n            \n            test_cases = db.query(TestCase).filter(\n                TestCase.problem_id == problem_id\n            ).all()\n            \n            pool = await sandbox_pool_manager.get_pool(connection_string)\n            \n            async with pool.acquire() as conn:\n                # Create tables from problem schemas\n                for schema in problem_schemas:\n                    await self._create_table_from_schema(conn, schema.table_name, schema.schema_definition)\n                    \n                    # Insert sample data\n                    if schema.sample_data:\n                        await self._insert_sample_data(conn, schema.table_name, schema.sample_data)\n                \n                # Create indexes and constraints\n                for schema in problem_schemas:\n                    if schema.indexes:\n                        await self._create_indexes(conn, schema.table_name, schema.indexes)\n                    \n                    if schema.constraints:\n                        await self._create_constraints(conn, schema.table_name, schema.constraints)\n            \n            logger.info(f\"Populated sandbox {sandbox_db_name} with {len(problem_schemas)} tables\")\n            \n        except Exception as e:\n            logger.error(f\"Failed to populate sandbox {sandbox_db_name}: {e}\")\n            raise\n    \n    async def _create_table_from_schema(self, conn: asyncpg.Connection, table_name: str, schema_definition: Dict[str, Any]):\n        \"\"\"Create a table from schema definition\"\"\"\n        try:\n            # Build CREATE TABLE statement\n            columns = []\n            for col_name, col_def in schema_definition.get('columns', {}).items():\n                col_type = col_def.get('type', 'TEXT')\n                nullable = 'NULL' if col_def.get('nullable', True) else 'NOT NULL'\n                default = f\"DEFAULT {col_def['default']}\" if 'default' in col_def else ''\n                primary_key = 'PRIMARY KEY' if col_def.get('primary_key', False) else ''\n                \n                column_def = f'\"{col_name}\" {col_type} {nullable} {default} {primary_key}'.strip()\n                columns.append(column_def)\n            \n            if columns:\n                create_table_sql = f'CREATE TABLE \"{table_name}\" ({\", \".join(columns)})'\n                await conn.execute(create_table_sql)\n                logger.info(f\"Created table: {table_name}\")\n            \n        except Exception as e:\n            logger.error(f\"Failed to create table {table_name}: {e}\")\n            raise\n    \n    async def _insert_sample_data(self, conn: asyncpg.Connection, table_name: str, sample_data: List[Dict[str, Any]]):\n        \"\"\"Insert sample data into a table\"\"\"\n        if not sample_data:\n            return\n        \n        try:\n            for row in sample_data:\n                if row:  # Skip empty rows\n                    columns = list(row.keys())\n                    values = list(row.values())\n                    placeholders = [f'${i+1}' for i in range(len(values))]\n                    \n                    quoted_columns = [f'\"{col}\"' for col in columns]\n                    insert_sql = f'INSERT INTO \"{table_name}\" ({\", \".join(quoted_columns)}) VALUES ({\", \".join(placeholders)})'\n                    await conn.execute(insert_sql, *values)\n            \n            logger.info(f\"Inserted {len(sample_data)} rows into {table_name}\")\n            \n        except Exception as e:\n            logger.error(f\"Failed to insert sample data into {table_name}: {e}\")\n            raise\n    \n    async def _create_indexes(self, conn: asyncpg.Connection, table_name: str, indexes: List[Dict[str, Any]]):\n        \"\"\"Create indexes for a table\"\"\"\n        for index in indexes:\n            try:\n                index_name = index.get('name', f\"idx_{table_name}_{index['columns'][0]}\")\n                columns = index.get('columns', [])\n                unique = 'UNIQUE' if index.get('unique', False) else ''\n                \n                if columns:\n                    quoted_columns = [f'\"{col}\"' for col in columns]\n                    create_index_sql = f'CREATE {unique} INDEX \"{index_name}\" ON \"{table_name}\" ({\", \".join(quoted_columns)})'\n                    await conn.execute(create_index_sql)\n                    logger.info(f\"Created index: {index_name}\")\n            \n            except Exception as e:\n                logger.error(f\"Failed to create index on {table_name}: {e}\")\n    \n    async def _create_constraints(self, conn: asyncpg.Connection, table_name: str, constraints: List[Dict[str, Any]]):\n        \"\"\"Create constraints for a table\"\"\"\n        for constraint in constraints:\n            try:\n                constraint_type = constraint.get('type')\n                constraint_name = constraint.get('name', f\"con_{table_name}_{constraint_type}\")\n                \n                if constraint_type == 'foreign_key':\n                    column = constraint['column']\n                    ref_table = constraint['references']['table']\n                    ref_column = constraint['references']['column']\n                    \n                    alter_sql = f'ALTER TABLE \"{table_name}\" ADD CONSTRAINT \"{constraint_name}\" FOREIGN KEY (\"{column}\") REFERENCES \"{ref_table}\" (\"{ref_column}\")'\n                    await conn.execute(alter_sql)\n                    logger.info(f\"Created foreign key constraint: {constraint_name}\")\n                \n                elif constraint_type == 'check':\n                    check_condition = constraint['condition']\n                    alter_sql = f'ALTER TABLE \"{table_name}\" ADD CONSTRAINT \"{constraint_name}\" CHECK ({check_condition})'\n                    await conn.execute(alter_sql)\n                    logger.info(f\"Created check constraint: {constraint_name}\")\n            \n            except Exception as e:\n                logger.error(f\"Failed to create constraint on {table_name}: {e}\")\n    \n    async def execute_query(self, sandbox_id: str, query: str, timeout_seconds: int = 30) -> Tuple[Dict[str, Any], ExecutionStatus]:\n        \"\"\"Execute a SQL query in a sandbox environment with resource limits\"\"\"\n        db = SessionLocal()\n        \n        try:\n            # Get sandbox details\n            sandbox = db.query(UserSandbox).filter(UserSandbox.id == sandbox_id).first()\n            if not sandbox:\n                raise ValueError(f\"Sandbox {sandbox_id} not found\")\n            \n            if sandbox.status != SandboxStatus.ACTIVE.value:\n                raise ValueError(f\"Sandbox {sandbox_id} is not active\")\n            \n            # Update last accessed time\n            sandbox.last_accessed_at = datetime.utcnow()\n            db.commit()\n            \n            connection_string = self._build_connection_string(sandbox.database_name)\n            pool = await sandbox_pool_manager.get_pool(connection_string)\n            \n            start_time = time.time()\n            \n            async with pool.acquire() as conn:\n                # Set resource limits\n                await conn.execute(f\"SET statement_timeout = '{timeout_seconds}s'\")\n                await conn.execute(\"SET lock_timeout = '10s'\")\n                \n                try:\n                    # Execute the query\n                    result = await conn.fetch(query)\n                    \n                    execution_time_ms = int((time.time() - start_time) * 1000)\n                    \n                    # Convert result to JSON-serializable format\n                    result_data = []\n                    if result:\n                        columns = list(result[0].keys())\n                        for row in result:\n                            row_dict = {}\n                            for col in columns:\n                                value = row[col]\n                                # Handle non-serializable types\n                                if hasattr(value, 'isoformat'):  # datetime objects\n                                    value = value.isoformat()\n                                elif isinstance(value, (bytes, bytearray)):\n                                    value = str(value)\n                                row_dict[col] = value\n                            result_data.append(row_dict)\n                    \n                    return {\n                        'status': ExecutionStatus.SUCCESS,\n                        'execution_time_ms': execution_time_ms,\n                        'result': result_data,\n                        'rows_affected': len(result_data),\n                        'columns': list(result[0].keys()) if result else []\n                    }, ExecutionStatus.SUCCESS\n                \n                except asyncpg.QueryCanceledError:\n                    return {\n                        'status': ExecutionStatus.TIMEOUT,\n                        'error': f'Query execution timed out after {timeout_seconds} seconds',\n                        'execution_time_ms': timeout_seconds * 1000\n                    }, ExecutionStatus.TIMEOUT\n                \n                except asyncpg.PostgresError as e:\n                    return {\n                        'status': ExecutionStatus.ERROR,\n                        'error': str(e),\n                        'error_code': e.sqlstate,\n                        'execution_time_ms': int((time.time() - start_time) * 1000)\n                    }, ExecutionStatus.ERROR\n        \n        except Exception as e:\n            logger.error(f\"Failed to execute query in sandbox {sandbox_id}: {e}\")\n            return {\n                'status': ExecutionStatus.ERROR,\n                'error': str(e),\n                'execution_time_ms': 0\n            }, ExecutionStatus.ERROR\n        \n        finally:\n            db.close()\n    \n    async def cleanup_expired_sandboxes(self):\n        \"\"\"Clean up expired sandbox databases\"\"\"\n        db = SessionLocal()\n        \n        try:\n            # Find expired sandboxes\n            expired_sandboxes = db.query(UserSandbox).filter(\n                UserSandbox.status == SandboxStatus.ACTIVE.value,\n                UserSandbox.expires_at < datetime.utcnow()\n            ).all()\n            \n            logger.info(f\"Found {len(expired_sandboxes)} expired sandboxes to cleanup\")\n            \n            for sandbox in expired_sandboxes:\n                try:\n                    # Mark as cleanup pending\n                    sandbox.status = SandboxStatus.CLEANUP_PENDING.value\n                    sandbox.cleanup_scheduled_at = datetime.utcnow()\n                    db.commit()\n                    \n                    # Close connection pool\n                    connection_string = self._build_connection_string(sandbox.database_name)\n                    await sandbox_pool_manager.close_pool(connection_string)\n                    \n                    # Drop the database\n                    await self._drop_database(sandbox.database_name)\n                    \n                    # Mark as expired\n                    sandbox.status = SandboxStatus.EXPIRED.value\n                    db.commit()\n                    \n                    logger.info(f\"Cleaned up sandbox: {sandbox.database_name}\")\n                \n                except Exception as e:\n                    logger.error(f\"Failed to cleanup sandbox {sandbox.database_name}: {e}\")\n                    # Continue with other sandboxes\n                    continue\n        \n        except Exception as e:\n            logger.error(f\"Failed to cleanup expired sandboxes: {e}\")\n        \n        finally:\n            db.close()\n    \n    async def _drop_database(self, database_name: str):\n        \"\"\"Drop a sandbox database\"\"\"\n        admin_connection_string = f\"postgresql://{self.db_user}:{self.db_password}@{self.db_host}:{self.db_port}/postgres\"\n        \n        try:\n            conn = await asyncpg.connect(admin_connection_string)\n            \n            # Terminate active connections to the database\n            await conn.execute(f\"\"\"\n                SELECT pg_terminate_backend(pid)\n                FROM pg_stat_activity\n                WHERE datname = '{database_name}' AND pid <> pg_backend_pid()\n            \"\"\")\n            \n            # Drop the database\n            await conn.execute(f'DROP DATABASE IF EXISTS \"{database_name}\"')\n            \n            await conn.close()\n            \n            logger.info(f\"Dropped database: {database_name}\")\n            \n        except Exception as e:\n            logger.error(f\"Failed to drop database {database_name}: {e}\")\n            raise\n\n# Global sandbox manager instance\nsandbox_manager = SandboxManager()\n\n# Background cleanup task\nasync def start_cleanup_scheduler():\n    \"\"\"Start the background cleanup scheduler\"\"\"\n    while True:\n        try:\n            await sandbox_manager.cleanup_expired_sandboxes()\n            # Run cleanup every 30 minutes\n            await asyncio.sleep(30 * 60)\n        except Exception as e:\n            logger.error(f\"Cleanup scheduler error: {e}\")\n            # Wait 5 minutes before retrying on error\n            await asyncio.sleep(5 * 60)\n\n# Utility functions for API integration\nasync def create_user_sandbox(user_id: str, problem_id: str) -> UserSandbox:\n    \"\"\"Create a sandbox for a user and problem\"\"\"\n    return await sandbox_manager.create_sandbox(user_id, problem_id)\n\nasync def execute_sandbox_query(sandbox_id: str, query: str, timeout_seconds: int = 30) -> Tuple[Dict[str, Any], ExecutionStatus]:\n    \"\"\"Execute a query in a sandbox\"\"\"\n    return await sandbox_manager.execute_query(sandbox_id, query, timeout_seconds)\n\nasync def cleanup_sandbox_resources():\n    \"\"\"Cleanup all sandbox resources (for shutdown)\"\"\"\n    await sandbox_pool_manager.cleanup_all()","size_bytes":21786},"api/sandbox_routes.py":{"content":"\"\"\"\nSandbox API Routes for SQL Learning Platform\n===========================================\nProvides endpoints for managing user sandbox environments.\n\"\"\"\n\nimport asyncio\nfrom typing import Dict, Any\nfrom fastapi import APIRouter, Depends, HTTPException, status, BackgroundTasks\nfrom sqlalchemy.orm import Session\n\nfrom .database import get_db\nfrom .auth import get_current_user\nfrom .models import User, UserSandbox, TestCase, ExecutionResult, SandboxStatus, ExecutionStatus\nfrom .schemas import (\n    UserSandboxResponse, \n    ExecutionResultCreate, \n    ExecutionResultResponse,\n    TestCaseResponse\n)\nfrom .sandbox_manager import (\n    create_user_sandbox,\n    execute_sandbox_query,\n    sandbox_manager,\n    start_cleanup_scheduler\n)\n\n# Create router\nsandbox_router = APIRouter(prefix=\"/api/sandbox\", tags=[\"sandbox\"])\n\n# Global cleanup task\ncleanup_task = None\n\n@sandbox_router.on_event(\"startup\")\nasync def start_sandbox_cleanup():\n    \"\"\"Start the sandbox cleanup scheduler\"\"\"\n    global cleanup_task\n    if cleanup_task is None:\n        cleanup_task = asyncio.create_task(start_cleanup_scheduler())\n\n@sandbox_router.post(\"/create\", response_model=UserSandboxResponse)\nasync def create_sandbox(\n    problem_id: str,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"Create a new sandbox environment for a user and problem\"\"\"\n    try:\n        # Verify problem exists\n        from .models import Problem\n        problem = db.query(Problem).filter(Problem.id == problem_id).first()\n        if not problem:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Problem not found\"\n            )\n        \n        # Create sandbox\n        sandbox = await create_user_sandbox(current_user.id, problem_id)\n        \n        return UserSandboxResponse(\n            id=sandbox.id,\n            user_id=sandbox.user_id,\n            problem_id=sandbox.problem_id,\n            database_name=sandbox.database_name,\n            connection_string=\"[HIDDEN]\",  # Never expose connection string\n            status=sandbox.status,\n            max_execution_time_seconds=sandbox.max_execution_time_seconds,\n            max_memory_mb=sandbox.max_memory_mb,\n            max_connections=sandbox.max_connections,\n            expires_at=sandbox.expires_at,\n            created_at=sandbox.created_at,\n            last_accessed_at=sandbox.last_accessed_at\n        )\n        \n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to create sandbox: {str(e)}\"\n        )\n\n@sandbox_router.post(\"/execute\", response_model=Dict[str, Any])\nasync def execute_query(\n    sandbox_id: str,\n    query: str,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"Execute a SQL query in a sandbox environment\"\"\"\n    try:\n        # Verify sandbox exists and belongs to user\n        sandbox = db.query(UserSandbox).filter(\n            UserSandbox.id == sandbox_id,\n            UserSandbox.user_id == current_user.id\n        ).first()\n        \n        if not sandbox:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Sandbox not found or access denied\"\n            )\n        \n        if sandbox.status != SandboxStatus.ACTIVE.value:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=f\"Sandbox is {sandbox.status}, not active\"\n            )\n        \n        # Execute query with timeout\n        result, execution_status = await execute_sandbox_query(\n            sandbox_id, \n            query, \n            sandbox.max_execution_time_seconds\n        )\n        \n        return {\n            \"sandbox_id\": sandbox_id,\n            \"query\": query,\n            \"execution_status\": execution_status.value,\n            \"result\": result,\n            \"timestamp\": sandbox.last_accessed_at.isoformat()\n        }\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to execute query: {str(e)}\"\n        )\n\n@sandbox_router.get(\"/status/{sandbox_id}\", response_model=UserSandboxResponse)\nasync def get_sandbox_status(\n    sandbox_id: str,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"Get sandbox status and details\"\"\"\n    try:\n        sandbox = db.query(UserSandbox).filter(\n            UserSandbox.id == sandbox_id,\n            UserSandbox.user_id == current_user.id\n        ).first()\n        \n        if not sandbox:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Sandbox not found or access denied\"\n            )\n        \n        return UserSandboxResponse(\n            id=sandbox.id,\n            user_id=sandbox.user_id,\n            problem_id=sandbox.problem_id,\n            database_name=sandbox.database_name,\n            connection_string=\"[HIDDEN]\",  # Never expose connection string\n            status=sandbox.status,\n            max_execution_time_seconds=sandbox.max_execution_time_seconds,\n            max_memory_mb=sandbox.max_memory_mb,\n            max_connections=sandbox.max_connections,\n            expires_at=sandbox.expires_at,\n            created_at=sandbox.created_at,\n            last_accessed_at=sandbox.last_accessed_at\n        )\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to get sandbox status: {str(e)}\"\n        )\n\n@sandbox_router.get(\"/list\", response_model=list[UserSandboxResponse])\nasync def list_user_sandboxes(\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"List all sandboxes for the current user\"\"\"\n    try:\n        sandboxes = db.query(UserSandbox).filter(\n            UserSandbox.user_id == current_user.id\n        ).order_by(UserSandbox.created_at.desc()).all()\n        \n        return [\n            UserSandboxResponse(\n                id=sandbox.id,\n                user_id=sandbox.user_id,\n                problem_id=sandbox.problem_id,\n                database_name=sandbox.database_name,\n                connection_string=\"[HIDDEN]\",  # Never expose connection string\n                status=sandbox.status,\n                max_execution_time_seconds=sandbox.max_execution_time_seconds,\n                max_memory_mb=sandbox.max_memory_mb,\n                max_connections=sandbox.max_connections,\n                expires_at=sandbox.expires_at,\n                created_at=sandbox.created_at,\n                last_accessed_at=sandbox.last_accessed_at\n            )\n            for sandbox in sandboxes\n        ]\n        \n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to list sandboxes: {str(e)}\"\n        )\n\n@sandbox_router.delete(\"/cleanup/{sandbox_id}\")\nasync def cleanup_sandbox(\n    sandbox_id: str,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db),\n    background_tasks: BackgroundTasks = BackgroundTasks()\n):\n    \"\"\"Manually cleanup a sandbox (mark for deletion)\"\"\"\n    try:\n        sandbox = db.query(UserSandbox).filter(\n            UserSandbox.id == sandbox_id,\n            UserSandbox.user_id == current_user.id\n        ).first()\n        \n        if not sandbox:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Sandbox not found or access denied\"\n            )\n        \n        if sandbox.status == SandboxStatus.EXPIRED.value:\n            return {\"message\": \"Sandbox already expired\"}\n        \n        # Mark sandbox as cleanup pending\n        sandbox.status = SandboxStatus.CLEANUP_PENDING.value\n        sandbox.cleanup_scheduled_at = sandbox.last_accessed_at\n        db.commit()\n        \n        # Schedule cleanup in background\n        background_tasks.add_task(sandbox_manager.cleanup_expired_sandboxes)\n        \n        return {\"message\": \"Sandbox cleanup scheduled\"}\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to cleanup sandbox: {str(e)}\"\n        )\n\n@sandbox_router.get(\"/test-cases/{problem_id}\", response_model=list[TestCaseResponse])\nasync def get_problem_test_cases(\n    problem_id: str,\n    include_hidden: bool = False,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"Get test cases for a problem (excluding hidden ones by default)\"\"\"\n    try:\n        # Verify problem exists\n        from .models import Problem\n        problem = db.query(Problem).filter(Problem.id == problem_id).first()\n        if not problem:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Problem not found\"\n            )\n        \n        # Get test cases\n        query = db.query(TestCase).filter(TestCase.problem_id == problem_id)\n        \n        if not include_hidden:\n            query = query.filter(TestCase.is_hidden == False)\n        \n        test_cases = query.order_by(TestCase.order_index).all()\n        \n        return [\n            TestCaseResponse(\n                id=tc.id,\n                problem_id=tc.problem_id,\n                name=tc.name,\n                description=tc.description,\n                input_data=tc.input_data,\n                expected_output=tc.expected_output,\n                validation_rules=tc.validation_rules,\n                is_hidden=tc.is_hidden,\n                order_index=tc.order_index,\n                timeout_seconds=tc.timeout_seconds,\n                memory_limit_mb=tc.memory_limit_mb,\n                created_at=tc.created_at,\n                updated_at=tc.updated_at\n            )\n            for tc in test_cases\n        ]\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to get test cases: {str(e)}\"\n        )\n\n@sandbox_router.post(\"/validate/{sandbox_id}\")\nasync def validate_submission(\n    sandbox_id: str,\n    query: str,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"Validate a user's SQL submission against all test cases\"\"\"\n    try:\n        # Get sandbox and verify ownership\n        sandbox = db.query(UserSandbox).filter(\n            UserSandbox.id == sandbox_id,\n            UserSandbox.user_id == current_user.id\n        ).first()\n        \n        if not sandbox:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Sandbox not found or access denied\"\n            )\n        \n        # Get all test cases for the problem\n        test_cases = db.query(TestCase).filter(\n            TestCase.problem_id == sandbox.problem_id\n        ).order_by(TestCase.order_index).all()\n        \n        if not test_cases:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"No test cases found for this problem\"\n            )\n        \n        validation_results = []\n        passed_count = 0\n        \n        for test_case in test_cases:\n            try:\n                # Execute query\n                result, execution_status = await execute_sandbox_query(\n                    sandbox_id,\n                    query,\n                    test_case.timeout_seconds\n                )\n                \n                # Basic validation - compare results\n                is_correct = False\n                validation_details = {}\n                \n                if execution_status == ExecutionStatus.SUCCESS:\n                    expected = test_case.expected_output\n                    actual = result.get('result', [])\n                    \n                    # Simple comparison (can be enhanced with custom validation rules)\n                    is_correct = actual == expected\n                    if is_correct:\n                        passed_count += 1\n                    \n                    validation_details = {\n                        \"expected_rows\": len(expected),\n                        \"actual_rows\": len(actual),\n                        \"matches\": is_correct\n                    }\n                else:\n                    validation_details = {\n                        \"error\": result.get('error', 'Unknown error'),\n                        \"status\": execution_status.value\n                    }\n                \n                validation_results.append({\n                    \"test_case_id\": test_case.id,\n                    \"test_case_name\": test_case.name,\n                    \"is_hidden\": test_case.is_hidden,\n                    \"is_correct\": is_correct,\n                    \"execution_status\": execution_status.value,\n                    \"execution_time_ms\": result.get('execution_time_ms', 0),\n                    \"validation_details\": validation_details\n                })\n                \n            except Exception as e:\n                validation_results.append({\n                    \"test_case_id\": test_case.id,\n                    \"test_case_name\": test_case.name,\n                    \"is_hidden\": test_case.is_hidden,\n                    \"is_correct\": False,\n                    \"execution_status\": \"ERROR\",\n                    \"error\": str(e),\n                    \"validation_details\": {\"error\": str(e)}\n                })\n        \n        # Calculate overall score\n        total_tests = len(test_cases)\n        score_percentage = (passed_count / total_tests * 100) if total_tests > 0 else 0\n        \n        return {\n            \"sandbox_id\": sandbox_id,\n            \"problem_id\": sandbox.problem_id,\n            \"query\": query,\n            \"total_test_cases\": total_tests,\n            \"passed_test_cases\": passed_count,\n            \"score_percentage\": score_percentage,\n            \"is_solution_correct\": passed_count == total_tests,\n            \"validation_results\": validation_results,\n            \"timestamp\": sandbox.last_accessed_at.isoformat()\n        }\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Failed to validate submission: {str(e)}\"\n        )","size_bytes":14681},"scripts/init_enhanced_schema.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nInitialize Enhanced Database Schema\n==================================\nCreates the new database tables for the enhanced SQL learning platform.\n\"\"\"\n\nimport os\nimport sys\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom api.database import create_tables, engine\nfrom api.models import Base\n\ndef main():\n    \"\"\"Initialize the enhanced database schema\"\"\"\n    print(\"🚀 Initializing Enhanced Database Schema...\")\n    \n    try:\n        # Create all tables\n        create_tables()\n        print(\"✅ Enhanced database schema initialized successfully!\")\n        \n        # List all tables\n        from sqlalchemy import inspect\n        inspector = inspect(engine)\n        tables = inspector.get_table_names()\n        \n        print(f\"\\n📊 Database now contains {len(tables)} tables:\")\n        for table in sorted(tables):\n            print(f\"  • {table}\")\n            \n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error initializing schema: {e}\")\n        return False\n\nif __name__ == \"__main__\":\n    success = main()\n    sys.exit(0 if success else 1)","size_bytes":1140},"test_security_fixes.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nTest script to verify SQL query validator security fixes\n\"\"\"\n\nimport sys\nimport os\nsys.path.append('/home/runner/workspace')\n\nfrom api.query_validator import query_validator, QueryValidationError\n\ndef test_security_fixes():\n    \"\"\"Comprehensive test of security fixes\"\"\"\n    \n    print(\"🔒 Testing SQL Query Validator Security Fixes\")\n    print(\"=\" * 50)\n    \n    # Test 1: Single statement enforcement\n    print(\"\\n1. Testing single statement enforcement...\")\n    \n    # Should pass: Single SELECT\n    result = query_validator.validate_query(\"SELECT * FROM users\")\n    assert result['is_valid'] == True, \"Single SELECT should be valid\"\n    print(\"✅ Single SELECT statement allowed\")\n    \n    # Should fail: Multiple statements\n    result = query_validator.validate_query(\"SELECT * FROM users; DROP TABLE users;\")\n    assert result['is_valid'] == False, \"Multiple statements should be blocked\"\n    assert any(\"Multiple statements\" in error for error in result['errors']), \"Should detect multiple statements\"\n    print(\"✅ Multiple statements blocked\")\n    \n    # Test 2: DML/DDL blocking\n    print(\"\\n2. Testing DML/DDL operation blocking...\")\n    \n    # Should fail: INSERT\n    result = query_validator.validate_query(\"INSERT INTO users (name) VALUES ('test')\")\n    assert result['is_valid'] == False, \"INSERT should be blocked\"\n    print(\"✅ INSERT operations blocked\")\n    \n    # Should fail: UPDATE\n    result = query_validator.validate_query(\"UPDATE users SET name = 'test' WHERE id = 1\")\n    assert result['is_valid'] == False, \"UPDATE should be blocked\"\n    print(\"✅ UPDATE operations blocked\")\n    \n    # Should fail: DELETE\n    result = query_validator.validate_query(\"DELETE FROM users WHERE id = 1\")\n    assert result['is_valid'] == False, \"DELETE should be blocked\"\n    print(\"✅ DELETE operations blocked\")\n    \n    # Should fail: CREATE\n    result = query_validator.validate_query(\"CREATE TABLE test (id INT)\")\n    assert result['is_valid'] == False, \"CREATE should be blocked\"\n    print(\"✅ CREATE operations blocked\")\n    \n    # Should fail: DROP\n    result = query_validator.validate_query(\"DROP TABLE users\")\n    assert result['is_valid'] == False, \"DROP should be blocked\"\n    print(\"✅ DROP operations blocked\")\n    \n    # Test 3: UNION operations (should be allowed)\n    print(\"\\n3. Testing UNION operations (should be allowed)...\")\n    \n    result = query_validator.validate_query(\"\"\"\n        SELECT name FROM users \n        UNION \n        SELECT name FROM customers\n    \"\"\")\n    assert result['is_valid'] == True, \"UNION should be allowed\"\n    print(\"✅ UNION operations allowed\")\n    \n    result = query_validator.validate_query(\"\"\"\n        SELECT id, name FROM users \n        UNION ALL \n        SELECT id, name FROM customers\n    \"\"\")\n    assert result['is_valid'] == True, \"UNION ALL should be allowed\"\n    print(\"✅ UNION ALL operations allowed\")\n    \n    # Test 4: INTERSECT/EXCEPT operations\n    print(\"\\n4. Testing INTERSECT/EXCEPT operations...\")\n    \n    result = query_validator.validate_query(\"\"\"\n        SELECT name FROM users \n        INTERSECT \n        SELECT name FROM customers\n    \"\"\")\n    assert result['is_valid'] == True, \"INTERSECT should be allowed\"\n    print(\"✅ INTERSECT operations allowed\")\n    \n    result = query_validator.validate_query(\"\"\"\n        SELECT name FROM users \n        EXCEPT \n        SELECT name FROM customers\n    \"\"\")\n    assert result['is_valid'] == True, \"EXCEPT should be allowed\"\n    print(\"✅ EXCEPT operations allowed\")\n    \n    # Test 5: Comments (should be allowed)\n    print(\"\\n5. Testing SQL comments...\")\n    \n    result = query_validator.validate_query(\"\"\"\n        -- This is a comment\n        SELECT * FROM users -- Another comment\n        WHERE id > 10\n    \"\"\")\n    assert result['is_valid'] == True, \"Comments should be allowed\"\n    print(\"✅ SQL comments allowed\")\n    \n    result = query_validator.validate_query(\"\"\"\n        /* Multi-line comment */\n        SELECT * FROM users \n        /* Another comment */\n    \"\"\")\n    assert result['is_valid'] == True, \"Multi-line comments should be allowed\"\n    print(\"✅ Multi-line comments allowed\")\n    \n    # Test 6: Dangerous functions (should be blocked)\n    print(\"\\n6. Testing dangerous function blocking...\")\n    \n    # Should fail: File operations\n    result = query_validator.validate_query(\"SELECT LOAD_FILE('/etc/passwd')\")\n    assert result['is_valid'] == False, \"LOAD_FILE should be blocked\"\n    print(\"✅ LOAD_FILE operations blocked\")\n    \n    result = query_validator.validate_query(\"SELECT * FROM users INTO OUTFILE '/tmp/test.txt'\")\n    assert result['is_valid'] == False, \"INTO OUTFILE should be blocked\"\n    print(\"✅ INTO OUTFILE operations blocked\")\n    \n    # Test 7: Complex valid queries\n    print(\"\\n7. Testing complex valid queries...\")\n    \n    result = query_validator.validate_query(\"\"\"\n        WITH user_stats AS (\n            SELECT \n                department,\n                COUNT(*) as user_count,\n                AVG(salary) as avg_salary\n            FROM users u\n            JOIN departments d ON u.dept_id = d.id\n            WHERE u.active = true\n            GROUP BY department\n        )\n        SELECT \n            department,\n            user_count,\n            avg_salary,\n            CASE \n                WHEN avg_salary > 50000 THEN 'High'\n                WHEN avg_salary > 30000 THEN 'Medium'\n                ELSE 'Low'\n            END as salary_bracket\n        FROM user_stats\n        ORDER BY avg_salary DESC\n        LIMIT 10\n    \"\"\")\n    assert result['is_valid'] == True, \"Complex valid query should be allowed\"\n    print(\"✅ Complex valid queries allowed\")\n    \n    # Test 8: Injection attempts (should be blocked)\n    print(\"\\n8. Testing injection attempt blocking...\")\n    \n    result = query_validator.validate_query(\"SELECT * FROM users WHERE name = '' OR '1'='1'\")\n    assert result['is_valid'] == False, \"SQL injection should be blocked\"\n    print(\"✅ SQL injection attempts blocked\")\n    \n    print(\"\\n\" + \"=\" * 50)\n    print(\"🎉 ALL SECURITY TESTS PASSED!\")\n    print(\"✅ Single statement enforcement working\")\n    print(\"✅ Complete DML/DDL blocking working\") \n    print(\"✅ UNION/INTERSECT/EXCEPT operations allowed\")\n    print(\"✅ SQL comments allowed\")\n    print(\"✅ Dangerous functions blocked\")\n    print(\"✅ Complex valid queries supported\")\n    print(\"✅ Injection attempts blocked\")\n    print(\"\\n🔒 SQL Query Validator is now SECURE! 🔒\")\n\nif __name__ == \"__main__\":\n    try:\n        test_security_fixes()\n    except Exception as e:\n        print(f\"\\n❌ SECURITY TEST FAILED: {e}\")\n        import traceback\n        traceback.print_exc()\n        sys.exit(1)","size_bytes":6712},"api/query_validator.py":{"content":"\"\"\"\nSecure SQL Query Validation System\n=================================\nProvides comprehensive validation for SQL queries including:\n- Syntax validation\n- Dangerous operation detection  \n- Query analysis and security filtering\n- Complete token tree walking for security\n- Execution limits enforcement\n\"\"\"\n\nimport re\nimport logging\nfrom typing import Dict, List, Tuple, Optional, Any, Set\nfrom enum import Enum\nfrom sqlparse import parse, tokens, sql\nfrom sqlparse.engine import FilterStack\nfrom sqlparse.filters import StripWhitespaceFilter\n\nlogger = logging.getLogger(__name__)\n\nclass QueryRisk(Enum):\n    \"\"\"Risk levels for SQL queries\"\"\"\n    SAFE = \"safe\"\n    LOW = \"low\"\n    MEDIUM = \"medium\" \n    HIGH = \"high\"\n    CRITICAL = \"critical\"\n\nclass QueryValidationError(Exception):\n    \"\"\"Raised when query validation fails\"\"\"\n    pass\n\nclass QueryExecutionRequest:\n    \"\"\"Query execution request configuration\"\"\"\n    def __init__(self, query: str, timeout_seconds: int = 30, max_rows: int = 1000):\n        if not query.strip():\n            raise ValueError('Query cannot be empty')\n        if len(query) > 10000:\n            raise ValueError('Query too long (max 10000 characters)')\n        if timeout_seconds < 1 or timeout_seconds > 60:\n            raise ValueError('Timeout must be between 1 and 60 seconds')\n        if max_rows < 1 or max_rows > 10000:\n            raise ValueError('Max rows must be between 1 and 10000')\n            \n        self.query = query.strip()\n        self.timeout_seconds = timeout_seconds\n        self.max_rows = max_rows\n\nclass ExecutionLimits:\n    \"\"\"Execution limits configuration\"\"\"\n    def __init__(self, max_execution_time_seconds: int = 30, max_memory_mb: int = 256, \n                 max_result_rows: int = 1000, max_query_length: int = 10000):\n        self.max_execution_time_seconds = max_execution_time_seconds\n        self.max_memory_mb = max_memory_mb\n        self.max_result_rows = max_result_rows\n        self.max_query_length = max_query_length\n\nclass SecureSQLValidator:\n    \"\"\"Comprehensive SQL query validator with security checks\"\"\"\n    \n    def __init__(self):\n        # Execution limits\n        self.execution_limits = ExecutionLimits()\n        \n        # Strictly blocked DML/DDL keywords (anywhere in query)\n        self.blocked_keywords = {\n            # All DML operations that modify data\n            'INSERT', 'UPDATE', 'DELETE', 'MERGE', 'UPSERT',\n            \n            # All DDL operations that modify structure  \n            'CREATE', 'ALTER', 'DROP', 'TRUNCATE', 'RENAME',\n            \n            # Administrative and control statements\n            'GRANT', 'REVOKE', 'COMMIT', 'ROLLBACK', 'SAVEPOINT',\n            'SET', 'RESET', 'SHOW', 'DESCRIBE', 'DESC', 'EXPLAIN',\n            \n            # Database/schema level operations\n            'USE', 'ATTACH', 'DETACH'\n        }\n        \n        # Dangerous system functions and commands\n        self.dangerous_patterns = {\n            # System access functions\n            'system_functions': [\n                r'\\b(?:xp_cmdshell|sp_configure|openrowset|opendatasource)\\b',\n                r'\\b(?:pg_read_file|pg_write_file|copy\\s+.*?\\bfrom\\s+program)\\b',\n                r'\\b(?:load_file|into\\s+outfile|into\\s+dumpfile)\\b',\n                r'\\b(?:exec|execute|eval)\\s*\\(',\n                r'\\b(?:sleep|waitfor|benchmark)\\s*\\(',\n            ],\n            \n            # File and OS operations\n            'file_operations': [\n                r'\\binto\\s+(?:outfile|dumpfile)\\b',\n                r'\\bload\\s+data\\s+infile\\b',\n                r'\\bselect\\s+.*?\\binto\\s+(?:outfile|dumpfile)\\b'\n            ],\n            \n            # Multi-statement injection attempts\n            'injection_attempts': [\n                r';\\s*(?:DROP|DELETE|UPDATE|INSERT|ALTER|CREATE|TRUNCATE)',\n                r\"'\\s*OR\\s*'[^']*'\\s*=\\s*'[^']*'\",  # Classic SQL injection\n                r'\\bunion\\s+(?:all\\s+)?select\\s+.*?\\bfrom\\s+(?:information_schema|pg_|sys)'\n            ]\n        }\n        \n        # Allowed statement types for learning platform (read-only)\n        self.allowed_statements = {\n            'SELECT', 'WITH'  # Only read operations allowed\n        }\n        \n        # Allowed read-only operations and functions\n        self.allowed_keywords = {\n            'SELECT', 'FROM', 'WHERE', 'GROUP', 'HAVING', 'ORDER', 'LIMIT', 'OFFSET',\n            'JOIN', 'INNER', 'LEFT', 'RIGHT', 'FULL', 'CROSS', 'ON', 'USING',\n            'UNION', 'INTERSECT', 'EXCEPT', 'ALL', 'DISTINCT',\n            'AS', 'CASE', 'WHEN', 'THEN', 'ELSE', 'END',\n            'AND', 'OR', 'NOT', 'IN', 'EXISTS', 'BETWEEN', 'LIKE', 'IS', 'NULL',\n            'WITH', 'RECURSIVE'\n        }\n        \n    def validate_query(self, query: str) -> Dict[str, Any]:\n        \"\"\"\n        Comprehensive query validation\n        \n        Returns:\n            Dict with validation results including:\n            - is_valid: bool\n            - risk_level: QueryRisk\n            - errors: List[str]\n            - warnings: List[str]\n            - parsed_query: Dict\n        \"\"\"\n        result = {\n            'is_valid': False,\n            'risk_level': QueryRisk.SAFE,\n            'errors': [],\n            'warnings': [],\n            'parsed_query': {},\n            'allowed_operations': [],\n            'blocked_operations': []\n        }\n        \n        try:\n            # Basic sanitization\n            cleaned_query = self._sanitize_query(query)\n            \n            # Syntax validation\n            syntax_result = self._validate_syntax(cleaned_query)\n            if not syntax_result['valid']:\n                result['errors'].extend(syntax_result['errors'])\n                result['risk_level'] = QueryRisk.HIGH\n                return result\n            \n            # Parse the query\n            parsed = parse(cleaned_query)[0] if parse(cleaned_query) else None\n            if not parsed:\n                result['errors'].append(\"Failed to parse SQL query\")\n                result['risk_level'] = QueryRisk.HIGH\n                return result\n            \n            # Extract query information\n            query_info = self._extract_query_info(parsed)\n            result['parsed_query'] = query_info\n            \n            # Security validation\n            security_result = self._validate_security(cleaned_query, query_info)\n            result['errors'].extend(security_result['errors'])\n            result['warnings'].extend(security_result['warnings'])\n            result['blocked_operations'] = security_result['blocked_operations']\n            result['allowed_operations'] = security_result['allowed_operations']\n            \n            # Determine final risk level\n            if result['errors']:\n                result['risk_level'] = QueryRisk.CRITICAL\n                result['is_valid'] = False\n            elif result['warnings']:\n                result['risk_level'] = QueryRisk.MEDIUM\n                result['is_valid'] = True\n            else:\n                result['risk_level'] = QueryRisk.SAFE\n                result['is_valid'] = True\n                \n        except Exception as e:\n            logger.error(f\"Query validation failed: {e}\")\n            result['errors'].append(f\"Validation error: {str(e)}\")\n            result['risk_level'] = QueryRisk.CRITICAL\n            \n        return result\n    \n    def _sanitize_query(self, query: str) -> str:\n        \"\"\"Basic query sanitization with enhanced security\"\"\"\n        if not query or not query.strip():\n            raise QueryValidationError(\"Empty query provided\")\n            \n        # Remove leading/trailing whitespace\n        cleaned = query.strip()\n        \n        # Enhanced length check\n        if len(cleaned) > self.execution_limits.max_query_length:\n            raise QueryValidationError(f\"Query too long (max {self.execution_limits.max_query_length} characters)\")\n            \n        # Remove null bytes and other control characters\n        cleaned = ''.join(char for char in cleaned if ord(char) >= 32 or char in '\\t\\n\\r')\n        \n        return cleaned\n    \n    def _validate_syntax(self, query: str) -> Dict[str, Any]:\n        \"\"\"Validate SQL syntax with enhanced security checks\"\"\"\n        result = {'valid': False, 'errors': []}\n        \n        try:\n            parsed = parse(query)\n            if not parsed:\n                result['errors'].append(\"Invalid SQL syntax\")\n                return result\n                \n            # CRITICAL: Enforce single statement only\n            if len(parsed) > 1:\n                result['errors'].append(\"Multiple statements not allowed. Only single SELECT or WITH statements permitted.\")\n                return result\n                \n            # Walk the complete token tree to find ALL keywords\n            all_keywords = set()\n            blocked_found = set()\n            \n            self._walk_token_tree(parsed[0], all_keywords, blocked_found)\n            \n            # Check if any blocked keywords were found\n            if blocked_found:\n                result['errors'].append(f\"Blocked operations detected: {', '.join(sorted(blocked_found))}\")\n                return result\n                \n            # Validate that first meaningful keyword is allowed  \n            first_token = None\n            # Use flattened tokens to ensure we get the very first keyword in order\n            for token in parsed[0].flatten():\n                # Check for any keyword type (including DML, DDL, etc.)\n                if (token.ttype is tokens.Keyword or \n                    token.ttype is tokens.Keyword.DML or\n                    token.ttype is tokens.Keyword.DDL):\n                    potential_token = token.value.upper()\n                    if potential_token in self.allowed_statements:\n                        first_token = potential_token\n                        break\n                    \n            if not first_token:\n                result['errors'].append(\"No valid SQL statement found\")\n                return result\n                \n            if first_token not in self.allowed_statements:\n                result['errors'].append(f\"Statement type '{first_token}' not allowed. Only SELECT and WITH statements permitted.\")\n                return result\n                \n            result['valid'] = True\n            \n        except Exception as e:\n            result['errors'].append(f\"Syntax validation error: {str(e)}\")\n            \n        return result\n    \n    def _walk_token_tree(self, token, all_keywords: Set[str], blocked_found: Set[str]):\n        \"\"\"Recursively walk the complete SQL token tree to find all keywords\"\"\"\n        if hasattr(token, 'tokens'):\n            for sub_token in token.tokens:\n                self._walk_token_tree(sub_token, all_keywords, blocked_found)\n        else:\n            if token.ttype is tokens.Keyword:\n                keyword = token.value.upper()\n                all_keywords.add(keyword)\n                \n                # Check if this keyword is blocked\n                if keyword in self.blocked_keywords:\n                    blocked_found.add(keyword)\n    \n    def _extract_query_info(self, parsed_query) -> Dict[str, Any]:\n        \"\"\"Extract information from parsed query\"\"\"\n        info = {\n            'statement_type': None,\n            'tables': [],\n            'columns': [],\n            'functions': [],\n            'joins': [],\n            'where_clauses': [],\n            'subqueries': 0,\n            'complexity_score': 0\n        }\n        \n        try:\n            # Get statement type\n            for token in parsed_query.flatten():\n                if token.ttype is tokens.Keyword:\n                    info['statement_type'] = token.value.upper()\n                    break\n            \n            # Extract table names, functions, etc.\n            self._extract_query_elements(parsed_query, info)\n            \n            # Calculate complexity score\n            info['complexity_score'] = self._calculate_complexity(info)\n            \n        except Exception as e:\n            logger.warning(f\"Failed to extract query info: {e}\")\n            \n        return info\n    \n    def _extract_query_elements(self, token, info: Dict[str, Any], depth: int = 0):\n        \"\"\"Recursively extract query elements\"\"\"\n        if hasattr(token, 'tokens'):\n            for sub_token in token.tokens:\n                self._extract_query_elements(sub_token, info, depth + 1)\n        else:\n            # Extract different elements based on token type\n            if token.ttype is tokens.Name:\n                # Could be table or column name\n                value = token.value.lower()\n                if value not in ['select', 'from', 'where', 'and', 'or']:\n                    if depth > 0:  # Likely a table or column\n                        if '.' not in value and value not in info['tables']:\n                            info['tables'].append(value)\n            \n            elif token.ttype is tokens.Name.Builtin:\n                # Built-in functions\n                func_name = token.value.lower()\n                if func_name not in info['functions']:\n                    info['functions'].append(func_name)\n            \n            elif token.ttype is tokens.Keyword and token.value.upper() in ['JOIN', 'INNER', 'LEFT', 'RIGHT', 'FULL']:\n                join_type = token.value.upper()\n                if join_type not in info['joins']:\n                    info['joins'].append(join_type)\n    \n    def _calculate_complexity(self, info: Dict[str, Any]) -> int:\n        \"\"\"Calculate query complexity score\"\"\"\n        score = 0\n        score += len(info['tables']) * 2\n        score += len(info['joins']) * 3\n        score += len(info['functions']) * 2\n        score += info['subqueries'] * 5\n        score += len(info['where_clauses'])\n        return score\n    \n    def _validate_security(self, query: str, query_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Perform enhanced security validation checks\"\"\"\n        result = {\n            'errors': [],\n            'warnings': [],\n            'blocked_operations': [],\n            'allowed_operations': []\n        }\n        \n        query_upper = query.upper()\n        \n        # Check for dangerous system functions and operations\n        for category, patterns in self.dangerous_patterns.items():\n            for pattern in patterns:\n                if re.search(pattern, query_upper, re.IGNORECASE):\n                    result['errors'].append(f\"Dangerous operation detected: {category}\")\n                    result['blocked_operations'].append(category)\n        \n        # Check for allowed operations\n        if query_info.get('statement_type') in self.allowed_statements:\n            result['allowed_operations'].append(query_info['statement_type'])\n        \n        # Enhanced complexity warnings\n        complexity_score = query_info.get('complexity_score', 0)\n        if complexity_score > 25:\n            result['warnings'].append(\"Very high query complexity detected\")\n        elif complexity_score > 15:\n            result['warnings'].append(\"High query complexity detected\")\n        \n        # Check for too many tables (potential for cartesian product)\n        table_count = len(query_info.get('tables', []))\n        if table_count > 6:\n            result['warnings'].append(f\"Query accesses {table_count} tables - ensure proper JOIN conditions to avoid cartesian products\")\n        elif table_count > 3:\n            result['warnings'].append(\"Query accesses multiple tables - verify JOIN conditions\")\n        \n        # Check for potential performance issues\n        if 'LIKE' in query_upper and '%' in query and query.index('%') == query.index('LIKE') + 5:\n            result['warnings'].append(\"Leading wildcard in LIKE pattern may cause slow performance\")\n            \n        return result\n    \n    def get_safe_query_suggestions(self, query: str) -> List[str]:\n        \"\"\"Provide suggestions for making query safer\"\"\"\n        suggestions = []\n        \n        query_upper = query.upper()\n        \n        # Check for missing WHERE clauses\n        if 'DELETE FROM' in query_upper and 'WHERE' not in query_upper:\n            suggestions.append(\"Add WHERE clause to DELETE statement for safety\")\n        \n        if 'UPDATE' in query_upper and 'SET' in query_upper and 'WHERE' not in query_upper:\n            suggestions.append(\"Add WHERE clause to UPDATE statement for safety\")\n        \n        # Check for SELECT *\n        if 'SELECT *' in query_upper:\n            suggestions.append(\"Consider specifying column names instead of using SELECT *\")\n        \n        # Check for potential inefficiencies\n        if 'LIKE' in query_upper and '%' in query:\n            suggestions.append(\"LIKE with leading wildcards can be slow - consider alternatives\")\n        \n        return suggestions\n\n\nclass QuerySanitizer:\n    \"\"\"Enhanced query sanitization utilities\"\"\"\n    \n    @staticmethod\n    def normalize_whitespace(query: str) -> str:\n        \"\"\"Normalize whitespace in query\"\"\"\n        return re.sub(r'\\s+', ' ', query.strip())\n    \n    @staticmethod\n    def add_execution_limits(query: str, limits: ExecutionLimits) -> str:\n        \"\"\"Add execution limits to query if not present\"\"\"\n        query = query.rstrip(';').strip()\n        \n        # Add LIMIT clause if not present for SELECT statements\n        if 'SELECT' in query.upper() and 'LIMIT' not in query.upper():\n            query += f' LIMIT {limits.max_result_rows}'\n            \n        return query\n    \n    @staticmethod \n    def validate_execution_request(request_data: dict) -> QueryExecutionRequest:\n        \"\"\"Validate execution request using Pydantic\"\"\"\n        try:\n            return QueryExecutionRequest(**request_data)\n        except Exception as e:\n            raise QueryValidationError(f\"Invalid request format: {str(e)}\")\n\nclass ExecutionLimitEnforcer:\n    \"\"\"Enforces execution limits during query execution\"\"\"\n    \n    def __init__(self, limits: ExecutionLimits):\n        self.limits = limits\n    \n    def prepare_query_with_limits(self, query: str) -> str:\n        \"\"\"Prepare query with enforced limits\"\"\"\n        # Add row limit if not present\n        if 'LIMIT' not in query.upper() and 'SELECT' in query.upper():\n            query = query.rstrip(';')\n            query += f' LIMIT {self.limits.max_result_rows}'\n        \n        return query\n    \n    def validate_execution_time(self, start_time: float, current_time: float) -> bool:\n        \"\"\"Check if execution time exceeds limits\"\"\"\n        return (current_time - start_time) <= self.limits.max_execution_time_seconds\n\n\n# Global validator instance\nquery_validator = SecureSQLValidator()","size_bytes":18597},"api/secure_execution.py":{"content":"\"\"\"\nSecure Query Execution System\n============================\nIntegrates SQL validation, sandbox execution, and test case validation\nfor the SQLGym learning platform.\n\"\"\"\n\nimport asyncio\nimport logging\nimport json\nfrom typing import Dict, List, Any, Optional, Tuple\nfrom datetime import datetime, timedelta\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import text, create_engine\nfrom contextlib import asynccontextmanager\n\nfrom .query_validator import query_validator, QueryValidationError, QueryRisk\nfrom .test_validator import test_validator, ComparisonMode\nfrom .sandbox_manager import sandbox_manager, execute_sandbox_query\nfrom .models import (\n    User, Problem, TestCase, UserSandbox, Submission, \n    ExecutionResult, ExecutionStatus, SandboxStatus\n)\nfrom .schemas import (\n    ExecutionResultCreate, \n    DetailedSubmissionResponse,\n    TestCaseResponse\n)\n\nlogger = logging.getLogger(__name__)\n\nclass SecureQueryExecutor:\n    \"\"\"Secure SQL query executor with comprehensive validation\"\"\"\n    \n    def __init__(self):\n        self.max_execution_time = 30  # seconds\n        self.max_memory_mb = 256\n        self.max_result_rows = 10000\n    \n    async def submit_solution(\n        self,\n        user_id: str,\n        problem_id: str,\n        query: str,\n        db: Session\n    ) -> Dict[str, Any]:\n        \"\"\"\n        Submit and validate a complete solution\n        \n        Returns:\n            Complete submission result with scoring and feedback\n        \"\"\"\n        try:\n            # Step 1: Validate query security\n            validation_result = query_validator.validate_query(query)\n            \n            if not validation_result['is_valid']:\n                return {\n                    'success': False,\n                    'is_correct': False,\n                    'score': 0.0,\n                    'feedback': validation_result['errors'],\n                    'security_violations': validation_result['blocked_operations'],\n                    'submission_id': None\n                }\n            \n            # Step 2: Get or create sandbox\n            sandbox = await self._get_or_create_sandbox(user_id, problem_id, db)\n            \n            if not sandbox:\n                return {\n                    'success': False,\n                    'is_correct': False,\n                    'score': 0.0,\n                    'feedback': ['Failed to create execution sandbox'],\n                    'submission_id': None\n                }\n            \n            # Step 3: Execute against all test cases\n            test_results = await self._execute_all_test_cases(\n                sandbox.id, problem_id, query, db\n            )\n            \n            # Step 4: Calculate final score and correctness\n            final_score = self._calculate_final_score(test_results)\n            is_correct = final_score['overall_score'] >= 95.0\n            \n            # Step 5: Create submission record\n            submission = Submission(\n                user_id=user_id,\n                problem_id=problem_id,\n                query=query,\n                is_correct=is_correct,\n                execution_time=final_score['avg_execution_time']\n            )\n            \n            db.add(submission)\n            db.commit()\n            db.refresh(submission)\n            \n            # Step 6: Update user progress if correct\n            if is_correct:\n                await self._update_user_progress(user_id, problem_id, db)\n            \n            return {\n                'success': True,\n                'submission_id': submission.id,\n                'is_correct': is_correct,\n                'score': final_score['overall_score'],\n                'feedback': final_score['feedback'],\n                'test_results': test_results,\n                'passed_tests': final_score['passed_count'],\n                'total_tests': final_score['total_count'],\n                'execution_stats': {\n                    'avg_time_ms': final_score['avg_execution_time'],\n                    'max_time_ms': final_score['max_execution_time'],\n                    'memory_used_mb': final_score.get('avg_memory_mb', 0)\n                },\n                'security_warnings': validation_result.get('warnings', [])\n            }\n            \n        except Exception as e:\n            logger.error(f\"Solution submission failed: {e}\")\n            return {\n                'success': False,\n                'is_correct': False,\n                'score': 0.0,\n                'feedback': [f'Execution error: {str(e)}'],\n                'submission_id': None\n            }\n    \n    async def test_query(\n        self,\n        user_id: str,\n        problem_id: str,\n        query: str,\n        db: Session,\n        include_hidden_tests: bool = False\n    ) -> Dict[str, Any]:\n        \"\"\"\n        Test a query without submitting (practice mode)\n        \n        Returns:\n            Test results without creating submission\n        \"\"\"\n        try:\n            # Step 1: Quick validation\n            validation_result = query_validator.validate_query(query)\n            \n            if not validation_result['is_valid']:\n                return {\n                    'success': False,\n                    'feedback': validation_result['errors'],\n                    'security_violations': validation_result['blocked_operations'],\n                    'test_results': []\n                }\n            \n            # Step 2: Get or create sandbox\n            sandbox = await self._get_or_create_sandbox(user_id, problem_id, db)\n            \n            if not sandbox:\n                return {\n                    'success': False,\n                    'feedback': ['Failed to create test sandbox'],\n                    'test_results': []\n                }\n            \n            # Step 3: Execute the query to get actual results\n            query_result, execution_status = await execute_sandbox_query(\n                sandbox.id, query, 30\n            )\n            \n            # Step 4: Execute against visible test cases only (unless admin)\n            test_results = await self._execute_test_cases(\n                sandbox.id, problem_id, query, db, include_hidden_tests\n            )\n            \n            # Step 5: Provide feedback without final scoring\n            feedback = self._generate_test_feedback(test_results)\n            \n            return {\n                'success': True,\n                'feedback': feedback,\n                'test_results': test_results,\n                'security_warnings': validation_result.get('warnings', []),\n                'query_analysis': validation_result['parsed_query'],\n                'query_result': query_result,  # Include actual query execution results\n                'execution_status': execution_status.value if execution_status else 'SUCCESS'\n            }\n            \n        except Exception as e:\n            logger.error(f\"Query test failed: {e}\")\n            return {\n                'success': False,\n                'feedback': [f'Test execution error: {str(e)}'],\n                'test_results': []\n            }\n    \n    async def get_problem_schema(\n        self,\n        user_id: str,\n        problem_id: str,\n        db: Session\n    ) -> Dict[str, Any]:\n        \"\"\"\n        Get database schema information for a problem\n        \"\"\"\n        try:\n            # Verify problem exists\n            problem = db.query(Problem).filter(Problem.id == problem_id).first()\n            if not problem:\n                return {\n                    'success': False,\n                    'error': 'Problem not found'\n                }\n            \n            # Get or create sandbox to access database\n            sandbox = await self._get_or_create_sandbox(user_id, problem_id, db)\n            \n            if not sandbox:\n                return {\n                    'success': False,\n                    'error': 'Failed to create schema access sandbox'\n                }\n            \n            # Extract schema from problem question data\n            question_data = problem.question if isinstance(problem.question, dict) else {}\n            tables = question_data.get('tables', [])\n            \n            # Enhance with database introspection if needed\n            schema_info = await self._introspect_database_schema(sandbox.id, tables)\n            \n            return {\n                'success': True,\n                'problem_id': problem_id,\n                'tables': schema_info['tables'],\n                'relationships': schema_info.get('relationships', []),\n                'indexes': schema_info.get('indexes', []),\n                'constraints': schema_info.get('constraints', [])\n            }\n            \n        except Exception as e:\n            logger.error(f\"Schema retrieval failed: {e}\")\n            return {\n                'success': False,\n                'error': f'Schema access error: {str(e)}'\n            }\n    \n    async def get_user_progress(\n        self,\n        user_id: str,\n        db: Session\n    ) -> Dict[str, Any]:\n        \"\"\"\n        Get comprehensive user progress statistics\n        \"\"\"\n        try:\n            # Get user\n            user = db.query(User).filter(User.id == user_id).first()\n            if not user:\n                return {\n                    'success': False,\n                    'error': 'User not found'\n                }\n            \n            # Get submission statistics\n            from sqlalchemy import func, and_\n            \n            submission_stats = db.query(\n                func.count(Submission.id).label('total_submissions'),\n                func.count(Submission.id).filter(Submission.is_correct == True).label('correct_submissions'),\n                func.avg(Submission.execution_time).label('avg_execution_time'),\n                func.min(Submission.execution_time).label('best_execution_time')\n            ).filter(Submission.user_id == user_id).first()\n            \n            # Get problem difficulty breakdown\n            difficulty_stats = db.query(\n                Problem.difficulty,\n                func.count(Submission.id).filter(Submission.is_correct == True).label('solved_count')\n            ).join(\n                Submission, Submission.problem_id == Problem.id\n            ).filter(\n                Submission.user_id == user_id,\n                Submission.is_correct == True\n            ).group_by(Problem.difficulty).all()\n            \n            # Get recent activity\n            recent_submissions = db.query(Submission).filter(\n                Submission.user_id == user_id\n            ).order_by(Submission.submitted_at.desc()).limit(10).all()\n            \n            # Calculate streak and other metrics\n            streak_info = await self._calculate_user_streak(user_id, db)\n            \n            return {\n                'success': True,\n                'user_id': user_id,\n                'username': user.username,\n                'statistics': {\n                    'problems_solved': user.problems_solved or 0,\n                    'total_submissions': submission_stats.total_submissions or 0,\n                    'correct_submissions': submission_stats.correct_submissions or 0,\n                    'success_rate': (\n                        (submission_stats.correct_submissions / submission_stats.total_submissions * 100)\n                        if submission_stats.total_submissions > 0 else 0\n                    ),\n                    'avg_execution_time_ms': int(submission_stats.avg_execution_time or 0),\n                    'best_execution_time_ms': int(submission_stats.best_execution_time or 0)\n                },\n                'difficulty_breakdown': {\n                    stat.difficulty: stat.solved_count for stat in difficulty_stats\n                },\n                'streak': streak_info,\n                'recent_activity': [\n                    {\n                        'submission_id': sub.id,\n                        'problem_id': sub.problem_id,\n                        'is_correct': sub.is_correct,\n                        'submitted_at': sub.submitted_at.isoformat(),\n                        'execution_time': sub.execution_time\n                    }\n                    for sub in recent_submissions\n                ],\n                'badges': [],  # TODO: Implement badge system\n                'achievements': []  # TODO: Implement achievement system\n            }\n            \n        except Exception as e:\n            logger.error(f\"Progress retrieval failed: {e}\")\n            return {\n                'success': False,\n                'error': f'Progress access error: {str(e)}'\n            }\n    \n    async def _get_or_create_sandbox(\n        self,\n        user_id: str,\n        problem_id: str,\n        db: Session\n    ) -> Optional[UserSandbox]:\n        \"\"\"Get existing active sandbox or create new one\"\"\"\n        try:\n            # Check for existing active sandbox\n            existing_sandbox = db.query(UserSandbox).filter(\n                UserSandbox.user_id == user_id,\n                UserSandbox.problem_id == problem_id,\n                UserSandbox.status == SandboxStatus.ACTIVE.value,\n                UserSandbox.expires_at > datetime.utcnow()\n            ).first()\n            \n            if existing_sandbox:\n                # Update last accessed\n                existing_sandbox.last_accessed_at = datetime.utcnow()\n                db.commit()\n                return existing_sandbox\n            \n            # Create new sandbox\n            from .sandbox_manager import create_user_sandbox\n            sandbox = await create_user_sandbox(user_id, problem_id)\n            return sandbox\n            \n        except Exception as e:\n            logger.error(f\"Failed to get/create sandbox: {e}\")\n            return None\n    \n    async def _execute_all_test_cases(\n        self,\n        sandbox_id: str,\n        problem_id: str,\n        query: str,\n        db: Session\n    ) -> List[Dict[str, Any]]:\n        \"\"\"Execute query against all test cases\"\"\"\n        test_cases = db.query(TestCase).filter(\n            TestCase.problem_id == problem_id\n        ).order_by(TestCase.order_index).all()\n        \n        results = []\n        \n        for test_case in test_cases:\n            try:\n                # Execute query\n                result, execution_status = await execute_sandbox_query(\n                    sandbox_id,\n                    query,\n                    test_case.timeout_seconds\n                )\n                \n                # Validate result using advanced test validator\n                if execution_status == ExecutionStatus.SUCCESS:\n                    validation = test_validator.validate_test_case(\n                        result.get('result', []),\n                        test_case.expected_output,\n                        ComparisonMode.UNORDERED  # Allow row reordering by default\n                    )\n                    \n                    results.append({\n                        'test_case_id': test_case.id,\n                        'test_case_name': test_case.name,\n                        'is_hidden': test_case.is_hidden,\n                        'is_correct': validation['is_correct'],\n                        'score': validation['score'],\n                        'feedback': validation['feedback'],\n                        'execution_time_ms': result.get('execution_time_ms', 0),\n                        'execution_status': execution_status.value,\n                        'validation_details': validation['details']\n                    })\n                else:\n                    results.append({\n                        'test_case_id': test_case.id,\n                        'test_case_name': test_case.name,\n                        'is_hidden': test_case.is_hidden,\n                        'is_correct': False,\n                        'score': 0.0,\n                        'feedback': [result.get('error', 'Unknown execution error')],\n                        'execution_time_ms': 0,\n                        'execution_status': execution_status.value,\n                        'validation_details': {}\n                    })\n                    \n            except Exception as e:\n                logger.error(f\"Test case execution failed: {e}\")\n                results.append({\n                    'test_case_id': test_case.id,\n                    'test_case_name': test_case.name,\n                    'is_hidden': test_case.is_hidden,\n                    'is_correct': False,\n                    'score': 0.0,\n                    'feedback': [f'Execution error: {str(e)}'],\n                    'execution_time_ms': 0,\n                    'execution_status': 'ERROR',\n                    'validation_details': {}\n                })\n        \n        return results\n    \n    async def _execute_test_cases(\n        self,\n        sandbox_id: str,\n        problem_id: str,\n        query: str,\n        db: Session,\n        include_hidden: bool = False\n    ) -> List[Dict[str, Any]]:\n        \"\"\"Execute query against visible test cases\"\"\"\n        query_filter = db.query(TestCase).filter(TestCase.problem_id == problem_id)\n        \n        if not include_hidden:\n            query_filter = query_filter.filter(TestCase.is_hidden == False)\n            \n        test_cases = query_filter.order_by(TestCase.order_index).all()\n        \n        return await self._execute_specific_test_cases(sandbox_id, query, test_cases)\n    \n    async def _execute_specific_test_cases(\n        self,\n        sandbox_id: str,\n        query: str,\n        test_cases: List[TestCase]\n    ) -> List[Dict[str, Any]]:\n        \"\"\"Execute query against specific test cases\"\"\"\n        results = []\n        \n        for test_case in test_cases:\n            try:\n                result, execution_status = await execute_sandbox_query(\n                    sandbox_id,\n                    query,\n                    test_case.timeout_seconds\n                )\n                \n                if execution_status == ExecutionStatus.SUCCESS:\n                    validation = test_validator.validate_test_case(\n                        result.get('result', []),\n                        test_case.expected_output,\n                        ComparisonMode.UNORDERED\n                    )\n                    \n                    results.append({\n                        'test_case_id': test_case.id,\n                        'test_case_name': test_case.name,\n                        'is_correct': validation['is_correct'],\n                        'score': validation['score'],\n                        'feedback': validation['feedback'],\n                        'execution_time_ms': result.get('execution_time_ms', 0),\n                        'validation_details': validation['details']\n                    })\n                else:\n                    results.append({\n                        'test_case_id': test_case.id,\n                        'test_case_name': test_case.name,\n                        'is_correct': False,\n                        'score': 0.0,\n                        'feedback': [result.get('error', 'Execution failed')],\n                        'execution_time_ms': 0,\n                        'validation_details': {}\n                    })\n                    \n            except Exception as e:\n                results.append({\n                    'test_case_id': test_case.id,\n                    'test_case_name': test_case.name,\n                    'is_correct': False,\n                    'score': 0.0,\n                    'feedback': [f'Error: {str(e)}'],\n                    'execution_time_ms': 0,\n                    'validation_details': {}\n                })\n        \n        return results\n    \n    def _calculate_final_score(self, test_results: List[Dict[str, Any]]) -> Dict[str, Any]:\n        \"\"\"Calculate final score from all test results\"\"\"\n        if not test_results:\n            return {\n                'overall_score': 0.0,\n                'passed_count': 0,\n                'total_count': 0,\n                'feedback': ['No test cases found'],\n                'avg_execution_time': 0,\n                'max_execution_time': 0\n            }\n        \n        total_score = 0.0\n        passed_count = 0\n        total_count = len(test_results)\n        execution_times = []\n        feedback_messages = []\n        \n        for result in test_results:\n            total_score += result['score']\n            if result['is_correct']:\n                passed_count += 1\n            execution_times.append(result['execution_time_ms'])\n            \n            # Collect feedback from failed tests\n            if not result['is_correct'] and not result.get('is_hidden', False):\n                feedback_messages.extend(result['feedback'])\n        \n        overall_score = total_score / total_count if total_count > 0 else 0.0\n        \n        # Generate summary feedback\n        if overall_score >= 95:\n            summary = \"🎉 Excellent! Your solution passes all test cases.\"\n        elif overall_score >= 80:\n            summary = \"✅ Great job! Your solution passes most test cases with minor issues.\"\n        elif overall_score >= 60:\n            summary = \"⚠️ Good attempt, but there are some issues to address.\"\n        else:\n            summary = \"❌ Your solution needs significant improvements.\"\n        \n        return {\n            'overall_score': round(overall_score, 2),\n            'passed_count': passed_count,\n            'total_count': total_count,\n            'feedback': [summary] + feedback_messages,\n            'avg_execution_time': int(sum(execution_times) / len(execution_times)) if execution_times else 0,\n            'max_execution_time': max(execution_times) if execution_times else 0\n        }\n    \n    def _generate_test_feedback(self, test_results: List[Dict[str, Any]]) -> List[str]:\n        \"\"\"Generate helpful feedback for test mode\"\"\"\n        feedback = []\n        \n        passed = sum(1 for r in test_results if r['is_correct'])\n        total = len(test_results)\n        \n        if passed == total:\n            feedback.append(\"🎉 All visible test cases pass! Your solution looks correct.\")\n        elif passed > 0:\n            feedback.append(f\"✅ {passed}/{total} test cases pass. Review the failing cases below.\")\n        else:\n            feedback.append(\"❌ No test cases pass. Check your query logic carefully.\")\n        \n        # Add specific feedback from failed tests\n        for result in test_results:\n            if not result['is_correct']:\n                feedback.append(f\"❌ {result['test_case_name']}: {'; '.join(result['feedback'])}\")\n        \n        return feedback\n    \n    async def _introspect_database_schema(\n        self,\n        sandbox_id: str,\n        table_definitions: List[Dict[str, Any]]\n    ) -> Dict[str, Any]:\n        \"\"\"Introspect database schema for enhanced information\"\"\"\n        try:\n            # Use provided table definitions as base\n            schema_info = {\n                'tables': table_definitions,\n                'relationships': [],\n                'indexes': [],\n                'constraints': []\n            }\n            \n            # Could enhance with actual database introspection here\n            # For now, return the provided schema\n            return schema_info\n            \n        except Exception as e:\n            logger.error(f\"Schema introspection failed: {e}\")\n            return {\n                'tables': table_definitions,\n                'relationships': [],\n                'indexes': [],\n                'constraints': []\n            }\n    \n    async def _calculate_user_streak(\n        self,\n        user_id: str,\n        db: Session\n    ) -> Dict[str, Any]:\n        \"\"\"Calculate user's current solving streak\"\"\"\n        try:\n            # Get recent submissions ordered by date\n            from sqlalchemy import func, and_\n            \n            recent_submissions = db.query(Submission).filter(\n                Submission.user_id == user_id\n            ).order_by(Submission.submitted_at.desc()).limit(50).all()\n            \n            if not recent_submissions:\n                return {\n                    'current_streak': 0,\n                    'max_streak': 0,\n                    'last_correct_date': None\n                }\n            \n            # Calculate current streak\n            current_streak = 0\n            max_streak = 0\n            temp_streak = 0\n            last_correct_date = None\n            \n            for submission in recent_submissions:\n                if submission.is_correct:\n                    if current_streak == 0:  # First correct submission\n                        current_streak = 1\n                        last_correct_date = submission.submitted_at\n                    temp_streak += 1\n                    max_streak = max(max_streak, temp_streak)\n                else:\n                    if temp_streak > 0:\n                        break  # Streak broken\n                    temp_streak = 0\n            \n            return {\n                'current_streak': current_streak,\n                'max_streak': max_streak,\n                'last_correct_date': last_correct_date.isoformat() if last_correct_date else None\n            }\n            \n        except Exception as e:\n            logger.error(f\"Streak calculation failed: {e}\")\n            return {\n                'current_streak': 0,\n                'max_streak': 0,\n                'last_correct_date': None\n            }\n    \n    async def _update_user_progress(\n        self,\n        user_id: str,\n        problem_id: str,\n        db: Session\n    ) -> None:\n        \"\"\"Update user progress after successful submission\"\"\"\n        try:\n            user = db.query(User).filter(User.id == user_id).first()\n            if user:\n                # Check if this is the first time solving this problem\n                existing_correct = db.query(Submission).filter(\n                    Submission.user_id == user_id,\n                    Submission.problem_id == problem_id,\n                    Submission.is_correct == True\n                ).first()\n                \n                if not existing_correct:\n                    # First time solving this problem\n                    user.problems_solved = (user.problems_solved or 0) + 1\n                    db.commit()\n                    \n        except Exception as e:\n            logger.error(f\"Failed to update user progress: {e}\")\n\n\n# Global executor instance\nsecure_executor = SecureQueryExecutor()","size_bytes":26455},"api/test_validator.py":{"content":"\"\"\"\nAdvanced Test Case Validation System\n===================================\nProvides intelligent comparison of SQL query results against expected outputs,\nhandling different data types, null values, and ordering scenarios.\n\"\"\"\n\nimport json\nimport logging\nfrom typing import Any, Dict, List, Optional, Tuple, Union\nfrom datetime import datetime, date\nfrom decimal import Decimal\nimport re\nfrom enum import Enum\n\nlogger = logging.getLogger(__name__)\n\nclass ComparisonMode(Enum):\n    \"\"\"Different modes for comparing query results\"\"\"\n    EXACT = \"exact\"  # Exact match including order\n    UNORDERED = \"unordered\"  # Content match, ignore order\n    SUBSET = \"subset\"  # Expected is subset of actual\n    FUZZY = \"fuzzy\"  # Approximate match for numeric values\n\nclass TestCaseValidator:\n    \"\"\"Advanced validator for comparing SQL query results\"\"\"\n    \n    def __init__(self):\n        self.numeric_tolerance = 0.001  # For floating point comparisons\n        self.date_formats = [\n            '%Y-%m-%d',\n            '%Y-%m-%d %H:%M:%S',\n            '%Y-%m-%dT%H:%M:%S',\n            '%Y-%m-%d %H:%M:%S.%f'\n        ]\n    \n    def validate_test_case(\n        self,\n        actual_result: List[Dict[str, Any]],\n        expected_result: List[Dict[str, Any]], \n        comparison_mode: ComparisonMode = ComparisonMode.EXACT,\n        scoring_weights: Optional[Dict[str, float]] = None\n    ) -> Dict[str, Any]:\n        \"\"\"\n        Validate query results against expected test case\n        \n        Args:\n            actual_result: Query result from student\n            expected_result: Expected result from test case\n            comparison_mode: How to compare the results\n            scoring_weights: Weights for different comparison aspects\n            \n        Returns:\n            Validation result with score and feedback\n        \"\"\"\n        result = {\n            'is_correct': False,\n            'score': 0.0,\n            'max_score': 100.0,\n            'feedback': [],\n            'errors': [],\n            'warnings': [],\n            'details': {\n                'row_count_match': False,\n                'column_count_match': False,\n                'column_names_match': False,\n                'data_matches': False,\n                'type_matches': False\n            }\n        }\n        \n        try:\n            # Handle empty results\n            if not expected_result and not actual_result:\n                result['is_correct'] = True\n                result['score'] = 100.0\n                result['feedback'].append(\"Both results are empty - correct!\")\n                return result\n            \n            if not expected_result:\n                result['errors'].append(\"No expected result provided\")\n                return result\n                \n            if not actual_result:\n                result['errors'].append(\"Query returned no results\")\n                result['feedback'].append(\"Your query didn't return any rows. Check your WHERE conditions.\")\n                return result\n            \n            # Validate structure\n            structure_score = self._validate_structure(actual_result, expected_result, result)\n            \n            # Validate data content\n            content_score = self._validate_content(\n                actual_result, expected_result, comparison_mode, result\n            )\n            \n            # Calculate final score\n            weights = scoring_weights or {'structure': 0.3, 'content': 0.7}\n            final_score = (structure_score * weights.get('structure', 0.3) + \n                          content_score * weights.get('content', 0.7))\n            \n            result['score'] = round(final_score, 2)\n            result['is_correct'] = final_score >= 95.0  # 95% threshold for \"correct\"\n            \n            # Add summary feedback\n            self._add_summary_feedback(result)\n            \n        except Exception as e:\n            logger.error(f\"Test validation failed: {e}\")\n            result['errors'].append(f\"Validation error: {str(e)}\")\n            \n        return result\n    \n    def _validate_structure(\n        self, \n        actual: List[Dict[str, Any]], \n        expected: List[Dict[str, Any]], \n        result: Dict[str, Any]\n    ) -> float:\n        \"\"\"Validate structural aspects of the result\"\"\"\n        score = 0.0\n        max_points = 100.0\n        \n        # Check row count\n        if len(actual) == len(expected):\n            result['details']['row_count_match'] = True\n            score += 30.0\n        else:\n            result['feedback'].append(\n                f\"Row count mismatch: expected {len(expected)}, got {len(actual)}\"\n            )\n        \n        # Check column structure\n        if actual and expected:\n            actual_cols = set(actual[0].keys())\n            expected_cols = set(expected[0].keys())\n            \n            # Column count\n            if len(actual_cols) == len(expected_cols):\n                result['details']['column_count_match'] = True\n                score += 20.0\n            else:\n                result['feedback'].append(\n                    f\"Column count mismatch: expected {len(expected_cols)}, got {len(actual_cols)}\"\n                )\n            \n            # Column names\n            if actual_cols == expected_cols:\n                result['details']['column_names_match'] = True\n                score += 30.0\n            else:\n                missing = expected_cols - actual_cols\n                extra = actual_cols - expected_cols\n                \n                if missing:\n                    result['feedback'].append(f\"Missing columns: {', '.join(missing)}\")\n                if extra:\n                    result['feedback'].append(f\"Extra columns: {', '.join(extra)}\")\n        \n        # Column types validation\n        type_score = self._validate_column_types(actual, expected, result)\n        score += type_score * 0.2  # 20% weight for types\n        \n        return min(score, max_points)\n    \n    def _validate_column_types(\n        self, \n        actual: List[Dict[str, Any]], \n        expected: List[Dict[str, Any]], \n        result: Dict[str, Any]\n    ) -> float:\n        \"\"\"Validate column data types\"\"\"\n        if not actual or not expected:\n            return 0.0\n            \n        score = 0.0\n        total_columns = len(expected[0].keys())\n        \n        for col_name in expected[0].keys():\n            if col_name in actual[0]:\n                expected_type = type(expected[0][col_name])\n                actual_type = type(actual[0][col_name])\n                \n                if self._types_compatible(expected_type, actual_type):\n                    score += 1.0\n                else:\n                    result['warnings'].append(\n                        f\"Type mismatch in column '{col_name}': expected {expected_type.__name__}, got {actual_type.__name__}\"\n                    )\n        \n        if total_columns > 0:\n            type_match_ratio = score / total_columns\n            result['details']['type_matches'] = type_match_ratio > 0.8\n            return type_match_ratio * 100.0\n        \n        return 0.0\n    \n    def _types_compatible(self, expected_type: type, actual_type: type) -> bool:\n        \"\"\"Check if two types are compatible for comparison\"\"\"\n        # Handle None/null values\n        if expected_type is type(None) or actual_type is type(None):\n            return True\n            \n        # Numeric compatibility\n        numeric_types = (int, float, Decimal)\n        if issubclass(expected_type, numeric_types) and issubclass(actual_type, numeric_types):\n            return True\n            \n        # String compatibility\n        string_types = (str, )\n        if issubclass(expected_type, string_types) and issubclass(actual_type, string_types):\n            return True\n            \n        # Date/datetime compatibility\n        date_types = (date, datetime)\n        if issubclass(expected_type, date_types) and issubclass(actual_type, date_types):\n            return True\n            \n        # Exact type match\n        return expected_type == actual_type\n    \n    def _validate_content(\n        self,\n        actual: List[Dict[str, Any]],\n        expected: List[Dict[str, Any]],\n        comparison_mode: ComparisonMode,\n        result: Dict[str, Any]\n    ) -> float:\n        \"\"\"Validate the actual data content\"\"\"\n        if comparison_mode == ComparisonMode.EXACT:\n            return self._validate_exact_match(actual, expected, result)\n        elif comparison_mode == ComparisonMode.UNORDERED:\n            return self._validate_unordered_match(actual, expected, result)\n        elif comparison_mode == ComparisonMode.SUBSET:\n            return self._validate_subset_match(actual, expected, result)\n        elif comparison_mode == ComparisonMode.FUZZY:\n            return self._validate_fuzzy_match(actual, expected, result)\n        else:\n            return self._validate_exact_match(actual, expected, result)\n    \n    def _validate_exact_match(\n        self,\n        actual: List[Dict[str, Any]], \n        expected: List[Dict[str, Any]], \n        result: Dict[str, Any]\n    ) -> float:\n        \"\"\"Validate exact match including order\"\"\"\n        if len(actual) != len(expected):\n            return 0.0\n            \n        matching_rows = 0\n        total_rows = len(expected)\n        \n        for i, (actual_row, expected_row) in enumerate(zip(actual, expected)):\n            if self._rows_match(actual_row, expected_row):\n                matching_rows += 1\n            else:\n                row_diff = self._get_row_differences(actual_row, expected_row)\n                result['feedback'].append(f\"Row {i+1} mismatch: {row_diff}\")\n        \n        match_ratio = matching_rows / total_rows if total_rows > 0 else 0.0\n        result['details']['data_matches'] = match_ratio > 0.95\n        \n        return match_ratio * 100.0\n    \n    def _validate_unordered_match(\n        self,\n        actual: List[Dict[str, Any]],\n        expected: List[Dict[str, Any]],\n        result: Dict[str, Any]\n    ) -> float:\n        \"\"\"Validate content match ignoring order\"\"\"\n        if len(actual) != len(expected):\n            return 0.0\n        \n        # Convert to sets of tuples for comparison\n        actual_set = {self._row_to_tuple(row) for row in actual}\n        expected_set = {self._row_to_tuple(row) for row in expected}\n        \n        intersection = actual_set & expected_set\n        match_ratio = len(intersection) / len(expected_set) if expected_set else 0.0\n        \n        result['details']['data_matches'] = match_ratio > 0.95\n        \n        if match_ratio < 1.0:\n            missing = expected_set - actual_set\n            extra = actual_set - expected_set\n            \n            if missing:\n                result['feedback'].append(f\"Missing {len(missing)} expected rows\")\n            if extra:\n                result['feedback'].append(f\"Found {len(extra)} unexpected rows\")\n        \n        return match_ratio * 100.0\n    \n    def _validate_subset_match(\n        self,\n        actual: List[Dict[str, Any]],\n        expected: List[Dict[str, Any]],\n        result: Dict[str, Any]\n    ) -> float:\n        \"\"\"Validate that expected is a subset of actual\"\"\"\n        actual_set = {self._row_to_tuple(row) for row in actual}\n        expected_set = {self._row_to_tuple(row) for row in expected}\n        \n        intersection = actual_set & expected_set\n        match_ratio = len(intersection) / len(expected_set) if expected_set else 1.0\n        \n        result['details']['data_matches'] = match_ratio > 0.95\n        \n        if match_ratio < 1.0:\n            missing = expected_set - actual_set\n            result['feedback'].append(f\"Missing {len(missing)} required rows from expected result\")\n        \n        return match_ratio * 100.0\n    \n    def _validate_fuzzy_match(\n        self,\n        actual: List[Dict[str, Any]],\n        expected: List[Dict[str, Any]],\n        result: Dict[str, Any]\n    ) -> float:\n        \"\"\"Validate with fuzzy matching for numeric values\"\"\"\n        if len(actual) != len(expected):\n            return 0.0\n        \n        matching_rows = 0\n        for actual_row, expected_row in zip(actual, expected):\n            if self._rows_fuzzy_match(actual_row, expected_row):\n                matching_rows += 1\n        \n        match_ratio = matching_rows / len(expected) if expected else 0.0\n        result['details']['data_matches'] = match_ratio > 0.95\n        \n        return match_ratio * 100.0\n    \n    def _rows_match(self, actual_row: Dict[str, Any], expected_row: Dict[str, Any]) -> bool:\n        \"\"\"Check if two rows match exactly\"\"\"\n        if set(actual_row.keys()) != set(expected_row.keys()):\n            return False\n        \n        for key in expected_row.keys():\n            if not self._values_match(actual_row.get(key), expected_row[key]):\n                return False\n        \n        return True\n    \n    def _rows_fuzzy_match(self, actual_row: Dict[str, Any], expected_row: Dict[str, Any]) -> bool:\n        \"\"\"Check if two rows match with fuzzy numeric comparison\"\"\"\n        if set(actual_row.keys()) != set(expected_row.keys()):\n            return False\n        \n        for key in expected_row.keys():\n            if not self._values_fuzzy_match(actual_row.get(key), expected_row[key]):\n                return False\n        \n        return True\n    \n    def _values_match(self, actual: Any, expected: Any) -> bool:\n        \"\"\"Check if two values match\"\"\"\n        # Handle None values\n        if actual is None and expected is None:\n            return True\n        if actual is None or expected is None:\n            return False\n        \n        # Convert both to strings and compare (handles type mismatches)\n        return str(actual).strip() == str(expected).strip()\n    \n    def _values_fuzzy_match(self, actual: Any, expected: Any) -> bool:\n        \"\"\"Check if two values match with fuzzy comparison\"\"\"\n        # Exact match first\n        if self._values_match(actual, expected):\n            return True\n        \n        # Numeric fuzzy matching\n        try:\n            actual_num = float(actual)\n            expected_num = float(expected)\n            return abs(actual_num - expected_num) <= self.numeric_tolerance\n        except (ValueError, TypeError):\n            pass\n        \n        # String fuzzy matching (case insensitive, whitespace normalized)\n        try:\n            actual_str = str(actual).strip().lower()\n            expected_str = str(expected).strip().lower()\n            return actual_str == expected_str\n        except:\n            return False\n    \n    def _row_to_tuple(self, row: Dict[str, Any]) -> tuple:\n        \"\"\"Convert row to tuple for set operations\"\"\"\n        return tuple(sorted(row.items()))\n    \n    def _get_row_differences(self, actual_row: Dict[str, Any], expected_row: Dict[str, Any]) -> str:\n        \"\"\"Get human-readable differences between two rows\"\"\"\n        differences = []\n        \n        all_keys = set(actual_row.keys()) | set(expected_row.keys())\n        \n        for key in all_keys:\n            actual_val = actual_row.get(key, '<missing>')\n            expected_val = expected_row.get(key, '<missing>')\n            \n            if actual_val != expected_val:\n                differences.append(f\"{key}: got '{actual_val}', expected '{expected_val}'\")\n        \n        return \"; \".join(differences)\n    \n    def _add_summary_feedback(self, result: Dict[str, Any]):\n        \"\"\"Add summary feedback based on validation results\"\"\"\n        score = result['score']\n        \n        if score >= 95:\n            result['feedback'].insert(0, \"🎉 Perfect! Your query matches the expected result exactly.\")\n        elif score >= 80:\n            result['feedback'].insert(0, \"✅ Great job! Your query is mostly correct with minor issues.\")\n        elif score >= 60:\n            result['feedback'].insert(0, \"⚠️  Good attempt, but there are some significant differences.\")\n        elif score >= 40:\n            result['feedback'].insert(0, \"❌ Your query has several issues that need to be addressed.\")\n        else:\n            result['feedback'].insert(0, \"💡 Your query needs major corrections. Review the expected output carefully.\")\n    \n    def compare_schemas(\n        self, \n        actual_schema: List[Dict[str, Any]], \n        expected_schema: List[Dict[str, Any]]\n    ) -> Dict[str, Any]:\n        \"\"\"Compare database schemas for structure validation\"\"\"\n        result = {\n            'matches': True,\n            'differences': [],\n            'score': 100.0\n        }\n        \n        # Convert to comparable format\n        actual_tables = {table['name']: table for table in actual_schema}\n        expected_tables = {table['name']: table for table in expected_schema}\n        \n        # Check for missing/extra tables\n        missing_tables = set(expected_tables.keys()) - set(actual_tables.keys())\n        extra_tables = set(actual_tables.keys()) - set(expected_tables.keys())\n        \n        if missing_tables:\n            result['differences'].append(f\"Missing tables: {', '.join(missing_tables)}\")\n            result['matches'] = False\n            result['score'] -= 20\n        \n        if extra_tables:\n            result['differences'].append(f\"Extra tables: {', '.join(extra_tables)}\")\n            result['score'] -= 10\n        \n        # Check table structures\n        for table_name in expected_tables.keys():\n            if table_name in actual_tables:\n                table_diff = self._compare_table_structure(\n                    actual_tables[table_name],\n                    expected_tables[table_name]\n                )\n                if table_diff:\n                    result['differences'].extend(table_diff)\n                    result['matches'] = False\n                    result['score'] -= 10\n        \n        result['score'] = max(0.0, result['score'])\n        return result\n    \n    def _compare_table_structure(self, actual_table: Dict, expected_table: Dict) -> List[str]:\n        \"\"\"Compare structure of two tables\"\"\"\n        differences = []\n        table_name = expected_table['name']\n        \n        actual_columns = {col['name']: col for col in actual_table.get('columns', [])}\n        expected_columns = {col['name']: col for col in expected_table.get('columns', [])}\n        \n        # Check for missing/extra columns\n        missing_cols = set(expected_columns.keys()) - set(actual_columns.keys())\n        extra_cols = set(actual_columns.keys()) - set(expected_columns.keys())\n        \n        if missing_cols:\n            differences.append(f\"Table {table_name}: Missing columns {', '.join(missing_cols)}\")\n        \n        if extra_cols:\n            differences.append(f\"Table {table_name}: Extra columns {', '.join(extra_cols)}\")\n        \n        # Check column types\n        for col_name in expected_columns.keys():\n            if col_name in actual_columns:\n                expected_type = expected_columns[col_name].get('type', '')\n                actual_type = actual_columns[col_name].get('type', '')\n                \n                if expected_type != actual_type:\n                    differences.append(\n                        f\"Table {table_name}, column {col_name}: \"\n                        f\"expected type {expected_type}, got {actual_type}\"\n                    )\n        \n        return differences\n\n\n# Global test validator instance\ntest_validator = TestCaseValidator()","size_bytes":19343}},"version":1}